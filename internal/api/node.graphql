fragment nodeFields on Node {
    description
    name
}

fragment alertEmitterNodeFields on AlertEmitterNode {
    sendMessageType {
        name
    }
}

fragment appChangeReceiverNodeFields on AppChangeReceiverNode {
    app {
        name
    }
    receiveMessageType {
        name
    }
}

fragment appChangeRouterNodeFields on AppChangeRouterNode {
    receiveMessageType {
        name
    }
    sendMessageType {
        name
    }
}

fragment auditEmitterNodeFields on AuditEmitterNode {
    sendMessageType {
        name
    }
}

fragment bitmapRouterNodeFields on BitmapRouterNode {
    config
    inlineBitmapper
    loggingLevel
    managedBitmapper {
        name
    }
    receiveMessageType {
        name
    }
    requirements
    routeTable
    sendMessageType {
        name
    }
}

fragment changeEmitterNodeFields on ChangeEmitterNode {
    sendMessageType {
        name
    }
}

fragment crossTenantReceivingNodeFields on CrossTenantReceivingNode {
    app {
        name
    }
    sendMessageType {
        name
    }
}

fragment crossTenantSendingNodeFields on CrossTenantSendingNode {
    app {
        name
    }
    config
    inlineProcessor
    loggingLevel
    managedProcessor {
        name
    }
    receiveMessageType {
        name
    }
    requirements
    sendMessageType {
        name
    }
    sequentialProcessing
}

fragment deadLetterEmitterNodeFields on DeadLetterEmitterNode {
    sendMessageType {
        name
    }
}

fragment externalNodeFields on ExternalNode {
    app {
        ... on CrossAccountApp {
            name
        }
        ... on ExternalApp {
            name
        }
    }
    config
    receiveMessageType {
        name
    }
    sendMessageType {
        name
    }
}

fragment filesDotComWebhookNodeFields on FilesDotComWebhookNode {
    endpoint
    sendMessageType {
        name
    }
}

fragment loadBalancerNodeFields on LoadBalancerNode {
    receiveMessageType {
        name
    }
    sendMessageType {
        name
    }
}

fragment logEmitterNodeFields on LogEmitterNode {
    sendMessageType {
        name
    }
}

fragment managedNodeFields on ManagedNode {
    app {
        name
    }
    config
    loggingLevel
    managedNodeType {
        name
    }
    mounts {
        description
        source
        target
    }
    ports {
        containerPort
        description
        hostAddress
        protocol
    }
    receiveMessageType {
        name
    }
    sendMessageType {
        name
    }
}

fragment processorNodeFields on ProcessorNode {
    config
    inlineProcessor
    loggingLevel
    managedProcessor {
        name
    }
    receiveMessageType {
        name
    }
    requirements
    sendMessageType {
        name
    }
    sequentialProcessing
}

fragment timerNodeFields on TimerNode {
    scheduleExpression
    sendMessageType {
        name
    }
}

fragment webhookNodeFields on WebhookNode {
    config
    endpoint
    inlineApiAuthenticator
    loggingLevel
    managedApiAuthenticator {
        name
    }
    requirements
    sendMessageType {
        name
    }
}

mutation CreateBitmapRouterNode(
    $name: String!,
    $receiveMessageType: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineBitmapper: String,
    $loggingLevel: LogLevel,
    $managedBitmapper: String,
    $requirements: [String!],
    $routeTable: AWSJSON
) {
    CreateBitmapRouterNode(
        name: $name,
        receiveMessageType: $receiveMessageType,
        tenant: $tenant,
        config: $config,
        description: $description,
        inlineBitmapper: $inlineBitmapper,
        loggingLevel: $loggingLevel,
        managedBitmapper: $managedBitmapper,
        requirements: $requirements,
        routeTable: $routeTable
    ) {
        ...nodeFields
        ...bitmapRouterNodeFields
    }
}

mutation CreateCrossTenantSendingNode(
    $app: String!,
    $name: String!,
    $receiveMessageType: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineProcessor: String,
    $loggingLevel: LogLevel,
    $managedProcessor: String,
    $requirements: [String!],
    $sendMessageType: String,
    $sequentialProcessing: Boolean
) {
    CreateCrossTenantSendingNode(
        app: $app,
        name: $name,
        receiveMessageType: $receiveMessageType,
        tenant: $tenant,
        config: $config,
        description: $description,
        inlineProcessor: $inlineProcessor,
        loggingLevel: $loggingLevel,
        managedProcessor: $managedProcessor,
        requirements: $requirements,
        sendMessageType: $sendMessageType,
        sequentialProcessing: $sequentialProcessing
    ) {
        ...nodeFields
        ...crossTenantSendingNodeFields
    }
}

mutation CreateExternalNode(
    $app: String!,
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $receiveMessageType: String,
    $sendMessageType: String,
) {
    CreateExternalNode(
        app: $app,
        name: $name,
        tenant: $tenant,
        config: $config,
        description: $description,
        receiveMessageType: $receiveMessageType,
        sendMessageType: $sendMessageType,
    ) {
        ...nodeFields
        ...externalNodeFields
    }
}

mutation CreateFilesDotComWebhookNode(
    $apiKey: String!,
    $name: String!,
    $tenant: String!,
    $description: String
) {
    CreateFilesDotComWebhookNode(
        apiKey: $apiKey,
        name: $name,
        tenant: $tenant,
        description: $description
    ) {
        ...nodeFields
        ...filesDotComWebhookNodeFields
    }
}

mutation CreateLoadBalancerNode(
    $name: String!,
    $receiveMessageType: String!,
    $tenant: String!,
    $description: String
) {
    CreateLoadBalancerNode(
        name: $name,
        receiveMessageType: $receiveMessageType,
        tenant: $tenant,
        description: $description
    ) {
        ...nodeFields
        ...loadBalancerNodeFields
    }
}

mutation CreateManagedNode(
    $app: String!,
    $managedNodeType: String!,
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $loggingLevel: LogLevel,
    $mounts: [MountInput!],
    $ports: [PortInput!]
) {
    CreateManagedNode(
        app: $app,
        managedNodeType: $managedNodeType,
        name: $name,
        tenant: $tenant,
        config: $config,
        description: $description,
        loggingLevel: $loggingLevel,
        mounts: $mounts,
        ports: $ports
    ) {
        ...nodeFields
        ...managedNodeFields
    }
}

mutation CreateProcessorNode(
    $name: String!,
    $receiveMessageType: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineProcessor: String,
    $loggingLevel: LogLevel,
    $managedProcessor: String,
    $requirements: [String!],
    $sendMessageType: String,
    $sequentialProcessing: Boolean
) {
    CreateProcessorNode(
        name: $name,
        receiveMessageType: $receiveMessageType,
        tenant: $tenant,
        config: $config,
        description: $description,
        inlineProcessor: $inlineProcessor,
        loggingLevel: $loggingLevel,
        managedProcessor: $managedProcessor,
        requirements: $requirements,
        sendMessageType: $sendMessageType,
        sequentialProcessing: $sequentialProcessing
    ) {
        ...nodeFields
        ...processorNodeFields
    }
}

mutation CreateTimerNode(
    $name: String!,
    $scheduleExpression: String!,
    $tenant: String!,
    $description: String
) {
    CreateTimerNode(
        name: $name,
        scheduleExpression: $scheduleExpression,
        tenant: $tenant,
        description: $description
    ) {
        ...nodeFields
        ...timerNodeFields
    }
}

mutation CreateWebhookNode(
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineApiAuthenticator: String,
    $loggingLevel: LogLevel,
    $managedApiAuthenticator: String,
    $requirements: [String!],
    $sendMessageType: String,
) {
    CreateWebhookNode(
        name: $name,
        tenant: $tenant,
        config: $config,
        description: $description,
        inlineApiAuthenticator: $inlineApiAuthenticator,
        loggingLevel: $loggingLevel,
        managedApiAuthenticator: $managedApiAuthenticator,
        requirements: $requirements,
        sendMessageType: $sendMessageType,
    ) {
        ...nodeFields
        ...webhookNodeFields
    }
}

query DeleteNode($name: String!, $tenant: String!) {
    GetNode(name: $name, tenant: $tenant) {
        ... on BitmapRouterNode {
            Delete(drainEdges: true)
        }
        ... on CrossTenantReceivingNode {
            Delete(drainEdges: true)
        }
        ... on CrossTenantSendingNode {
            Delete(drainEdges: true)
        }
        ... on ExternalNode {
            Delete(drainEdges: true)
        }
        ... on FilesDotComWebhookNode {
            Delete(drainEdges: true)
        }
        ... on LoadBalancerNode {
            Delete(drainEdges: true)
        }
        ... on ManagedNode {
            Delete(drainEdges: true)
        }
        ... on ProcessorNode {
            Delete(drainEdges: true)
        }
        ... on TimerNode {
            Delete(drainEdges: true)
        }
        ... on WebhookNode {
            Delete(drainEdges: true)
        }
    }
}


query ReadNode($name: String!, $tenant: String!) {
    GetNode(name: $name, tenant: $tenant) {
        ...nodeFields
        ... on AlertEmitterNode {
            ...alertEmitterNodeFields
        }
        ... on AppChangeReceiverNode {
            ...appChangeReceiverNodeFields
        }
        ... on AppChangeRouterNode {
            ...appChangeRouterNodeFields
        }
        ... on AuditEmitterNode {
            ...auditEmitterNodeFields
        }
        ... on BitmapRouterNode {
            ...bitmapRouterNodeFields
        }
        ... on ChangeEmitterNode {
            ...changeEmitterNodeFields
        }
        ... on CrossTenantReceivingNode {
            ...crossTenantReceivingNodeFields
        }
        ... on CrossTenantSendingNode {
            ...crossTenantSendingNodeFields
        }
        ... on DeadLetterEmitterNode {
            ...deadLetterEmitterNodeFields
        }
        ... on ExternalNode {
            ...externalNodeFields
        }
        ... on FilesDotComWebhookNode {
            ...filesDotComWebhookNodeFields
        }
        ... on LoadBalancerNode {
            ...loadBalancerNodeFields
        }
        ... on LogEmitterNode {
            ...logEmitterNodeFields
        }
        ... on ManagedNode {
            ...managedNodeFields
        }
        ... on ProcessorNode {
            ...processorNodeFields
        }
        ... on TimerNode {
            ...timerNodeFields
        }
        ... on WebhookNode {
            ...webhookNodeFields
        }
    }
}

query ReadNodeMessageTypes($name: String!, $tenant: String!) {
    GetNode(name: $name, tenant: $tenant) {
        ... on AlertEmitterNode {
            sendMessageType {
                name
            }
        }
        ... on AppChangeReceiverNode {
            receiveMessageType {
                name
            }
        }
        ... on AppChangeRouterNode {
            receiveMessageType {
                name
            }
            sendMessageType {
                name
            }
        }
        ... on AuditEmitterNode {
            sendMessageType {
                name
            }
        }
        ... on BitmapRouterNode {
            receiveMessageType {
                name
            }
            sendMessageType {
                name
            }
        }
        ... on ChangeEmitterNode {
            sendMessageType {
                name
            }
        }
        ... on CrossTenantReceivingNode {
            sendMessageType {
                name
            }
        }
        ... on CrossTenantSendingNode {
            receiveMessageType {
                name
            }
        }
        ... on DeadLetterEmitterNode {
            sendMessageType {
                name
            }
        }
        ... on ExternalNode {
            receiveMessageType {
                name
            }
            sendMessageType {
                name
            }
        }
        ... on FilesDotComWebhookNode {
            sendMessageType {
                name
            }
        }
        ... on LoadBalancerNode {
            receiveMessageType {
                name
            }
            sendMessageType {
                name
            }
        }
        ... on LogEmitterNode {
            sendMessageType {
                name
            }
        }
        ... on ManagedNode {
            receiveMessageType {
                name
            }
            sendMessageType {
                name
            }
        }
        ... on ProcessorNode {
            receiveMessageType {
                name
            }
            sendMessageType {
                name
            }
        }
        ... on TimerNode {
            sendMessageType {
                name
            }
        }
        ... on WebhookNode {
            sendMessageType {
                name
            }
        }
    }
}

query UpdateBitmapRouterNode(
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineBitmapper: String,
    $loggingLevel: LogLevel,
    $managedBitmapper: String,
    $requirements: [String!],
    $routeTable: AWSJSON
) {
    GetNode(name: $name, tenant: $tenant) {
        ...on BitmapRouterNode {
            Update(
                config: $config,
                description: $description,
                inlineBitmapper: $inlineBitmapper,
                loggingLevel: $loggingLevel,
                managedBitmapper: $managedBitmapper,
                requirements: $requirements,
                routeTable: $routeTable
            ) {
                ...nodeFields
                ...bitmapRouterNodeFields
            }
        }
    }
}


query UpdateCrossTenantReceivingNode(
    $name: String!,
    $tenant: String!,
    $description: String
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on CrossTenantReceivingNode {
            Update(description: $description) {
                ...nodeFields
                ...crossTenantReceivingNodeFields
            }
        }
    }
}

query UpdateCrossTenantSendingNode(
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineProcessor: String,
    $loggingLevel: LogLevel,
    $managedProcessor: String,
    $requirements: [String!],
    $sequentialProcessing: Boolean
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on CrossTenantSendingNode {
            Update(
                config: $config,
                description: $description,
                inlineProcessor: $inlineProcessor,
                loggingLevel: $loggingLevel,
                managedProcessor: $managedProcessor,
                requirements: $requirements,
                sequentialProcessing: $sequentialProcessing
            ) {
                ...nodeFields
                ...crossTenantSendingNodeFields
            }
        }
    }
}

query UpdateExternalNode(
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on ExternalNode {
            Update(config: $config, description: $description) {
                ...nodeFields
                ...externalNodeFields
            }
        }
    }
}

query UpdateFilesDotComWebhookNode(
    $name: String!,
    $tenant: String!,
    $apiKey: String,
    $description: String
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on FilesDotComWebhookNode {
            Update(apiKey: $apiKey, description: $description) {
                ...nodeFields
                ...filesDotComWebhookNodeFields
            }
        }
    }
}

query UpdateLoadBalancerNode(
    $name: String!,
    $tenant: String!,
    $description: String
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on LoadBalancerNode {
            Update(description: $description) {
                ...nodeFields
                ...loadBalancerNodeFields
            }
        }
    }
}

query UpdateManagedNode(
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $loggingLevel: LogLevel,
    $mounts: [MountInput!],
    $ports: [PortInput!]
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on ManagedNode{
            Update(
                config: $config,
                description: $description,
                loggingLevel: $loggingLevel,
                mounts: $mounts,
                ports: $ports
            ) {
                ...nodeFields
                ...managedNodeFields
            }
        }
    }
}

query UpdateProcessorNode(
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineProcessor: String,
    $loggingLevel: LogLevel,
    $managedProcessor: String,
    $requirements: [String!],
    $sequentialProcessing: Boolean
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on ProcessorNode {
            Update(
                config: $config,
                description: $description,
                inlineProcessor: $inlineProcessor,
                loggingLevel: $loggingLevel,
                managedProcessor: $managedProcessor,
                requirements: $requirements,
                sequentialProcessing: $sequentialProcessing
            ) {
                ...nodeFields
                ...processorNodeFields
            }
        }
    }
}

query UpdateTimerNode(
    $name: String!,
    $tenant: String!,
    $description: String
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on TimerNode {
            Update(description: $description) {
                ...nodeFields
                ...timerNodeFields
            }
        }
    }
}

query UpdateWebhookNode(
    $name: String!,
    $tenant: String!,
    $config: AWSJSON,
    $description: String,
    $inlineApiAuthenticator: String,
    $loggingLevel: LogLevel,
    $managedApiAuthenticator: String,
    $requirements: [String!]
) {
    GetNode(name: $name, tenant: $tenant) {
        ... on WebhookNode {
            Update(
                config: $config,
                description: $description,
                inlineApiAuthenticator: $inlineApiAuthenticator,
                loggingLevel: $loggingLevel,
                managedApiAuthenticator: $managedApiAuthenticator,
                requirements: $requirements,
            ) {
                ...nodeFields
                ...webhookNodeFields
            }
        }
    }
}
