// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction struct {
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	InUse        bool     `json:"inUse"`
	Name         string   `json:"name"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
	System       *bool    `json:"system"`
}

// GetCode returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Code, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetCode() string {
	return v.Code
}

// GetDescription returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Description, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetDescription() string {
	return v.Description
}

// GetInUse returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.InUse, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetInUse() bool {
	return v.InUse
}

// GetName returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetName() string {
	return v.Name
}

// GetReadme returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Readme, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetReadme() *string {
	return v.Readme
}

// GetRequirements returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetRequirements() []string {
	return v.Requirements
}

// GetSystem returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.System, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetSystem() *bool {
	return v.System
}

// CreateApiAuthenticatorFunctionResponse is returned by CreateApiAuthenticatorFunction on success.
type CreateApiAuthenticatorFunctionResponse struct {
	CreateApiAuthenticatorFunction CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction `json:"CreateApiAuthenticatorFunction"`
}

// GetCreateApiAuthenticatorFunction returns CreateApiAuthenticatorFunctionResponse.CreateApiAuthenticatorFunction, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionResponse) GetCreateApiAuthenticatorFunction() CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction {
	return v.CreateApiAuthenticatorFunction
}

// CreateBitmapperFunctionCreateBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type CreateBitmapperFunctionCreateBitmapperFunction struct {
	ArgumentMessageType CreateBitmapperFunctionCreateBitmapperFunctionArgumentMessageType `json:"argumentMessageType"`
	Code                string                                                            `json:"code"`
	Description         string                                                            `json:"description"`
	InUse               bool                                                              `json:"inUse"`
	Name                string                                                            `json:"name"`
	Readme              *string                                                           `json:"readme"`
	Requirements        []string                                                          `json:"requirements"`
	System              *bool                                                             `json:"system"`
}

// GetArgumentMessageType returns CreateBitmapperFunctionCreateBitmapperFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetArgumentMessageType() CreateBitmapperFunctionCreateBitmapperFunctionArgumentMessageType {
	return v.ArgumentMessageType
}

// GetCode returns CreateBitmapperFunctionCreateBitmapperFunction.Code, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetCode() string { return v.Code }

// GetDescription returns CreateBitmapperFunctionCreateBitmapperFunction.Description, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetDescription() string {
	return v.Description
}

// GetInUse returns CreateBitmapperFunctionCreateBitmapperFunction.InUse, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetInUse() bool { return v.InUse }

// GetName returns CreateBitmapperFunctionCreateBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetName() string { return v.Name }

// GetReadme returns CreateBitmapperFunctionCreateBitmapperFunction.Readme, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns CreateBitmapperFunctionCreateBitmapperFunction.Requirements, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetRequirements() []string {
	return v.Requirements
}

// GetSystem returns CreateBitmapperFunctionCreateBitmapperFunction.System, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetSystem() *bool { return v.System }

// CreateBitmapperFunctionCreateBitmapperFunctionArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type CreateBitmapperFunctionCreateBitmapperFunctionArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns CreateBitmapperFunctionCreateBitmapperFunctionArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunctionArgumentMessageType) GetName() string {
	return v.Name
}

// CreateBitmapperFunctionResponse is returned by CreateBitmapperFunction on success.
type CreateBitmapperFunctionResponse struct {
	CreateBitmapperFunction CreateBitmapperFunctionCreateBitmapperFunction `json:"CreateBitmapperFunction"`
}

// GetCreateBitmapperFunction returns CreateBitmapperFunctionResponse.CreateBitmapperFunction, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionResponse) GetCreateBitmapperFunction() CreateBitmapperFunctionCreateBitmapperFunction {
	return v.CreateBitmapperFunction
}

// CreateMessageTypeCreateMessageType includes the requested fields of the GraphQL type MessageType.
type CreateMessageTypeCreateMessageType struct {
	Auditor           string   `json:"auditor"`
	BitmapperTemplate string   `json:"bitmapperTemplate"`
	Description       string   `json:"description"`
	InUse             bool     `json:"inUse"`
	Name              string   `json:"name"`
	ProcessorTemplate string   `json:"processorTemplate"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
	SampleMessage     string   `json:"sampleMessage"`
	System            *bool    `json:"system"`
}

// GetAuditor returns CreateMessageTypeCreateMessageType.Auditor, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetAuditor() string { return v.Auditor }

// GetBitmapperTemplate returns CreateMessageTypeCreateMessageType.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetBitmapperTemplate() string {
	return v.BitmapperTemplate
}

// GetDescription returns CreateMessageTypeCreateMessageType.Description, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetDescription() string { return v.Description }

// GetInUse returns CreateMessageTypeCreateMessageType.InUse, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetInUse() bool { return v.InUse }

// GetName returns CreateMessageTypeCreateMessageType.Name, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetName() string { return v.Name }

// GetProcessorTemplate returns CreateMessageTypeCreateMessageType.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetProcessorTemplate() string {
	return v.ProcessorTemplate
}

// GetReadme returns CreateMessageTypeCreateMessageType.Readme, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetReadme() *string { return v.Readme }

// GetRequirements returns CreateMessageTypeCreateMessageType.Requirements, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetRequirements() []string { return v.Requirements }

// GetSampleMessage returns CreateMessageTypeCreateMessageType.SampleMessage, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetSampleMessage() string { return v.SampleMessage }

// GetSystem returns CreateMessageTypeCreateMessageType.System, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetSystem() *bool { return v.System }

// CreateMessageTypeResponse is returned by CreateMessageType on success.
type CreateMessageTypeResponse struct {
	CreateMessageType CreateMessageTypeCreateMessageType `json:"CreateMessageType"`
}

// GetCreateMessageType returns CreateMessageTypeResponse.CreateMessageType, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeResponse) GetCreateMessageType() CreateMessageTypeCreateMessageType {
	return v.CreateMessageType
}

// CreateProcessorFunctionCreateProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type CreateProcessorFunctionCreateProcessorFunction struct {
	ArgumentMessageType CreateProcessorFunctionCreateProcessorFunctionArgumentMessageType `json:"argumentMessageType"`
	Code                string                                                            `json:"code"`
	Description         string                                                            `json:"description"`
	InUse               bool                                                              `json:"inUse"`
	Name                string                                                            `json:"name"`
	Readme              *string                                                           `json:"readme"`
	Requirements        []string                                                          `json:"requirements"`
	ReturnMessageType   *CreateProcessorFunctionCreateProcessorFunctionReturnMessageType  `json:"returnMessageType"`
	System              *bool                                                             `json:"system"`
}

// GetArgumentMessageType returns CreateProcessorFunctionCreateProcessorFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetArgumentMessageType() CreateProcessorFunctionCreateProcessorFunctionArgumentMessageType {
	return v.ArgumentMessageType
}

// GetCode returns CreateProcessorFunctionCreateProcessorFunction.Code, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetCode() string { return v.Code }

// GetDescription returns CreateProcessorFunctionCreateProcessorFunction.Description, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetDescription() string {
	return v.Description
}

// GetInUse returns CreateProcessorFunctionCreateProcessorFunction.InUse, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetInUse() bool { return v.InUse }

// GetName returns CreateProcessorFunctionCreateProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetName() string { return v.Name }

// GetReadme returns CreateProcessorFunctionCreateProcessorFunction.Readme, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns CreateProcessorFunctionCreateProcessorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetRequirements() []string {
	return v.Requirements
}

// GetReturnMessageType returns CreateProcessorFunctionCreateProcessorFunction.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetReturnMessageType() *CreateProcessorFunctionCreateProcessorFunctionReturnMessageType {
	return v.ReturnMessageType
}

// GetSystem returns CreateProcessorFunctionCreateProcessorFunction.System, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetSystem() *bool { return v.System }

// CreateProcessorFunctionCreateProcessorFunctionArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type CreateProcessorFunctionCreateProcessorFunctionArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns CreateProcessorFunctionCreateProcessorFunctionArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunctionArgumentMessageType) GetName() string {
	return v.Name
}

// CreateProcessorFunctionCreateProcessorFunctionReturnMessageType includes the requested fields of the GraphQL type MessageType.
type CreateProcessorFunctionCreateProcessorFunctionReturnMessageType struct {
	Name string `json:"name"`
}

// GetName returns CreateProcessorFunctionCreateProcessorFunctionReturnMessageType.Name, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunctionReturnMessageType) GetName() string {
	return v.Name
}

// CreateProcessorFunctionResponse is returned by CreateProcessorFunction on success.
type CreateProcessorFunctionResponse struct {
	CreateProcessorFunction CreateProcessorFunctionCreateProcessorFunction `json:"CreateProcessorFunction"`
}

// GetCreateProcessorFunction returns CreateProcessorFunctionResponse.CreateProcessorFunction, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionResponse) GetCreateProcessorFunction() CreateProcessorFunctionCreateProcessorFunction {
	return v.CreateProcessorFunction
}

// DeleteFunctionGetFunction includes the requested fields of the GraphQL interface Function.
//
// DeleteFunctionGetFunction is implemented by the following types:
// DeleteFunctionGetFunctionApiAuthenticatorFunction
// DeleteFunctionGetFunctionBitmapperFunction
// DeleteFunctionGetFunctionProcessorFunction
type DeleteFunctionGetFunction interface {
	implementsGraphQLInterfaceDeleteFunctionGetFunction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetDelete returns the interface-field "Delete" from its implementation.
	GetDelete() bool
}

func (v *DeleteFunctionGetFunctionApiAuthenticatorFunction) implementsGraphQLInterfaceDeleteFunctionGetFunction() {
}
func (v *DeleteFunctionGetFunctionBitmapperFunction) implementsGraphQLInterfaceDeleteFunctionGetFunction() {
}
func (v *DeleteFunctionGetFunctionProcessorFunction) implementsGraphQLInterfaceDeleteFunctionGetFunction() {
}

func __unmarshalDeleteFunctionGetFunction(b []byte, v *DeleteFunctionGetFunction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAuthenticatorFunction":
		*v = new(DeleteFunctionGetFunctionApiAuthenticatorFunction)
		return json.Unmarshal(b, *v)
	case "BitmapperFunction":
		*v = new(DeleteFunctionGetFunctionBitmapperFunction)
		return json.Unmarshal(b, *v)
	case "ProcessorFunction":
		*v = new(DeleteFunctionGetFunctionProcessorFunction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Function.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteFunctionGetFunction: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteFunctionGetFunction(v *DeleteFunctionGetFunction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteFunctionGetFunctionApiAuthenticatorFunction:
		typename = "ApiAuthenticatorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteFunctionGetFunctionApiAuthenticatorFunction
		}{typename, v}
		return json.Marshal(result)
	case *DeleteFunctionGetFunctionBitmapperFunction:
		typename = "BitmapperFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteFunctionGetFunctionBitmapperFunction
		}{typename, v}
		return json.Marshal(result)
	case *DeleteFunctionGetFunctionProcessorFunction:
		typename = "ProcessorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteFunctionGetFunctionProcessorFunction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteFunctionGetFunction: "%T"`, v)
	}
}

// DeleteFunctionGetFunctionApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type DeleteFunctionGetFunctionApiAuthenticatorFunction struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteFunctionGetFunctionApiAuthenticatorFunction.Typename, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionApiAuthenticatorFunction) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteFunctionGetFunctionApiAuthenticatorFunction.Delete, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionApiAuthenticatorFunction) GetDelete() bool { return v.Delete }

// DeleteFunctionGetFunctionBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type DeleteFunctionGetFunctionBitmapperFunction struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteFunctionGetFunctionBitmapperFunction.Typename, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionBitmapperFunction) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteFunctionGetFunctionBitmapperFunction.Delete, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionBitmapperFunction) GetDelete() bool { return v.Delete }

// DeleteFunctionGetFunctionProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type DeleteFunctionGetFunctionProcessorFunction struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteFunctionGetFunctionProcessorFunction.Typename, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionProcessorFunction) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteFunctionGetFunctionProcessorFunction.Delete, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionProcessorFunction) GetDelete() bool { return v.Delete }

// DeleteFunctionResponse is returned by DeleteFunction on success.
type DeleteFunctionResponse struct {
	GetFunction *DeleteFunctionGetFunction `json:"-"`
}

// GetGetFunction returns DeleteFunctionResponse.GetFunction, and is useful for accessing the field via an interface.
func (v *DeleteFunctionResponse) GetGetFunction() *DeleteFunctionGetFunction { return v.GetFunction }

func (v *DeleteFunctionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteFunctionResponse
		GetFunction json.RawMessage `json:"GetFunction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteFunctionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetFunction
		src := firstPass.GetFunction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DeleteFunctionGetFunction)
			err = __unmarshalDeleteFunctionGetFunction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal DeleteFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteFunctionResponse struct {
	GetFunction json.RawMessage `json:"GetFunction"`
}

func (v *DeleteFunctionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteFunctionResponse) __premarshalJSON() (*__premarshalDeleteFunctionResponse, error) {
	var retval __premarshalDeleteFunctionResponse

	{

		dst := &retval.GetFunction
		src := v.GetFunction
		if src != nil {
			var err error
			*dst, err = __marshalDeleteFunctionGetFunction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal DeleteFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return &retval, nil
}

// DeleteMessageTypeGetMessageType includes the requested fields of the GraphQL type MessageType.
type DeleteMessageTypeGetMessageType struct {
	Delete bool `json:"Delete"`
}

// GetDelete returns DeleteMessageTypeGetMessageType.Delete, and is useful for accessing the field via an interface.
func (v *DeleteMessageTypeGetMessageType) GetDelete() bool { return v.Delete }

// DeleteMessageTypeResponse is returned by DeleteMessageType on success.
type DeleteMessageTypeResponse struct {
	GetMessageType *DeleteMessageTypeGetMessageType `json:"GetMessageType"`
}

// GetGetMessageType returns DeleteMessageTypeResponse.GetMessageType, and is useful for accessing the field via an interface.
func (v *DeleteMessageTypeResponse) GetGetMessageType() *DeleteMessageTypeGetMessageType {
	return v.GetMessageType
}

// ReadFunctionGetFunction includes the requested fields of the GraphQL interface Function.
//
// ReadFunctionGetFunction is implemented by the following types:
// ReadFunctionGetFunctionApiAuthenticatorFunction
// ReadFunctionGetFunctionBitmapperFunction
// ReadFunctionGetFunctionProcessorFunction
type ReadFunctionGetFunction interface {
	implementsGraphQLInterfaceReadFunctionGetFunction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetCode returns the interface-field "code" from its implementation.
	GetCode() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetInUse returns the interface-field "inUse" from its implementation.
	GetInUse() bool
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
	// GetReadme returns the interface-field "readme" from its implementation.
	GetReadme() *string
	// GetRequirements returns the interface-field "requirements" from its implementation.
	GetRequirements() []string
	// GetSystem returns the interface-field "system" from its implementation.
	GetSystem() *bool
}

func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) implementsGraphQLInterfaceReadFunctionGetFunction() {
}
func (v *ReadFunctionGetFunctionBitmapperFunction) implementsGraphQLInterfaceReadFunctionGetFunction() {
}
func (v *ReadFunctionGetFunctionProcessorFunction) implementsGraphQLInterfaceReadFunctionGetFunction() {
}

func __unmarshalReadFunctionGetFunction(b []byte, v *ReadFunctionGetFunction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAuthenticatorFunction":
		*v = new(ReadFunctionGetFunctionApiAuthenticatorFunction)
		return json.Unmarshal(b, *v)
	case "BitmapperFunction":
		*v = new(ReadFunctionGetFunctionBitmapperFunction)
		return json.Unmarshal(b, *v)
	case "ProcessorFunction":
		*v = new(ReadFunctionGetFunctionProcessorFunction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Function.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReadFunctionGetFunction: "%v"`, tn.TypeName)
	}
}

func __marshalReadFunctionGetFunction(v *ReadFunctionGetFunction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReadFunctionGetFunctionApiAuthenticatorFunction:
		typename = "ApiAuthenticatorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadFunctionGetFunctionApiAuthenticatorFunction
		}{typename, v}
		return json.Marshal(result)
	case *ReadFunctionGetFunctionBitmapperFunction:
		typename = "BitmapperFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadFunctionGetFunctionBitmapperFunction
		}{typename, v}
		return json.Marshal(result)
	case *ReadFunctionGetFunctionProcessorFunction:
		typename = "ProcessorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadFunctionGetFunctionProcessorFunction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReadFunctionGetFunction: "%T"`, v)
	}
}

// ReadFunctionGetFunctionApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type ReadFunctionGetFunctionApiAuthenticatorFunction struct {
	Typename     *string  `json:"__typename"`
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	InUse        bool     `json:"inUse"`
	Name         string   `json:"name"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
	System       *bool    `json:"system"`
}

// GetTypename returns ReadFunctionGetFunctionApiAuthenticatorFunction.Typename, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetTypename() *string { return v.Typename }

// GetCode returns ReadFunctionGetFunctionApiAuthenticatorFunction.Code, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetCode() string { return v.Code }

// GetDescription returns ReadFunctionGetFunctionApiAuthenticatorFunction.Description, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetDescription() string {
	return v.Description
}

// GetInUse returns ReadFunctionGetFunctionApiAuthenticatorFunction.InUse, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetInUse() bool { return v.InUse }

// GetName returns ReadFunctionGetFunctionApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetName() string { return v.Name }

// GetReadme returns ReadFunctionGetFunctionApiAuthenticatorFunction.Readme, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns ReadFunctionGetFunctionApiAuthenticatorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetRequirements() []string {
	return v.Requirements
}

// GetSystem returns ReadFunctionGetFunctionApiAuthenticatorFunction.System, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetSystem() *bool { return v.System }

// ReadFunctionGetFunctionBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type ReadFunctionGetFunctionBitmapperFunction struct {
	Typename            *string                                                     `json:"__typename"`
	Code                string                                                      `json:"code"`
	Description         string                                                      `json:"description"`
	InUse               bool                                                        `json:"inUse"`
	Name                string                                                      `json:"name"`
	Readme              *string                                                     `json:"readme"`
	Requirements        []string                                                    `json:"requirements"`
	System              *bool                                                       `json:"system"`
	ArgumentMessageType ReadFunctionGetFunctionBitmapperFunctionArgumentMessageType `json:"argumentMessageType"`
}

// GetTypename returns ReadFunctionGetFunctionBitmapperFunction.Typename, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetTypename() *string { return v.Typename }

// GetCode returns ReadFunctionGetFunctionBitmapperFunction.Code, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetCode() string { return v.Code }

// GetDescription returns ReadFunctionGetFunctionBitmapperFunction.Description, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetDescription() string { return v.Description }

// GetInUse returns ReadFunctionGetFunctionBitmapperFunction.InUse, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetInUse() bool { return v.InUse }

// GetName returns ReadFunctionGetFunctionBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetName() string { return v.Name }

// GetReadme returns ReadFunctionGetFunctionBitmapperFunction.Readme, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns ReadFunctionGetFunctionBitmapperFunction.Requirements, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetRequirements() []string { return v.Requirements }

// GetSystem returns ReadFunctionGetFunctionBitmapperFunction.System, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetSystem() *bool { return v.System }

// GetArgumentMessageType returns ReadFunctionGetFunctionBitmapperFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetArgumentMessageType() ReadFunctionGetFunctionBitmapperFunctionArgumentMessageType {
	return v.ArgumentMessageType
}

// ReadFunctionGetFunctionBitmapperFunctionArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type ReadFunctionGetFunctionBitmapperFunctionArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadFunctionGetFunctionBitmapperFunctionArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunctionArgumentMessageType) GetName() string { return v.Name }

// ReadFunctionGetFunctionProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type ReadFunctionGetFunctionProcessorFunction struct {
	Typename            *string                                                     `json:"__typename"`
	Code                string                                                      `json:"code"`
	Description         string                                                      `json:"description"`
	InUse               bool                                                        `json:"inUse"`
	Name                string                                                      `json:"name"`
	Readme              *string                                                     `json:"readme"`
	Requirements        []string                                                    `json:"requirements"`
	System              *bool                                                       `json:"system"`
	ArgumentMessageType ReadFunctionGetFunctionProcessorFunctionArgumentMessageType `json:"argumentMessageType"`
	ReturnMessageType   *ReadFunctionGetFunctionProcessorFunctionReturnMessageType  `json:"returnMessageType"`
}

// GetTypename returns ReadFunctionGetFunctionProcessorFunction.Typename, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetTypename() *string { return v.Typename }

// GetCode returns ReadFunctionGetFunctionProcessorFunction.Code, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetCode() string { return v.Code }

// GetDescription returns ReadFunctionGetFunctionProcessorFunction.Description, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetDescription() string { return v.Description }

// GetInUse returns ReadFunctionGetFunctionProcessorFunction.InUse, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetInUse() bool { return v.InUse }

// GetName returns ReadFunctionGetFunctionProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetName() string { return v.Name }

// GetReadme returns ReadFunctionGetFunctionProcessorFunction.Readme, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns ReadFunctionGetFunctionProcessorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetRequirements() []string { return v.Requirements }

// GetSystem returns ReadFunctionGetFunctionProcessorFunction.System, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetSystem() *bool { return v.System }

// GetArgumentMessageType returns ReadFunctionGetFunctionProcessorFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetArgumentMessageType() ReadFunctionGetFunctionProcessorFunctionArgumentMessageType {
	return v.ArgumentMessageType
}

// GetReturnMessageType returns ReadFunctionGetFunctionProcessorFunction.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetReturnMessageType() *ReadFunctionGetFunctionProcessorFunctionReturnMessageType {
	return v.ReturnMessageType
}

// ReadFunctionGetFunctionProcessorFunctionArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type ReadFunctionGetFunctionProcessorFunctionArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadFunctionGetFunctionProcessorFunctionArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunctionArgumentMessageType) GetName() string { return v.Name }

// ReadFunctionGetFunctionProcessorFunctionReturnMessageType includes the requested fields of the GraphQL type MessageType.
type ReadFunctionGetFunctionProcessorFunctionReturnMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadFunctionGetFunctionProcessorFunctionReturnMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunctionReturnMessageType) GetName() string { return v.Name }

// ReadFunctionResponse is returned by ReadFunction on success.
type ReadFunctionResponse struct {
	GetFunction *ReadFunctionGetFunction `json:"-"`
}

// GetGetFunction returns ReadFunctionResponse.GetFunction, and is useful for accessing the field via an interface.
func (v *ReadFunctionResponse) GetGetFunction() *ReadFunctionGetFunction { return v.GetFunction }

func (v *ReadFunctionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadFunctionResponse
		GetFunction json.RawMessage `json:"GetFunction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadFunctionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetFunction
		src := firstPass.GetFunction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ReadFunctionGetFunction)
			err = __unmarshalReadFunctionGetFunction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ReadFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReadFunctionResponse struct {
	GetFunction json.RawMessage `json:"GetFunction"`
}

func (v *ReadFunctionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadFunctionResponse) __premarshalJSON() (*__premarshalReadFunctionResponse, error) {
	var retval __premarshalReadFunctionResponse

	{

		dst := &retval.GetFunction
		src := v.GetFunction
		if src != nil {
			var err error
			*dst, err = __marshalReadFunctionGetFunction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReadFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return &retval, nil
}

// ReadMessageTypeGetMessageType includes the requested fields of the GraphQL type MessageType.
type ReadMessageTypeGetMessageType struct {
	Auditor           string   `json:"auditor"`
	BitmapperTemplate string   `json:"bitmapperTemplate"`
	Description       string   `json:"description"`
	InUse             bool     `json:"inUse"`
	Name              string   `json:"name"`
	ProcessorTemplate string   `json:"processorTemplate"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
	SampleMessage     string   `json:"sampleMessage"`
	System            *bool    `json:"system"`
}

// GetAuditor returns ReadMessageTypeGetMessageType.Auditor, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetAuditor() string { return v.Auditor }

// GetBitmapperTemplate returns ReadMessageTypeGetMessageType.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetBitmapperTemplate() string { return v.BitmapperTemplate }

// GetDescription returns ReadMessageTypeGetMessageType.Description, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetDescription() string { return v.Description }

// GetInUse returns ReadMessageTypeGetMessageType.InUse, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetInUse() bool { return v.InUse }

// GetName returns ReadMessageTypeGetMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetName() string { return v.Name }

// GetProcessorTemplate returns ReadMessageTypeGetMessageType.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetProcessorTemplate() string { return v.ProcessorTemplate }

// GetReadme returns ReadMessageTypeGetMessageType.Readme, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetReadme() *string { return v.Readme }

// GetRequirements returns ReadMessageTypeGetMessageType.Requirements, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetRequirements() []string { return v.Requirements }

// GetSampleMessage returns ReadMessageTypeGetMessageType.SampleMessage, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetSampleMessage() string { return v.SampleMessage }

// GetSystem returns ReadMessageTypeGetMessageType.System, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetSystem() *bool { return v.System }

// ReadMessageTypeResponse is returned by ReadMessageType on success.
type ReadMessageTypeResponse struct {
	GetMessageType *ReadMessageTypeGetMessageType `json:"GetMessageType"`
}

// GetGetMessageType returns ReadMessageTypeResponse.GetMessageType, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeResponse) GetGetMessageType() *ReadMessageTypeGetMessageType {
	return v.GetMessageType
}

// ReadNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// ReadNodeGetNode is implemented by the following types:
// ReadNodeGetNodeAlertEmitterNode
// ReadNodeGetNodeAppChangeReceiverNode
// ReadNodeGetNodeAppChangeRouterNode
// ReadNodeGetNodeAuditEmitterNode
// ReadNodeGetNodeBitmapRouterNode
// ReadNodeGetNodeChangeEmitterNode
// ReadNodeGetNodeCrossTenantReceivingNode
// ReadNodeGetNodeCrossTenantSendingNode
// ReadNodeGetNodeDeadLetterEmitterNode
// ReadNodeGetNodeExternalNode
// ReadNodeGetNodeFilesDotComWebhookNode
// ReadNodeGetNodeLoadBalancerNode
// ReadNodeGetNodeLogEmitterNode
// ReadNodeGetNodeManagedNode
// ReadNodeGetNodeProcessorNode
// ReadNodeGetNodeTimerNode
// ReadNodeGetNodeWebhookNode
type ReadNodeGetNode interface {
	implementsGraphQLInterfaceReadNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() *string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
}

func (v *ReadNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceReadNodeGetNode()    {}
func (v *ReadNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceReadNodeGetNode()      {}
func (v *ReadNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()        {}
func (v *ReadNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceReadNodeGetNode() {}
func (v *ReadNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceReadNodeGetNode()   {}
func (v *ReadNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()    {}
func (v *ReadNodeGetNodeExternalNode) implementsGraphQLInterfaceReadNodeGetNode()             {}
func (v *ReadNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceReadNodeGetNode()   {}
func (v *ReadNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()           {}
func (v *ReadNodeGetNodeManagedNode) implementsGraphQLInterfaceReadNodeGetNode()              {}
func (v *ReadNodeGetNodeProcessorNode) implementsGraphQLInterfaceReadNodeGetNode()            {}
func (v *ReadNodeGetNodeTimerNode) implementsGraphQLInterfaceReadNodeGetNode()                {}
func (v *ReadNodeGetNodeWebhookNode) implementsGraphQLInterfaceReadNodeGetNode()              {}

func __unmarshalReadNodeGetNode(b []byte, v *ReadNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(ReadNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(ReadNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(ReadNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(ReadNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(ReadNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(ReadNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(ReadNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(ReadNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(ReadNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(ReadNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(ReadNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(ReadNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(ReadNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(ReadNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(ReadNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(ReadNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(ReadNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReadNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalReadNodeGetNode(v *ReadNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReadNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *ReadNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReadNodeGetNode: "%T"`, v)
	}
}

// ReadNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type ReadNodeGetNodeAlertEmitterNode struct {
	Typename        *string                                         `json:"__typename"`
	Description     *string                                         `json:"description"`
	Name            string                                          `json:"name"`
	SendMessageType *ReadNodeGetNodeAlertEmitterNodeSendMessageType `json:"sendMessageType"`
}

// GetTypename returns ReadNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAlertEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeAlertEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetName() string { return v.Name }

// GetSendMessageType returns ReadNodeGetNodeAlertEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetSendMessageType() *ReadNodeGetNodeAlertEmitterNodeSendMessageType {
	return v.SendMessageType
}

// ReadNodeGetNodeAlertEmitterNodeSendMessageType includes the requested fields of the GraphQL type MessageType.
type ReadNodeGetNodeAlertEmitterNodeSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadNodeGetNodeAlertEmitterNodeSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNodeSendMessageType) GetName() string { return v.Name }

// ReadNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type ReadNodeGetNodeAppChangeReceiverNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAppChangeReceiverNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeAppChangeReceiverNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetName() string { return v.Name }

// ReadNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type ReadNodeGetNodeAppChangeRouterNode struct {
	Typename           *string                                               `json:"__typename"`
	Description        *string                                               `json:"description"`
	Name               string                                                `json:"name"`
	ReceiveMessageType *ReadNodeGetNodeAppChangeRouterNodeReceiveMessageType `json:"receiveMessageType"`
	SendMessageType    *ReadNodeGetNodeAppChangeRouterNodeSendMessageType    `json:"sendMessageType"`
}

// GetTypename returns ReadNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAppChangeRouterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeAppChangeRouterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetName() string { return v.Name }

// GetReceiveMessageType returns ReadNodeGetNodeAppChangeRouterNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetReceiveMessageType() *ReadNodeGetNodeAppChangeRouterNodeReceiveMessageType {
	return v.ReceiveMessageType
}

// GetSendMessageType returns ReadNodeGetNodeAppChangeRouterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetSendMessageType() *ReadNodeGetNodeAppChangeRouterNodeSendMessageType {
	return v.SendMessageType
}

// ReadNodeGetNodeAppChangeRouterNodeReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type ReadNodeGetNodeAppChangeRouterNodeReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadNodeGetNodeAppChangeRouterNodeReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNodeReceiveMessageType) GetName() string { return v.Name }

// ReadNodeGetNodeAppChangeRouterNodeSendMessageType includes the requested fields of the GraphQL type MessageType.
type ReadNodeGetNodeAppChangeRouterNodeSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadNodeGetNodeAppChangeRouterNodeSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNodeSendMessageType) GetName() string { return v.Name }

// ReadNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type ReadNodeGetNodeAuditEmitterNode struct {
	Typename        *string                                         `json:"__typename"`
	Description     *string                                         `json:"description"`
	Name            string                                          `json:"name"`
	SendMessageType *ReadNodeGetNodeAuditEmitterNodeSendMessageType `json:"sendMessageType"`
}

// GetTypename returns ReadNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAuditEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeAuditEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetName() string { return v.Name }

// GetSendMessageType returns ReadNodeGetNodeAuditEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetSendMessageType() *ReadNodeGetNodeAuditEmitterNodeSendMessageType {
	return v.SendMessageType
}

// ReadNodeGetNodeAuditEmitterNodeSendMessageType includes the requested fields of the GraphQL type MessageType.
type ReadNodeGetNodeAuditEmitterNodeSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadNodeGetNodeAuditEmitterNodeSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNodeSendMessageType) GetName() string { return v.Name }

// ReadNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type ReadNodeGetNodeBitmapRouterNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeBitmapRouterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeBitmapRouterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetName() string { return v.Name }

// ReadNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type ReadNodeGetNodeChangeEmitterNode struct {
	Typename        *string                                          `json:"__typename"`
	Description     *string                                          `json:"description"`
	Name            string                                           `json:"name"`
	SendMessageType *ReadNodeGetNodeChangeEmitterNodeSendMessageType `json:"sendMessageType"`
}

// GetTypename returns ReadNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeChangeEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeChangeEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetName() string { return v.Name }

// GetSendMessageType returns ReadNodeGetNodeChangeEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetSendMessageType() *ReadNodeGetNodeChangeEmitterNodeSendMessageType {
	return v.SendMessageType
}

// ReadNodeGetNodeChangeEmitterNodeSendMessageType includes the requested fields of the GraphQL type MessageType.
type ReadNodeGetNodeChangeEmitterNodeSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns ReadNodeGetNodeChangeEmitterNodeSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNodeSendMessageType) GetName() string { return v.Name }

// ReadNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type ReadNodeGetNodeCrossTenantReceivingNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeCrossTenantReceivingNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeCrossTenantReceivingNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetName() string { return v.Name }

// ReadNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type ReadNodeGetNodeCrossTenantSendingNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeCrossTenantSendingNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeCrossTenantSendingNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetName() string { return v.Name }

// ReadNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type ReadNodeGetNodeDeadLetterEmitterNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeDeadLetterEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeDeadLetterEmitterNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeDeadLetterEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeDeadLetterEmitterNode) GetName() string { return v.Name }

// ReadNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type ReadNodeGetNodeExternalNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeExternalNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeExternalNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetName() string { return v.Name }

// ReadNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type ReadNodeGetNodeFilesDotComWebhookNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeFilesDotComWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeFilesDotComWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetName() string { return v.Name }

// ReadNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type ReadNodeGetNodeLoadBalancerNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeLoadBalancerNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeLoadBalancerNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetName() string { return v.Name }

// ReadNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type ReadNodeGetNodeLogEmitterNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeLogEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLogEmitterNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeLogEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLogEmitterNode) GetName() string { return v.Name }

// ReadNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type ReadNodeGetNodeManagedNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeManagedNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeManagedNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetName() string { return v.Name }

// ReadNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type ReadNodeGetNodeProcessorNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeProcessorNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeProcessorNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetName() string { return v.Name }

// ReadNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type ReadNodeGetNodeTimerNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeTimerNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeTimerNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetName() string { return v.Name }

// ReadNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type ReadNodeGetNodeWebhookNode struct {
	Typename    *string `json:"__typename"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetTypename returns ReadNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetDescription() *string { return v.Description }

// GetName returns ReadNodeGetNodeWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetName() string { return v.Name }

// ReadNodeResponse is returned by ReadNode on success.
type ReadNodeResponse struct {
	GetNode *ReadNodeGetNode `json:"-"`
}

// GetGetNode returns ReadNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *ReadNodeResponse) GetGetNode() *ReadNodeGetNode { return v.GetNode }

func (v *ReadNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ReadNodeGetNode)
			err = __unmarshalReadNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ReadNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReadNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *ReadNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeResponse) __premarshalJSON() (*__premarshalReadNodeResponse, error) {
	var retval __premarshalReadNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalReadNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReadNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// ReadTenantGetTenant includes the requested fields of the GraphQL type Tenant.
type ReadTenantGetTenant struct {
	Active      bool    `json:"active"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
	Region      string  `json:"region"`
	Table       string  `json:"table"`
}

// GetActive returns ReadTenantGetTenant.Active, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetActive() bool { return v.Active }

// GetConfig returns ReadTenantGetTenant.Config, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetConfig() *string { return v.Config }

// GetDescription returns ReadTenantGetTenant.Description, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetDescription() *string { return v.Description }

// GetName returns ReadTenantGetTenant.Name, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetName() string { return v.Name }

// GetRegion returns ReadTenantGetTenant.Region, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetRegion() string { return v.Region }

// GetTable returns ReadTenantGetTenant.Table, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetTable() string { return v.Table }

// ReadTenantResponse is returned by ReadTenant on success.
type ReadTenantResponse struct {
	GetTenant *ReadTenantGetTenant `json:"GetTenant"`
}

// GetGetTenant returns ReadTenantResponse.GetTenant, and is useful for accessing the field via an interface.
func (v *ReadTenantResponse) GetGetTenant() *ReadTenantGetTenant { return v.GetTenant }

// UpdateFunctionGetFunction includes the requested fields of the GraphQL interface Function.
//
// UpdateFunctionGetFunction is implemented by the following types:
// UpdateFunctionGetFunctionApiAuthenticatorFunction
// UpdateFunctionGetFunctionBitmapperFunction
// UpdateFunctionGetFunctionProcessorFunction
type UpdateFunctionGetFunction interface {
	implementsGraphQLInterfaceUpdateFunctionGetFunction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateFunctionGetFunctionApiAuthenticatorFunction) implementsGraphQLInterfaceUpdateFunctionGetFunction() {
}
func (v *UpdateFunctionGetFunctionBitmapperFunction) implementsGraphQLInterfaceUpdateFunctionGetFunction() {
}
func (v *UpdateFunctionGetFunctionProcessorFunction) implementsGraphQLInterfaceUpdateFunctionGetFunction() {
}

func __unmarshalUpdateFunctionGetFunction(b []byte, v *UpdateFunctionGetFunction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAuthenticatorFunction":
		*v = new(UpdateFunctionGetFunctionApiAuthenticatorFunction)
		return json.Unmarshal(b, *v)
	case "BitmapperFunction":
		*v = new(UpdateFunctionGetFunctionBitmapperFunction)
		return json.Unmarshal(b, *v)
	case "ProcessorFunction":
		*v = new(UpdateFunctionGetFunctionProcessorFunction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Function.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateFunctionGetFunction: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateFunctionGetFunction(v *UpdateFunctionGetFunction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateFunctionGetFunctionApiAuthenticatorFunction:
		typename = "ApiAuthenticatorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFunctionGetFunctionApiAuthenticatorFunction
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFunctionGetFunctionBitmapperFunction:
		typename = "BitmapperFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFunctionGetFunctionBitmapperFunction
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFunctionGetFunctionProcessorFunction:
		typename = "ProcessorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFunctionGetFunctionProcessorFunction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateFunctionGetFunction: "%T"`, v)
	}
}

// UpdateFunctionGetFunctionApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type UpdateFunctionGetFunctionApiAuthenticatorFunction struct {
	Typename *string                                                                         `json:"__typename"`
	Update   UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction `json:"Update"`
}

// GetTypename returns UpdateFunctionGetFunctionApiAuthenticatorFunction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunction) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateFunctionGetFunctionApiAuthenticatorFunction.Update, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunction) GetUpdate() UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction {
	return v.Update
}

// UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction struct {
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	InUse        bool     `json:"inUse"`
	Name         string   `json:"name"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
	System       *bool    `json:"system"`
}

// GetCode returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Code, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetCode() string {
	return v.Code
}

// GetDescription returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Description, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetDescription() string {
	return v.Description
}

// GetInUse returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.InUse, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetInUse() bool {
	return v.InUse
}

// GetName returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetName() string {
	return v.Name
}

// GetReadme returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Readme, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetReadme() *string {
	return v.Readme
}

// GetRequirements returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetRequirements() []string {
	return v.Requirements
}

// GetSystem returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.System, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetSystem() *bool {
	return v.System
}

// UpdateFunctionGetFunctionBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type UpdateFunctionGetFunctionBitmapperFunction struct {
	Typename *string                                                           `json:"__typename"`
	Update   UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction `json:"Update"`
}

// GetTypename returns UpdateFunctionGetFunctionBitmapperFunction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunction) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateFunctionGetFunctionBitmapperFunction.Update, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunction) GetUpdate() UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction {
	return v.Update
}

// UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction struct {
	ArgumentMessageType UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunctionArgumentMessageType `json:"argumentMessageType"`
	Code                string                                                                               `json:"code"`
	Description         string                                                                               `json:"description"`
	InUse               bool                                                                                 `json:"inUse"`
	Name                string                                                                               `json:"name"`
	Readme              *string                                                                              `json:"readme"`
	Requirements        []string                                                                             `json:"requirements"`
	System              *bool                                                                                `json:"system"`
}

// GetArgumentMessageType returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetArgumentMessageType() UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunctionArgumentMessageType {
	return v.ArgumentMessageType
}

// GetCode returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Code, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetCode() string {
	return v.Code
}

// GetDescription returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Description, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetDescription() string {
	return v.Description
}

// GetInUse returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.InUse, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetInUse() bool {
	return v.InUse
}

// GetName returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetName() string {
	return v.Name
}

// GetReadme returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Readme, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetReadme() *string {
	return v.Readme
}

// GetRequirements returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetRequirements() []string {
	return v.Requirements
}

// GetSystem returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.System, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetSystem() *bool {
	return v.System
}

// UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunctionArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunctionArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunctionArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunctionArgumentMessageType) GetName() string {
	return v.Name
}

// UpdateFunctionGetFunctionProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type UpdateFunctionGetFunctionProcessorFunction struct {
	Typename *string                                                           `json:"__typename"`
	Update   UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction `json:"Update"`
}

// GetTypename returns UpdateFunctionGetFunctionProcessorFunction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunction) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateFunctionGetFunctionProcessorFunction.Update, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunction) GetUpdate() UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction {
	return v.Update
}

// UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction struct {
	ArgumentMessageType UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionArgumentMessageType `json:"argumentMessageType"`
	Code                string                                                                               `json:"code"`
	Description         string                                                                               `json:"description"`
	InUse               bool                                                                                 `json:"inUse"`
	Name                string                                                                               `json:"name"`
	Readme              *string                                                                              `json:"readme"`
	Requirements        []string                                                                             `json:"requirements"`
	ReturnMessageType   *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionReturnMessageType  `json:"returnMessageType"`
	System              *bool                                                                                `json:"system"`
}

// GetArgumentMessageType returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetArgumentMessageType() UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionArgumentMessageType {
	return v.ArgumentMessageType
}

// GetCode returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Code, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetCode() string {
	return v.Code
}

// GetDescription returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Description, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetDescription() string {
	return v.Description
}

// GetInUse returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.InUse, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetInUse() bool {
	return v.InUse
}

// GetName returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetName() string {
	return v.Name
}

// GetReadme returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Readme, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetReadme() *string {
	return v.Readme
}

// GetRequirements returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetRequirements() []string {
	return v.Requirements
}

// GetReturnMessageType returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetReturnMessageType() *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionReturnMessageType {
	return v.ReturnMessageType
}

// GetSystem returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.System, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetSystem() *bool {
	return v.System
}

// UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionArgumentMessageType) GetName() string {
	return v.Name
}

// UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionReturnMessageType includes the requested fields of the GraphQL type MessageType.
type UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionReturnMessageType struct {
	Name string `json:"name"`
}

// GetName returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionReturnMessageType.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunctionReturnMessageType) GetName() string {
	return v.Name
}

// UpdateFunctionResponse is returned by UpdateFunction on success.
type UpdateFunctionResponse struct {
	GetFunction *UpdateFunctionGetFunction `json:"-"`
}

// GetGetFunction returns UpdateFunctionResponse.GetFunction, and is useful for accessing the field via an interface.
func (v *UpdateFunctionResponse) GetGetFunction() *UpdateFunctionGetFunction { return v.GetFunction }

func (v *UpdateFunctionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFunctionResponse
		GetFunction json.RawMessage `json:"GetFunction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFunctionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetFunction
		src := firstPass.GetFunction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateFunctionGetFunction)
			err = __unmarshalUpdateFunctionGetFunction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateFunctionResponse struct {
	GetFunction json.RawMessage `json:"GetFunction"`
}

func (v *UpdateFunctionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFunctionResponse) __premarshalJSON() (*__premarshalUpdateFunctionResponse, error) {
	var retval __premarshalUpdateFunctionResponse

	{

		dst := &retval.GetFunction
		src := v.GetFunction
		if src != nil {
			var err error
			*dst, err = __marshalUpdateFunctionGetFunction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateMessageTypeGetMessageType includes the requested fields of the GraphQL type MessageType.
type UpdateMessageTypeGetMessageType struct {
	Update UpdateMessageTypeGetMessageTypeUpdateMessageType `json:"Update"`
}

// GetUpdate returns UpdateMessageTypeGetMessageType.Update, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageType) GetUpdate() UpdateMessageTypeGetMessageTypeUpdateMessageType {
	return v.Update
}

// UpdateMessageTypeGetMessageTypeUpdateMessageType includes the requested fields of the GraphQL type MessageType.
type UpdateMessageTypeGetMessageTypeUpdateMessageType struct {
	Auditor           string   `json:"auditor"`
	BitmapperTemplate string   `json:"bitmapperTemplate"`
	Description       string   `json:"description"`
	InUse             bool     `json:"inUse"`
	Name              string   `json:"name"`
	ProcessorTemplate string   `json:"processorTemplate"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
	SampleMessage     string   `json:"sampleMessage"`
	System            *bool    `json:"system"`
}

// GetAuditor returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Auditor, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetAuditor() string { return v.Auditor }

// GetBitmapperTemplate returns UpdateMessageTypeGetMessageTypeUpdateMessageType.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetBitmapperTemplate() string {
	return v.BitmapperTemplate
}

// GetDescription returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Description, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetDescription() string {
	return v.Description
}

// GetInUse returns UpdateMessageTypeGetMessageTypeUpdateMessageType.InUse, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetInUse() bool { return v.InUse }

// GetName returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Name, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetName() string { return v.Name }

// GetProcessorTemplate returns UpdateMessageTypeGetMessageTypeUpdateMessageType.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetProcessorTemplate() string {
	return v.ProcessorTemplate
}

// GetReadme returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Readme, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetReadme() *string { return v.Readme }

// GetRequirements returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetRequirements() []string {
	return v.Requirements
}

// GetSampleMessage returns UpdateMessageTypeGetMessageTypeUpdateMessageType.SampleMessage, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetSampleMessage() string {
	return v.SampleMessage
}

// GetSystem returns UpdateMessageTypeGetMessageTypeUpdateMessageType.System, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetSystem() *bool { return v.System }

// UpdateMessageTypeResponse is returned by UpdateMessageType on success.
type UpdateMessageTypeResponse struct {
	GetMessageType *UpdateMessageTypeGetMessageType `json:"GetMessageType"`
}

// GetGetMessageType returns UpdateMessageTypeResponse.GetMessageType, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeResponse) GetGetMessageType() *UpdateMessageTypeGetMessageType {
	return v.GetMessageType
}

// UpdateTenantGetTenant includes the requested fields of the GraphQL type Tenant.
type UpdateTenantGetTenant struct {
	Update UpdateTenantGetTenantUpdateTenant `json:"Update"`
}

// GetUpdate returns UpdateTenantGetTenant.Update, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenant) GetUpdate() UpdateTenantGetTenantUpdateTenant { return v.Update }

// UpdateTenantGetTenantUpdateTenant includes the requested fields of the GraphQL type Tenant.
type UpdateTenantGetTenantUpdateTenant struct {
	Config      *string `json:"config"`
	Description *string `json:"description"`
}

// GetConfig returns UpdateTenantGetTenantUpdateTenant.Config, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetConfig() *string { return v.Config }

// GetDescription returns UpdateTenantGetTenantUpdateTenant.Description, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetDescription() *string { return v.Description }

// UpdateTenantResponse is returned by UpdateTenant on success.
type UpdateTenantResponse struct {
	GetTenant *UpdateTenantGetTenant `json:"GetTenant"`
}

// GetGetTenant returns UpdateTenantResponse.GetTenant, and is useful for accessing the field via an interface.
func (v *UpdateTenantResponse) GetGetTenant() *UpdateTenantGetTenant { return v.GetTenant }

// __CreateApiAuthenticatorFunctionInput is used internally by genqlient
type __CreateApiAuthenticatorFunctionInput struct {
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	Name         string   `json:"name"`
	Tenant       string   `json:"tenant"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
}

// GetCode returns __CreateApiAuthenticatorFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetCode() string { return v.Code }

// GetDescription returns __CreateApiAuthenticatorFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetDescription() string { return v.Description }

// GetName returns __CreateApiAuthenticatorFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetName() string { return v.Name }

// GetTenant returns __CreateApiAuthenticatorFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateApiAuthenticatorFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateApiAuthenticatorFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetRequirements() []string { return v.Requirements }

// __CreateBitmapperFunctionInput is used internally by genqlient
type __CreateBitmapperFunctionInput struct {
	ArgumentMessageType string   `json:"argumentMessageType"`
	Code                string   `json:"code"`
	Description         string   `json:"description"`
	Name                string   `json:"name"`
	Tenant              string   `json:"tenant"`
	Readme              *string  `json:"readme"`
	Requirements        []string `json:"requirements"`
}

// GetArgumentMessageType returns __CreateBitmapperFunctionInput.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetArgumentMessageType() string {
	return v.ArgumentMessageType
}

// GetCode returns __CreateBitmapperFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetCode() string { return v.Code }

// GetDescription returns __CreateBitmapperFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetDescription() string { return v.Description }

// GetName returns __CreateBitmapperFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetName() string { return v.Name }

// GetTenant returns __CreateBitmapperFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateBitmapperFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateBitmapperFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetRequirements() []string { return v.Requirements }

// __CreateMessageTypeInput is used internally by genqlient
type __CreateMessageTypeInput struct {
	Auditor           string   `json:"auditor"`
	BitmapperTemplate string   `json:"bitmapperTemplate"`
	Description       string   `json:"description"`
	Name              string   `json:"name"`
	ProcessorTemplate string   `json:"processorTemplate"`
	SampleMessage     string   `json:"sampleMessage"`
	Tenant            string   `json:"tenant"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
}

// GetAuditor returns __CreateMessageTypeInput.Auditor, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetAuditor() string { return v.Auditor }

// GetBitmapperTemplate returns __CreateMessageTypeInput.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetBitmapperTemplate() string { return v.BitmapperTemplate }

// GetDescription returns __CreateMessageTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetDescription() string { return v.Description }

// GetName returns __CreateMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetName() string { return v.Name }

// GetProcessorTemplate returns __CreateMessageTypeInput.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetProcessorTemplate() string { return v.ProcessorTemplate }

// GetSampleMessage returns __CreateMessageTypeInput.SampleMessage, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetSampleMessage() string { return v.SampleMessage }

// GetTenant returns __CreateMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateMessageTypeInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateMessageTypeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetRequirements() []string { return v.Requirements }

// __CreateProcessorFunctionInput is used internally by genqlient
type __CreateProcessorFunctionInput struct {
	ArgumentMessageType string   `json:"argumentMessageType"`
	Code                string   `json:"code"`
	Description         string   `json:"description"`
	Name                string   `json:"name"`
	Tenant              string   `json:"tenant"`
	Readme              *string  `json:"readme"`
	Requirements        []string `json:"requirements"`
	ReturnMessageType   *string  `json:"returnMessageType"`
}

// GetArgumentMessageType returns __CreateProcessorFunctionInput.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetArgumentMessageType() string {
	return v.ArgumentMessageType
}

// GetCode returns __CreateProcessorFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetCode() string { return v.Code }

// GetDescription returns __CreateProcessorFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetDescription() string { return v.Description }

// GetName returns __CreateProcessorFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetName() string { return v.Name }

// GetTenant returns __CreateProcessorFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateProcessorFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateProcessorFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetRequirements() []string { return v.Requirements }

// GetReturnMessageType returns __CreateProcessorFunctionInput.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetReturnMessageType() *string { return v.ReturnMessageType }

// __DeleteFunctionInput is used internally by genqlient
type __DeleteFunctionInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteFunctionInput) GetName() string { return v.Name }

// GetTenant returns __DeleteFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteFunctionInput) GetTenant() string { return v.Tenant }

// __DeleteMessageTypeInput is used internally by genqlient
type __DeleteMessageTypeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteMessageTypeInput) GetName() string { return v.Name }

// GetTenant returns __DeleteMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteMessageTypeInput) GetTenant() string { return v.Tenant }

// __ReadFunctionInput is used internally by genqlient
type __ReadFunctionInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadFunctionInput) GetName() string { return v.Name }

// GetTenant returns __ReadFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadFunctionInput) GetTenant() string { return v.Tenant }

// __ReadMessageTypeInput is used internally by genqlient
type __ReadMessageTypeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadMessageTypeInput) GetName() string { return v.Name }

// GetTenant returns __ReadMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadMessageTypeInput) GetTenant() string { return v.Tenant }

// __ReadNodeInput is used internally by genqlient
type __ReadNodeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadNodeInput) GetName() string { return v.Name }

// GetTenant returns __ReadNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadNodeInput) GetTenant() string { return v.Tenant }

// __ReadTenantInput is used internally by genqlient
type __ReadTenantInput struct {
	Tenant string `json:"tenant"`
}

// GetTenant returns __ReadTenantInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadTenantInput) GetTenant() string { return v.Tenant }

// __UpdateFunctionInput is used internally by genqlient
type __UpdateFunctionInput struct {
	Name         string   `json:"name"`
	Tenant       string   `json:"tenant"`
	Code         *string  `json:"code"`
	Description  *string  `json:"description"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
}

// GetName returns __UpdateFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetName() string { return v.Name }

// GetTenant returns __UpdateFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetTenant() string { return v.Tenant }

// GetCode returns __UpdateFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetCode() *string { return v.Code }

// GetDescription returns __UpdateFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetDescription() *string { return v.Description }

// GetReadme returns __UpdateFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __UpdateFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetRequirements() []string { return v.Requirements }

// __UpdateMessageTypeInput is used internally by genqlient
type __UpdateMessageTypeInput struct {
	Name              string   `json:"name"`
	Tenant            string   `json:"tenant"`
	Auditor           *string  `json:"auditor"`
	BitmapperTemplate *string  `json:"bitmapperTemplate"`
	Description       *string  `json:"description"`
	ProcessorTemplate *string  `json:"processorTemplate"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
	SampleMessage     *string  `json:"sampleMessage"`
}

// GetName returns __UpdateMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetTenant() string { return v.Tenant }

// GetAuditor returns __UpdateMessageTypeInput.Auditor, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetAuditor() *string { return v.Auditor }

// GetBitmapperTemplate returns __UpdateMessageTypeInput.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetBitmapperTemplate() *string { return v.BitmapperTemplate }

// GetDescription returns __UpdateMessageTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetDescription() *string { return v.Description }

// GetProcessorTemplate returns __UpdateMessageTypeInput.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetProcessorTemplate() *string { return v.ProcessorTemplate }

// GetReadme returns __UpdateMessageTypeInput.Readme, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __UpdateMessageTypeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetRequirements() []string { return v.Requirements }

// GetSampleMessage returns __UpdateMessageTypeInput.SampleMessage, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetSampleMessage() *string { return v.SampleMessage }

// __UpdateTenantInput is used internally by genqlient
type __UpdateTenantInput struct {
	Tenant      string  `json:"tenant"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
}

// GetTenant returns __UpdateTenantInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateTenantInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateTenantInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateTenantInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateTenantInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateTenantInput) GetDescription() *string { return v.Description }

func CreateApiAuthenticatorFunction(
	ctx context.Context,
	client graphql.Client,
	code string,
	description string,
	name string,
	tenant string,
	readme *string,
	requirements []string,
) (*CreateApiAuthenticatorFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "CreateApiAuthenticatorFunction",
		Query: `
mutation CreateApiAuthenticatorFunction ($code: String!, $description: String!, $name: String!, $tenant: String!, $readme: String, $requirements: [String!]) {
	CreateApiAuthenticatorFunction(code: $code, description: $description, name: $name, tenant: $tenant, readme: $readme, requirements: $requirements) {
		code
		description
		inUse
		name
		readme
		requirements
		system
	}
}
`,
		Variables: &__CreateApiAuthenticatorFunctionInput{
			Code:         code,
			Description:  description,
			Name:         name,
			Tenant:       tenant,
			Readme:       readme,
			Requirements: requirements,
		},
	}
	var err error

	var data CreateApiAuthenticatorFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateBitmapperFunction(
	ctx context.Context,
	client graphql.Client,
	argumentMessageType string,
	code string,
	description string,
	name string,
	tenant string,
	readme *string,
	requirements []string,
) (*CreateBitmapperFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "CreateBitmapperFunction",
		Query: `
mutation CreateBitmapperFunction ($argumentMessageType: String!, $code: String!, $description: String!, $name: String!, $tenant: String!, $readme: String, $requirements: [String!]) {
	CreateBitmapperFunction(argumentMessageType: $argumentMessageType, code: $code, description: $description, name: $name, tenant: $tenant, readme: $readme, requirements: $requirements) {
		argumentMessageType {
			name
		}
		code
		description
		inUse
		name
		readme
		requirements
		system
	}
}
`,
		Variables: &__CreateBitmapperFunctionInput{
			ArgumentMessageType: argumentMessageType,
			Code:                code,
			Description:         description,
			Name:                name,
			Tenant:              tenant,
			Readme:              readme,
			Requirements:        requirements,
		},
	}
	var err error

	var data CreateBitmapperFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateMessageType(
	ctx context.Context,
	client graphql.Client,
	auditor string,
	bitmapperTemplate string,
	description string,
	name string,
	processorTemplate string,
	sampleMessage string,
	tenant string,
	readme *string,
	requirements []string,
) (*CreateMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateMessageType",
		Query: `
mutation CreateMessageType ($auditor: String!, $bitmapperTemplate: String!, $description: String!, $name: String!, $processorTemplate: String!, $sampleMessage: String!, $tenant: String!, $readme: String, $requirements: [String!]) {
	CreateMessageType(auditor: $auditor, bitmapperTemplate: $bitmapperTemplate, description: $description, name: $name, processorTemplate: $processorTemplate, sampleMessage: $sampleMessage, tenant: $tenant, readme: $readme, requirements: $requirements) {
		auditor
		bitmapperTemplate
		description
		inUse
		name
		processorTemplate
		readme
		requirements
		sampleMessage
		system
	}
}
`,
		Variables: &__CreateMessageTypeInput{
			Auditor:           auditor,
			BitmapperTemplate: bitmapperTemplate,
			Description:       description,
			Name:              name,
			ProcessorTemplate: processorTemplate,
			SampleMessage:     sampleMessage,
			Tenant:            tenant,
			Readme:            readme,
			Requirements:      requirements,
		},
	}
	var err error

	var data CreateMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateProcessorFunction(
	ctx context.Context,
	client graphql.Client,
	argumentMessageType string,
	code string,
	description string,
	name string,
	tenant string,
	readme *string,
	requirements []string,
	returnMessageType *string,
) (*CreateProcessorFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "CreateProcessorFunction",
		Query: `
mutation CreateProcessorFunction ($argumentMessageType: String!, $code: String!, $description: String!, $name: String!, $tenant: String!, $readme: String, $requirements: [String!], $returnMessageType: String) {
	CreateProcessorFunction(argumentMessageType: $argumentMessageType, code: $code, description: $description, name: $name, tenant: $tenant, readme: $readme, requirements: $requirements, returnMessageType: $returnMessageType) {
		argumentMessageType {
			name
		}
		code
		description
		inUse
		name
		readme
		requirements
		returnMessageType {
			name
		}
		system
	}
}
`,
		Variables: &__CreateProcessorFunctionInput{
			ArgumentMessageType: argumentMessageType,
			Code:                code,
			Description:         description,
			Name:                name,
			Tenant:              tenant,
			Readme:              readme,
			Requirements:        requirements,
			ReturnMessageType:   returnMessageType,
		},
	}
	var err error

	var data CreateProcessorFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteFunction(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteFunction",
		Query: `
query DeleteFunction ($name: String!, $tenant: String!) {
	GetFunction(name: $name, tenant: $tenant) {
		__typename
		Delete
	}
}
`,
		Variables: &__DeleteFunctionInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteMessageType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteMessageType",
		Query: `
query DeleteMessageType ($name: String!, $tenant: String!) {
	GetMessageType(name: $name, tenant: $tenant) {
		Delete
	}
}
`,
		Variables: &__DeleteMessageTypeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadFunction(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "ReadFunction",
		Query: `
query ReadFunction ($name: String!, $tenant: String!) {
	GetFunction(name: $name, tenant: $tenant) {
		__typename
		code
		description
		inUse
		name
		readme
		requirements
		system
		... on BitmapperFunction {
			argumentMessageType {
				name
			}
		}
		... on ProcessorFunction {
			argumentMessageType {
				name
			}
			returnMessageType {
				name
			}
		}
	}
}
`,
		Variables: &__ReadFunctionInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadMessageType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "ReadMessageType",
		Query: `
query ReadMessageType ($name: String!, $tenant: String!) {
	GetMessageType(name: $name, tenant: $tenant) {
		auditor
		bitmapperTemplate
		description
		inUse
		name
		processorTemplate
		readme
		requirements
		sampleMessage
		system
	}
}
`,
		Variables: &__ReadMessageTypeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadNodeResponse, error) {
	req := &graphql.Request{
		OpName: "ReadNode",
		Query: `
query ReadNode ($name: String!, $tenant: String!) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		description
		name
		... on AlertEmitterNode {
			sendMessageType {
				name
			}
		}
		... on AppChangeRouterNode {
			receiveMessageType {
				name
			}
			sendMessageType {
				name
			}
		}
		... on AuditEmitterNode {
			sendMessageType {
				name
			}
		}
		... on ChangeEmitterNode {
			sendMessageType {
				name
			}
		}
	}
}
`,
		Variables: &__ReadNodeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadTenant(
	ctx context.Context,
	client graphql.Client,
	tenant string,
) (*ReadTenantResponse, error) {
	req := &graphql.Request{
		OpName: "ReadTenant",
		Query: `
query ReadTenant ($tenant: String!) {
	GetTenant(tenant: $tenant) {
		active
		config
		description
		name
		region
		table
	}
}
`,
		Variables: &__ReadTenantInput{
			Tenant: tenant,
		},
	}
	var err error

	var data ReadTenantResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateFunction(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	code *string,
	description *string,
	readme *string,
	requirements []string,
) (*UpdateFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateFunction",
		Query: `
query UpdateFunction ($name: String!, $tenant: String!, $code: String, $description: String, $readme: String, $requirements: [String!]) {
	GetFunction(name: $name, tenant: $tenant) {
		__typename
		... on ApiAuthenticatorFunction {
			Update(code: $code, description: $description, readme: $readme, requirements: $requirements) {
				code
				description
				inUse
				name
				readme
				requirements
				system
			}
		}
		... on BitmapperFunction {
			Update(code: $code, description: $description, readme: $readme, requirements: $requirements) {
				argumentMessageType {
					name
				}
				code
				description
				inUse
				name
				readme
				requirements
				system
			}
		}
		... on ProcessorFunction {
			Update(code: $code, description: $description, readme: $readme, requirements: $requirements) {
				argumentMessageType {
					name
				}
				code
				description
				inUse
				name
				readme
				requirements
				returnMessageType {
					name
				}
				system
			}
		}
	}
}
`,
		Variables: &__UpdateFunctionInput{
			Name:         name,
			Tenant:       tenant,
			Code:         code,
			Description:  description,
			Readme:       readme,
			Requirements: requirements,
		},
	}
	var err error

	var data UpdateFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateMessageType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	auditor *string,
	bitmapperTemplate *string,
	description *string,
	processorTemplate *string,
	readme *string,
	requirements []string,
	sampleMessage *string,
) (*UpdateMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateMessageType",
		Query: `
query UpdateMessageType ($name: String!, $tenant: String!, $auditor: String, $bitmapperTemplate: String, $description: String, $processorTemplate: String, $readme: String, $requirements: [String!], $sampleMessage: String) {
	GetMessageType(name: $name, tenant: $tenant) {
		Update(auditor: $auditor, bitmapperTemplate: $bitmapperTemplate, description: $description, processorTemplate: $processorTemplate, sampleMessage: $sampleMessage, readme: $readme, requirements: $requirements) {
			auditor
			bitmapperTemplate
			description
			inUse
			name
			processorTemplate
			readme
			requirements
			sampleMessage
			system
		}
	}
}
`,
		Variables: &__UpdateMessageTypeInput{
			Name:              name,
			Tenant:            tenant,
			Auditor:           auditor,
			BitmapperTemplate: bitmapperTemplate,
			Description:       description,
			ProcessorTemplate: processorTemplate,
			Readme:            readme,
			Requirements:      requirements,
			SampleMessage:     sampleMessage,
		},
	}
	var err error

	var data UpdateMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateTenant(
	ctx context.Context,
	client graphql.Client,
	tenant string,
	config *string,
	description *string,
) (*UpdateTenantResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateTenant",
		Query: `
query UpdateTenant ($tenant: String!, $config: AWSJSON, $description: String) {
	GetTenant(tenant: $tenant) {
		Update(config: $config, description: $description) {
			config
			description
		}
	}
}
`,
		Variables: &__UpdateTenantInput{
			Tenant:      tenant,
			Config:      config,
			Description: description,
		},
	}
	var err error

	var data UpdateTenantResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
