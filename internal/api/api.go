// Code generated by github.com/Khan/genqlient, DO NOT EDIT.

package api

import (
	"context"
	"encoding/json"
	"fmt"

	"github.com/Khan/genqlient/graphql"
)

// CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction struct {
	functionFieldsApiAuthenticatorFunction `json:"-"`
}

// GetCode returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Code, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetCode() string {
	return v.functionFieldsApiAuthenticatorFunction.Code
}

// GetDescription returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Description, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetDescription() string {
	return v.functionFieldsApiAuthenticatorFunction.Description
}

// GetInUse returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.InUse, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetInUse() bool {
	return v.functionFieldsApiAuthenticatorFunction.InUse
}

// GetName returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetName() string {
	return v.functionFieldsApiAuthenticatorFunction.Name
}

// GetReadme returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Readme, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetReadme() *string {
	return v.functionFieldsApiAuthenticatorFunction.Readme
}

// GetRequirements returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetRequirements() []string {
	return v.functionFieldsApiAuthenticatorFunction.Requirements
}

// GetSystem returns CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction.System, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) GetSystem() *bool {
	return v.functionFieldsApiAuthenticatorFunction.System
}

func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsApiAuthenticatorFunction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction struct {
	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`
}

func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction) __premarshalJSON() (*__premarshalCreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction, error) {
	var retval __premarshalCreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction

	retval.Code = v.functionFieldsApiAuthenticatorFunction.Code
	retval.Description = v.functionFieldsApiAuthenticatorFunction.Description
	retval.InUse = v.functionFieldsApiAuthenticatorFunction.InUse
	retval.Name = v.functionFieldsApiAuthenticatorFunction.Name
	retval.Readme = v.functionFieldsApiAuthenticatorFunction.Readme
	retval.Requirements = v.functionFieldsApiAuthenticatorFunction.Requirements
	retval.System = v.functionFieldsApiAuthenticatorFunction.System
	return &retval, nil
}

// CreateApiAuthenticatorFunctionResponse is returned by CreateApiAuthenticatorFunction on success.
type CreateApiAuthenticatorFunctionResponse struct {
	CreateApiAuthenticatorFunction CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction `json:"CreateApiAuthenticatorFunction"`
}

// GetCreateApiAuthenticatorFunction returns CreateApiAuthenticatorFunctionResponse.CreateApiAuthenticatorFunction, and is useful for accessing the field via an interface.
func (v *CreateApiAuthenticatorFunctionResponse) GetCreateApiAuthenticatorFunction() CreateApiAuthenticatorFunctionCreateApiAuthenticatorFunction {
	return v.CreateApiAuthenticatorFunction
}

// CreateBitmapRouterNodeCreateBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type CreateBitmapRouterNodeCreateBitmapRouterNode struct {
	nodeFieldsBitmapRouterNode `json:"-"`
	bitmapRouterNodeFields     `json:"-"`
}

// GetDescription returns CreateBitmapRouterNodeCreateBitmapRouterNode.Description, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetDescription() *string {
	return v.nodeFieldsBitmapRouterNode.Description
}

// GetName returns CreateBitmapRouterNodeCreateBitmapRouterNode.Name, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetName() string {
	return v.nodeFieldsBitmapRouterNode.Name
}

// GetInlineBitmapper returns CreateBitmapRouterNodeCreateBitmapRouterNode.InlineBitmapper, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetInlineBitmapper() *string {
	return v.bitmapRouterNodeFields.InlineBitmapper
}

// GetLoggingLevel returns CreateBitmapRouterNodeCreateBitmapRouterNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetLoggingLevel() *LogLevel {
	return v.bitmapRouterNodeFields.LoggingLevel
}

// GetManagedBitmapper returns CreateBitmapRouterNodeCreateBitmapRouterNode.ManagedBitmapper, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetManagedBitmapper() *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction {
	return v.bitmapRouterNodeFields.ManagedBitmapper
}

// GetReceiveMessageType returns CreateBitmapRouterNodeCreateBitmapRouterNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetReceiveMessageType() *bitmapRouterNodeFieldsReceiveMessageType {
	return v.bitmapRouterNodeFields.ReceiveMessageType
}

// GetRequirements returns CreateBitmapRouterNodeCreateBitmapRouterNode.Requirements, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetRequirements() []string {
	return v.bitmapRouterNodeFields.Requirements
}

// GetSendMessageType returns CreateBitmapRouterNodeCreateBitmapRouterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) GetSendMessageType() *bitmapRouterNodeFieldsSendMessageType {
	return v.bitmapRouterNodeFields.SendMessageType
}

func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateBitmapRouterNodeCreateBitmapRouterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateBitmapRouterNodeCreateBitmapRouterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsBitmapRouterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.bitmapRouterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateBitmapRouterNodeCreateBitmapRouterNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	InlineBitmapper *string `json:"inlineBitmapper"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedBitmapper *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction `json:"managedBitmapper"`

	ReceiveMessageType *bitmapRouterNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *bitmapRouterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateBitmapRouterNodeCreateBitmapRouterNode) __premarshalJSON() (*__premarshalCreateBitmapRouterNodeCreateBitmapRouterNode, error) {
	var retval __premarshalCreateBitmapRouterNodeCreateBitmapRouterNode

	retval.Description = v.nodeFieldsBitmapRouterNode.Description
	retval.Name = v.nodeFieldsBitmapRouterNode.Name
	retval.InlineBitmapper = v.bitmapRouterNodeFields.InlineBitmapper
	retval.LoggingLevel = v.bitmapRouterNodeFields.LoggingLevel
	retval.ManagedBitmapper = v.bitmapRouterNodeFields.ManagedBitmapper
	retval.ReceiveMessageType = v.bitmapRouterNodeFields.ReceiveMessageType
	retval.Requirements = v.bitmapRouterNodeFields.Requirements
	retval.SendMessageType = v.bitmapRouterNodeFields.SendMessageType
	return &retval, nil
}

// CreateBitmapRouterNodeResponse is returned by CreateBitmapRouterNode on success.
type CreateBitmapRouterNodeResponse struct {
	CreateBitmapRouterNode CreateBitmapRouterNodeCreateBitmapRouterNode `json:"CreateBitmapRouterNode"`
}

// GetCreateBitmapRouterNode returns CreateBitmapRouterNodeResponse.CreateBitmapRouterNode, and is useful for accessing the field via an interface.
func (v *CreateBitmapRouterNodeResponse) GetCreateBitmapRouterNode() CreateBitmapRouterNodeCreateBitmapRouterNode {
	return v.CreateBitmapRouterNode
}

// CreateBitmapperFunctionCreateBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type CreateBitmapperFunctionCreateBitmapperFunction struct {
	functionFieldsBitmapperFunction `json:"-"`
	bitmapperFunctionFields         `json:"-"`
}

// GetCode returns CreateBitmapperFunctionCreateBitmapperFunction.Code, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetCode() string {
	return v.functionFieldsBitmapperFunction.Code
}

// GetDescription returns CreateBitmapperFunctionCreateBitmapperFunction.Description, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetDescription() string {
	return v.functionFieldsBitmapperFunction.Description
}

// GetInUse returns CreateBitmapperFunctionCreateBitmapperFunction.InUse, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetInUse() bool {
	return v.functionFieldsBitmapperFunction.InUse
}

// GetName returns CreateBitmapperFunctionCreateBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetName() string {
	return v.functionFieldsBitmapperFunction.Name
}

// GetReadme returns CreateBitmapperFunctionCreateBitmapperFunction.Readme, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetReadme() *string {
	return v.functionFieldsBitmapperFunction.Readme
}

// GetRequirements returns CreateBitmapperFunctionCreateBitmapperFunction.Requirements, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetRequirements() []string {
	return v.functionFieldsBitmapperFunction.Requirements
}

// GetSystem returns CreateBitmapperFunctionCreateBitmapperFunction.System, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetSystem() *bool {
	return v.functionFieldsBitmapperFunction.System
}

// GetArgumentMessageType returns CreateBitmapperFunctionCreateBitmapperFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionCreateBitmapperFunction) GetArgumentMessageType() bitmapperFunctionFieldsArgumentMessageType {
	return v.bitmapperFunctionFields.ArgumentMessageType
}

func (v *CreateBitmapperFunctionCreateBitmapperFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateBitmapperFunctionCreateBitmapperFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateBitmapperFunctionCreateBitmapperFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsBitmapperFunction)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.bitmapperFunctionFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateBitmapperFunctionCreateBitmapperFunction struct {
	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`

	ArgumentMessageType bitmapperFunctionFieldsArgumentMessageType `json:"argumentMessageType"`
}

func (v *CreateBitmapperFunctionCreateBitmapperFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateBitmapperFunctionCreateBitmapperFunction) __premarshalJSON() (*__premarshalCreateBitmapperFunctionCreateBitmapperFunction, error) {
	var retval __premarshalCreateBitmapperFunctionCreateBitmapperFunction

	retval.Code = v.functionFieldsBitmapperFunction.Code
	retval.Description = v.functionFieldsBitmapperFunction.Description
	retval.InUse = v.functionFieldsBitmapperFunction.InUse
	retval.Name = v.functionFieldsBitmapperFunction.Name
	retval.Readme = v.functionFieldsBitmapperFunction.Readme
	retval.Requirements = v.functionFieldsBitmapperFunction.Requirements
	retval.System = v.functionFieldsBitmapperFunction.System
	retval.ArgumentMessageType = v.bitmapperFunctionFields.ArgumentMessageType
	return &retval, nil
}

// CreateBitmapperFunctionResponse is returned by CreateBitmapperFunction on success.
type CreateBitmapperFunctionResponse struct {
	CreateBitmapperFunction CreateBitmapperFunctionCreateBitmapperFunction `json:"CreateBitmapperFunction"`
}

// GetCreateBitmapperFunction returns CreateBitmapperFunctionResponse.CreateBitmapperFunction, and is useful for accessing the field via an interface.
func (v *CreateBitmapperFunctionResponse) GetCreateBitmapperFunction() CreateBitmapperFunctionCreateBitmapperFunction {
	return v.CreateBitmapperFunction
}

// CreateCrossAccountAppCreateCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type CreateCrossAccountAppCreateCrossAccountApp struct {
	appFieldsCrossAccountApp `json:"-"`
	crossAccountAppFields    `json:"-"`
}

// GetDescription returns CreateCrossAccountAppCreateCrossAccountApp.Description, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetDescription() *string {
	return v.appFieldsCrossAccountApp.Description
}

// GetName returns CreateCrossAccountAppCreateCrossAccountApp.Name, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetName() string {
	return v.appFieldsCrossAccountApp.Name
}

// GetAccount returns CreateCrossAccountAppCreateCrossAccountApp.Account, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetAccount() string {
	return v.crossAccountAppFields.Account
}

// GetAppsyncEndpoint returns CreateCrossAccountAppCreateCrossAccountApp.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetAppsyncEndpoint() string {
	return v.crossAccountAppFields.AppsyncEndpoint
}

// GetAuditRecordsEndpoint returns CreateCrossAccountAppCreateCrossAccountApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetAuditRecordsEndpoint() string {
	return v.crossAccountAppFields.AuditRecordsEndpoint
}

// GetConfig returns CreateCrossAccountAppCreateCrossAccountApp.Config, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetConfig() *string {
	return v.crossAccountAppFields.Config
}

// GetCredentials returns CreateCrossAccountAppCreateCrossAccountApp.Credentials, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetCredentials() crossAccountAppFieldsCredentialsCognitoCredentials {
	return v.crossAccountAppFields.Credentials
}

// GetIamPolicy returns CreateCrossAccountAppCreateCrossAccountApp.IamPolicy, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetIamPolicy() string {
	return v.crossAccountAppFields.IamPolicy
}

// GetTableAccess returns CreateCrossAccountAppCreateCrossAccountApp.TableAccess, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppCreateCrossAccountApp) GetTableAccess() bool {
	return v.crossAccountAppFields.TableAccess
}

func (v *CreateCrossAccountAppCreateCrossAccountApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCrossAccountAppCreateCrossAccountApp
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCrossAccountAppCreateCrossAccountApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossAccountApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossAccountAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCrossAccountAppCreateCrossAccountApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Account string `json:"account"`

	AppsyncEndpoint string `json:"appsyncEndpoint"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials crossAccountAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	IamPolicy string `json:"iamPolicy"`

	TableAccess bool `json:"tableAccess"`
}

func (v *CreateCrossAccountAppCreateCrossAccountApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCrossAccountAppCreateCrossAccountApp) __premarshalJSON() (*__premarshalCreateCrossAccountAppCreateCrossAccountApp, error) {
	var retval __premarshalCreateCrossAccountAppCreateCrossAccountApp

	retval.Description = v.appFieldsCrossAccountApp.Description
	retval.Name = v.appFieldsCrossAccountApp.Name
	retval.Account = v.crossAccountAppFields.Account
	retval.AppsyncEndpoint = v.crossAccountAppFields.AppsyncEndpoint
	retval.AuditRecordsEndpoint = v.crossAccountAppFields.AuditRecordsEndpoint
	retval.Config = v.crossAccountAppFields.Config
	retval.Credentials = v.crossAccountAppFields.Credentials
	retval.IamPolicy = v.crossAccountAppFields.IamPolicy
	retval.TableAccess = v.crossAccountAppFields.TableAccess
	return &retval, nil
}

// CreateCrossAccountAppResponse is returned by CreateCrossAccountApp on success.
type CreateCrossAccountAppResponse struct {
	CreateCrossAccountApp CreateCrossAccountAppCreateCrossAccountApp `json:"CreateCrossAccountApp"`
}

// GetCreateCrossAccountApp returns CreateCrossAccountAppResponse.CreateCrossAccountApp, and is useful for accessing the field via an interface.
func (v *CreateCrossAccountAppResponse) GetCreateCrossAccountApp() CreateCrossAccountAppCreateCrossAccountApp {
	return v.CreateCrossAccountApp
}

// CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp struct {
	appFieldsCrossTenantReceivingApp `json:"-"`
	crossTenantReceivingAppFields    `json:"-"`
}

// GetDescription returns CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp.Description, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp) GetDescription() *string {
	return v.appFieldsCrossTenantReceivingApp.Description
}

// GetName returns CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp.Name, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp) GetName() string {
	return v.appFieldsCrossTenantReceivingApp.Name
}

// GetSendingApp returns CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp.SendingApp, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp) GetSendingApp() *string {
	return v.crossTenantReceivingAppFields.SendingApp
}

// GetSendingTenant returns CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp.SendingTenant, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp) GetSendingTenant() string {
	return v.crossTenantReceivingAppFields.SendingTenant
}

func (v *CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossTenantReceivingApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantReceivingAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCrossTenantReceivingAppCreateCrossTenantReceivingApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	SendingApp *string `json:"sendingApp"`

	SendingTenant string `json:"sendingTenant"`
}

func (v *CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp) __premarshalJSON() (*__premarshalCreateCrossTenantReceivingAppCreateCrossTenantReceivingApp, error) {
	var retval __premarshalCreateCrossTenantReceivingAppCreateCrossTenantReceivingApp

	retval.Description = v.appFieldsCrossTenantReceivingApp.Description
	retval.Name = v.appFieldsCrossTenantReceivingApp.Name
	retval.SendingApp = v.crossTenantReceivingAppFields.SendingApp
	retval.SendingTenant = v.crossTenantReceivingAppFields.SendingTenant
	return &retval, nil
}

// CreateCrossTenantReceivingAppResponse is returned by CreateCrossTenantReceivingApp on success.
type CreateCrossTenantReceivingAppResponse struct {
	CreateCrossTenantReceivingApp CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp `json:"CreateCrossTenantReceivingApp"`
}

// GetCreateCrossTenantReceivingApp returns CreateCrossTenantReceivingAppResponse.CreateCrossTenantReceivingApp, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantReceivingAppResponse) GetCreateCrossTenantReceivingApp() CreateCrossTenantReceivingAppCreateCrossTenantReceivingApp {
	return v.CreateCrossTenantReceivingApp
}

// CreateCrossTenantSendingAppCreateCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type CreateCrossTenantSendingAppCreateCrossTenantSendingApp struct {
	appFieldsCrossTenantSendingApp `json:"-"`
	crossTenantSendingAppFields    `json:"-"`
}

// GetDescription returns CreateCrossTenantSendingAppCreateCrossTenantSendingApp.Description, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingAppCreateCrossTenantSendingApp) GetDescription() *string {
	return v.appFieldsCrossTenantSendingApp.Description
}

// GetName returns CreateCrossTenantSendingAppCreateCrossTenantSendingApp.Name, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingAppCreateCrossTenantSendingApp) GetName() string {
	return v.appFieldsCrossTenantSendingApp.Name
}

// GetReceivingApp returns CreateCrossTenantSendingAppCreateCrossTenantSendingApp.ReceivingApp, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingAppCreateCrossTenantSendingApp) GetReceivingApp() string {
	return v.crossTenantSendingAppFields.ReceivingApp
}

// GetReceivingTenant returns CreateCrossTenantSendingAppCreateCrossTenantSendingApp.ReceivingTenant, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingAppCreateCrossTenantSendingApp) GetReceivingTenant() string {
	return v.crossTenantSendingAppFields.ReceivingTenant
}

func (v *CreateCrossTenantSendingAppCreateCrossTenantSendingApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCrossTenantSendingAppCreateCrossTenantSendingApp
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCrossTenantSendingAppCreateCrossTenantSendingApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossTenantSendingApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantSendingAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCrossTenantSendingAppCreateCrossTenantSendingApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	ReceivingApp string `json:"receivingApp"`

	ReceivingTenant string `json:"receivingTenant"`
}

func (v *CreateCrossTenantSendingAppCreateCrossTenantSendingApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCrossTenantSendingAppCreateCrossTenantSendingApp) __premarshalJSON() (*__premarshalCreateCrossTenantSendingAppCreateCrossTenantSendingApp, error) {
	var retval __premarshalCreateCrossTenantSendingAppCreateCrossTenantSendingApp

	retval.Description = v.appFieldsCrossTenantSendingApp.Description
	retval.Name = v.appFieldsCrossTenantSendingApp.Name
	retval.ReceivingApp = v.crossTenantSendingAppFields.ReceivingApp
	retval.ReceivingTenant = v.crossTenantSendingAppFields.ReceivingTenant
	return &retval, nil
}

// CreateCrossTenantSendingAppResponse is returned by CreateCrossTenantSendingApp on success.
type CreateCrossTenantSendingAppResponse struct {
	CreateCrossTenantSendingApp CreateCrossTenantSendingAppCreateCrossTenantSendingApp `json:"CreateCrossTenantSendingApp"`
}

// GetCreateCrossTenantSendingApp returns CreateCrossTenantSendingAppResponse.CreateCrossTenantSendingApp, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingAppResponse) GetCreateCrossTenantSendingApp() CreateCrossTenantSendingAppCreateCrossTenantSendingApp {
	return v.CreateCrossTenantSendingApp
}

// CreateCrossTenantSendingNodeCreateCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type CreateCrossTenantSendingNodeCreateCrossTenantSendingNode struct {
	nodeFieldsCrossTenantSendingNode `json:"-"`
	crossTenantSendingNodeFields     `json:"-"`
}

// GetDescription returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.Description, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetDescription() *string {
	return v.nodeFieldsCrossTenantSendingNode.Description
}

// GetName returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.Name, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetName() string {
	return v.nodeFieldsCrossTenantSendingNode.Name
}

// GetApp returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.App, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetApp() crossTenantSendingNodeFieldsAppCrossTenantSendingApp {
	return v.crossTenantSendingNodeFields.App
}

// GetInlineProcessor returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.InlineProcessor, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetInlineProcessor() *string {
	return v.crossTenantSendingNodeFields.InlineProcessor
}

// GetLoggingLevel returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetLoggingLevel() *LogLevel {
	return v.crossTenantSendingNodeFields.LoggingLevel
}

// GetManagedProcessor returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetManagedProcessor() *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction {
	return v.crossTenantSendingNodeFields.ManagedProcessor
}

// GetReceiveMessageType returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetReceiveMessageType() *crossTenantSendingNodeFieldsReceiveMessageType {
	return v.crossTenantSendingNodeFields.ReceiveMessageType
}

// GetRequirements returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.Requirements, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetRequirements() []string {
	return v.crossTenantSendingNodeFields.Requirements
}

// GetSendMessageType returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetSendMessageType() *crossTenantSendingNodeFieldsSendMessageType {
	return v.crossTenantSendingNodeFields.SendMessageType
}

// GetSequentialProcessing returns CreateCrossTenantSendingNodeCreateCrossTenantSendingNode.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) GetSequentialProcessing() *bool {
	return v.crossTenantSendingNodeFields.SequentialProcessing
}

func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateCrossTenantSendingNodeCreateCrossTenantSendingNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateCrossTenantSendingNodeCreateCrossTenantSendingNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsCrossTenantSendingNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantSendingNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateCrossTenantSendingNodeCreateCrossTenantSendingNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	App crossTenantSendingNodeFieldsAppCrossTenantSendingApp `json:"app"`

	InlineProcessor *string `json:"inlineProcessor"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedProcessor *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`

	ReceiveMessageType *crossTenantSendingNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *crossTenantSendingNodeFieldsSendMessageType `json:"sendMessageType"`

	SequentialProcessing *bool `json:"sequentialProcessing"`
}

func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateCrossTenantSendingNodeCreateCrossTenantSendingNode) __premarshalJSON() (*__premarshalCreateCrossTenantSendingNodeCreateCrossTenantSendingNode, error) {
	var retval __premarshalCreateCrossTenantSendingNodeCreateCrossTenantSendingNode

	retval.Description = v.nodeFieldsCrossTenantSendingNode.Description
	retval.Name = v.nodeFieldsCrossTenantSendingNode.Name
	retval.App = v.crossTenantSendingNodeFields.App
	retval.InlineProcessor = v.crossTenantSendingNodeFields.InlineProcessor
	retval.LoggingLevel = v.crossTenantSendingNodeFields.LoggingLevel
	retval.ManagedProcessor = v.crossTenantSendingNodeFields.ManagedProcessor
	retval.ReceiveMessageType = v.crossTenantSendingNodeFields.ReceiveMessageType
	retval.Requirements = v.crossTenantSendingNodeFields.Requirements
	retval.SendMessageType = v.crossTenantSendingNodeFields.SendMessageType
	retval.SequentialProcessing = v.crossTenantSendingNodeFields.SequentialProcessing
	return &retval, nil
}

// CreateCrossTenantSendingNodeResponse is returned by CreateCrossTenantSendingNode on success.
type CreateCrossTenantSendingNodeResponse struct {
	CreateCrossTenantSendingNode CreateCrossTenantSendingNodeCreateCrossTenantSendingNode `json:"CreateCrossTenantSendingNode"`
}

// GetCreateCrossTenantSendingNode returns CreateCrossTenantSendingNodeResponse.CreateCrossTenantSendingNode, and is useful for accessing the field via an interface.
func (v *CreateCrossTenantSendingNodeResponse) GetCreateCrossTenantSendingNode() CreateCrossTenantSendingNodeCreateCrossTenantSendingNode {
	return v.CreateCrossTenantSendingNode
}

// CreateExternalAppCreateExternalApp includes the requested fields of the GraphQL type ExternalApp.
type CreateExternalAppCreateExternalApp struct {
	appFieldsExternalApp `json:"-"`
	externalAppFields    `json:"-"`
}

// GetDescription returns CreateExternalAppCreateExternalApp.Description, and is useful for accessing the field via an interface.
func (v *CreateExternalAppCreateExternalApp) GetDescription() *string {
	return v.appFieldsExternalApp.Description
}

// GetName returns CreateExternalAppCreateExternalApp.Name, and is useful for accessing the field via an interface.
func (v *CreateExternalAppCreateExternalApp) GetName() string { return v.appFieldsExternalApp.Name }

// GetAppsyncEndpoint returns CreateExternalAppCreateExternalApp.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *CreateExternalAppCreateExternalApp) GetAppsyncEndpoint() string {
	return v.externalAppFields.AppsyncEndpoint
}

// GetAuditRecordsEndpoint returns CreateExternalAppCreateExternalApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *CreateExternalAppCreateExternalApp) GetAuditRecordsEndpoint() string {
	return v.externalAppFields.AuditRecordsEndpoint
}

// GetConfig returns CreateExternalAppCreateExternalApp.Config, and is useful for accessing the field via an interface.
func (v *CreateExternalAppCreateExternalApp) GetConfig() *string { return v.externalAppFields.Config }

// GetCredentials returns CreateExternalAppCreateExternalApp.Credentials, and is useful for accessing the field via an interface.
func (v *CreateExternalAppCreateExternalApp) GetCredentials() externalAppFieldsCredentialsCognitoCredentials {
	return v.externalAppFields.Credentials
}

// GetTableAccess returns CreateExternalAppCreateExternalApp.TableAccess, and is useful for accessing the field via an interface.
func (v *CreateExternalAppCreateExternalApp) GetTableAccess() bool {
	return v.externalAppFields.TableAccess
}

func (v *CreateExternalAppCreateExternalApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateExternalAppCreateExternalApp
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateExternalAppCreateExternalApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsExternalApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.externalAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateExternalAppCreateExternalApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	AppsyncEndpoint string `json:"appsyncEndpoint"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials externalAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	TableAccess bool `json:"tableAccess"`
}

func (v *CreateExternalAppCreateExternalApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateExternalAppCreateExternalApp) __premarshalJSON() (*__premarshalCreateExternalAppCreateExternalApp, error) {
	var retval __premarshalCreateExternalAppCreateExternalApp

	retval.Description = v.appFieldsExternalApp.Description
	retval.Name = v.appFieldsExternalApp.Name
	retval.AppsyncEndpoint = v.externalAppFields.AppsyncEndpoint
	retval.AuditRecordsEndpoint = v.externalAppFields.AuditRecordsEndpoint
	retval.Config = v.externalAppFields.Config
	retval.Credentials = v.externalAppFields.Credentials
	retval.TableAccess = v.externalAppFields.TableAccess
	return &retval, nil
}

// CreateExternalAppResponse is returned by CreateExternalApp on success.
type CreateExternalAppResponse struct {
	CreateExternalApp CreateExternalAppCreateExternalApp `json:"CreateExternalApp"`
}

// GetCreateExternalApp returns CreateExternalAppResponse.CreateExternalApp, and is useful for accessing the field via an interface.
func (v *CreateExternalAppResponse) GetCreateExternalApp() CreateExternalAppCreateExternalApp {
	return v.CreateExternalApp
}

// CreateExternalNodeCreateExternalNode includes the requested fields of the GraphQL type ExternalNode.
type CreateExternalNodeCreateExternalNode struct {
	nodeFieldsExternalNode `json:"-"`
	externalNodeFields     `json:"-"`
}

// GetDescription returns CreateExternalNodeCreateExternalNode.Description, and is useful for accessing the field via an interface.
func (v *CreateExternalNodeCreateExternalNode) GetDescription() *string {
	return v.nodeFieldsExternalNode.Description
}

// GetName returns CreateExternalNodeCreateExternalNode.Name, and is useful for accessing the field via an interface.
func (v *CreateExternalNodeCreateExternalNode) GetName() string { return v.nodeFieldsExternalNode.Name }

// GetApp returns CreateExternalNodeCreateExternalNode.App, and is useful for accessing the field via an interface.
func (v *CreateExternalNodeCreateExternalNode) GetApp() externalNodeFieldsAppRemoteApp {
	return v.externalNodeFields.App
}

// GetConfig returns CreateExternalNodeCreateExternalNode.Config, and is useful for accessing the field via an interface.
func (v *CreateExternalNodeCreateExternalNode) GetConfig() *string {
	return v.externalNodeFields.Config
}

// GetReceiveMessageType returns CreateExternalNodeCreateExternalNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *CreateExternalNodeCreateExternalNode) GetReceiveMessageType() *externalNodeFieldsReceiveMessageType {
	return v.externalNodeFields.ReceiveMessageType
}

// GetSendMessageType returns CreateExternalNodeCreateExternalNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateExternalNodeCreateExternalNode) GetSendMessageType() *externalNodeFieldsSendMessageType {
	return v.externalNodeFields.SendMessageType
}

func (v *CreateExternalNodeCreateExternalNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateExternalNodeCreateExternalNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateExternalNodeCreateExternalNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsExternalNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.externalNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateExternalNodeCreateExternalNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	App json.RawMessage `json:"app"`

	Config *string `json:"config"`

	ReceiveMessageType *externalNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *externalNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *CreateExternalNodeCreateExternalNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateExternalNodeCreateExternalNode) __premarshalJSON() (*__premarshalCreateExternalNodeCreateExternalNode, error) {
	var retval __premarshalCreateExternalNodeCreateExternalNode

	retval.Description = v.nodeFieldsExternalNode.Description
	retval.Name = v.nodeFieldsExternalNode.Name
	{

		dst := &retval.App
		src := v.externalNodeFields.App
		var err error
		*dst, err = __marshalexternalNodeFieldsAppRemoteApp(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal CreateExternalNodeCreateExternalNode.externalNodeFields.App: %w", err)
		}
	}
	retval.Config = v.externalNodeFields.Config
	retval.ReceiveMessageType = v.externalNodeFields.ReceiveMessageType
	retval.SendMessageType = v.externalNodeFields.SendMessageType
	return &retval, nil
}

// CreateExternalNodeResponse is returned by CreateExternalNode on success.
type CreateExternalNodeResponse struct {
	CreateExternalNode CreateExternalNodeCreateExternalNode `json:"CreateExternalNode"`
}

// GetCreateExternalNode returns CreateExternalNodeResponse.CreateExternalNode, and is useful for accessing the field via an interface.
func (v *CreateExternalNodeResponse) GetCreateExternalNode() CreateExternalNodeCreateExternalNode {
	return v.CreateExternalNode
}

// CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode struct {
	nodeFieldsFilesDotComWebhookNode `json:"-"`
	filesDotComWebhookNodeFields     `json:"-"`
}

// GetDescription returns CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode) GetDescription() *string {
	return v.nodeFieldsFilesDotComWebhookNode.Description
}

// GetName returns CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode) GetName() string {
	return v.nodeFieldsFilesDotComWebhookNode.Name
}

// GetEndpoint returns CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode.Endpoint, and is useful for accessing the field via an interface.
func (v *CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode) GetEndpoint() string {
	return v.filesDotComWebhookNodeFields.Endpoint
}

// GetSendMessageType returns CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode) GetSendMessageType() *filesDotComWebhookNodeFieldsSendMessageType {
	return v.filesDotComWebhookNodeFields.SendMessageType
}

func (v *CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsFilesDotComWebhookNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.filesDotComWebhookNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Endpoint string `json:"endpoint"`

	SendMessageType *filesDotComWebhookNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode) __premarshalJSON() (*__premarshalCreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode, error) {
	var retval __premarshalCreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode

	retval.Description = v.nodeFieldsFilesDotComWebhookNode.Description
	retval.Name = v.nodeFieldsFilesDotComWebhookNode.Name
	retval.Endpoint = v.filesDotComWebhookNodeFields.Endpoint
	retval.SendMessageType = v.filesDotComWebhookNodeFields.SendMessageType
	return &retval, nil
}

// CreateFilesDotComWebhookNodeResponse is returned by CreateFilesDotComWebhookNode on success.
type CreateFilesDotComWebhookNodeResponse struct {
	CreateFilesDotComWebhookNode CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode `json:"CreateFilesDotComWebhookNode"`
}

// GetCreateFilesDotComWebhookNode returns CreateFilesDotComWebhookNodeResponse.CreateFilesDotComWebhookNode, and is useful for accessing the field via an interface.
func (v *CreateFilesDotComWebhookNodeResponse) GetCreateFilesDotComWebhookNode() CreateFilesDotComWebhookNodeCreateFilesDotComWebhookNode {
	return v.CreateFilesDotComWebhookNode
}

// CreateKmsKeyCreateKmsKey includes the requested fields of the GraphQL type KmsKey.
type CreateKmsKeyCreateKmsKey struct {
	kmsKeyFields `json:"-"`
}

// GetArn returns CreateKmsKeyCreateKmsKey.Arn, and is useful for accessing the field via an interface.
func (v *CreateKmsKeyCreateKmsKey) GetArn() string { return v.kmsKeyFields.Arn }

// GetDescription returns CreateKmsKeyCreateKmsKey.Description, and is useful for accessing the field via an interface.
func (v *CreateKmsKeyCreateKmsKey) GetDescription() *string { return v.kmsKeyFields.Description }

// GetInUse returns CreateKmsKeyCreateKmsKey.InUse, and is useful for accessing the field via an interface.
func (v *CreateKmsKeyCreateKmsKey) GetInUse() bool { return v.kmsKeyFields.InUse }

// GetName returns CreateKmsKeyCreateKmsKey.Name, and is useful for accessing the field via an interface.
func (v *CreateKmsKeyCreateKmsKey) GetName() string { return v.kmsKeyFields.Name }

func (v *CreateKmsKeyCreateKmsKey) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateKmsKeyCreateKmsKey
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateKmsKeyCreateKmsKey = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.kmsKeyFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateKmsKeyCreateKmsKey struct {
	Arn string `json:"arn"`

	Description *string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`
}

func (v *CreateKmsKeyCreateKmsKey) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateKmsKeyCreateKmsKey) __premarshalJSON() (*__premarshalCreateKmsKeyCreateKmsKey, error) {
	var retval __premarshalCreateKmsKeyCreateKmsKey

	retval.Arn = v.kmsKeyFields.Arn
	retval.Description = v.kmsKeyFields.Description
	retval.InUse = v.kmsKeyFields.InUse
	retval.Name = v.kmsKeyFields.Name
	return &retval, nil
}

// CreateKmsKeyResponse is returned by CreateKmsKey on success.
type CreateKmsKeyResponse struct {
	CreateKmsKey CreateKmsKeyCreateKmsKey `json:"CreateKmsKey"`
}

// GetCreateKmsKey returns CreateKmsKeyResponse.CreateKmsKey, and is useful for accessing the field via an interface.
func (v *CreateKmsKeyResponse) GetCreateKmsKey() CreateKmsKeyCreateKmsKey { return v.CreateKmsKey }

// CreateLoadBalancerNodeCreateLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type CreateLoadBalancerNodeCreateLoadBalancerNode struct {
	nodeFieldsLoadBalancerNode `json:"-"`
	loadBalancerNodeFields     `json:"-"`
}

// GetDescription returns CreateLoadBalancerNodeCreateLoadBalancerNode.Description, and is useful for accessing the field via an interface.
func (v *CreateLoadBalancerNodeCreateLoadBalancerNode) GetDescription() *string {
	return v.nodeFieldsLoadBalancerNode.Description
}

// GetName returns CreateLoadBalancerNodeCreateLoadBalancerNode.Name, and is useful for accessing the field via an interface.
func (v *CreateLoadBalancerNodeCreateLoadBalancerNode) GetName() string {
	return v.nodeFieldsLoadBalancerNode.Name
}

// GetReceiveMessageType returns CreateLoadBalancerNodeCreateLoadBalancerNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *CreateLoadBalancerNodeCreateLoadBalancerNode) GetReceiveMessageType() *loadBalancerNodeFieldsReceiveMessageType {
	return v.loadBalancerNodeFields.ReceiveMessageType
}

// GetSendMessageType returns CreateLoadBalancerNodeCreateLoadBalancerNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateLoadBalancerNodeCreateLoadBalancerNode) GetSendMessageType() *loadBalancerNodeFieldsSendMessageType {
	return v.loadBalancerNodeFields.SendMessageType
}

func (v *CreateLoadBalancerNodeCreateLoadBalancerNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateLoadBalancerNodeCreateLoadBalancerNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateLoadBalancerNodeCreateLoadBalancerNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsLoadBalancerNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.loadBalancerNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateLoadBalancerNodeCreateLoadBalancerNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	ReceiveMessageType *loadBalancerNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *loadBalancerNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *CreateLoadBalancerNodeCreateLoadBalancerNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateLoadBalancerNodeCreateLoadBalancerNode) __premarshalJSON() (*__premarshalCreateLoadBalancerNodeCreateLoadBalancerNode, error) {
	var retval __premarshalCreateLoadBalancerNodeCreateLoadBalancerNode

	retval.Description = v.nodeFieldsLoadBalancerNode.Description
	retval.Name = v.nodeFieldsLoadBalancerNode.Name
	retval.ReceiveMessageType = v.loadBalancerNodeFields.ReceiveMessageType
	retval.SendMessageType = v.loadBalancerNodeFields.SendMessageType
	return &retval, nil
}

// CreateLoadBalancerNodeResponse is returned by CreateLoadBalancerNode on success.
type CreateLoadBalancerNodeResponse struct {
	CreateLoadBalancerNode CreateLoadBalancerNodeCreateLoadBalancerNode `json:"CreateLoadBalancerNode"`
}

// GetCreateLoadBalancerNode returns CreateLoadBalancerNodeResponse.CreateLoadBalancerNode, and is useful for accessing the field via an interface.
func (v *CreateLoadBalancerNodeResponse) GetCreateLoadBalancerNode() CreateLoadBalancerNodeCreateLoadBalancerNode {
	return v.CreateLoadBalancerNode
}

// CreateManagedAppCreateManagedApp includes the requested fields of the GraphQL type ManagedApp.
type CreateManagedAppCreateManagedApp struct {
	appFieldsManagedApp `json:"-"`
	managedAppFields    `json:"-"`
}

// GetDescription returns CreateManagedAppCreateManagedApp.Description, and is useful for accessing the field via an interface.
func (v *CreateManagedAppCreateManagedApp) GetDescription() *string {
	return v.appFieldsManagedApp.Description
}

// GetName returns CreateManagedAppCreateManagedApp.Name, and is useful for accessing the field via an interface.
func (v *CreateManagedAppCreateManagedApp) GetName() string { return v.appFieldsManagedApp.Name }

// GetAuditRecordsEndpoint returns CreateManagedAppCreateManagedApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *CreateManagedAppCreateManagedApp) GetAuditRecordsEndpoint() string {
	return v.managedAppFields.AuditRecordsEndpoint
}

// GetConfig returns CreateManagedAppCreateManagedApp.Config, and is useful for accessing the field via an interface.
func (v *CreateManagedAppCreateManagedApp) GetConfig() *string { return v.managedAppFields.Config }

// GetCredentials returns CreateManagedAppCreateManagedApp.Credentials, and is useful for accessing the field via an interface.
func (v *CreateManagedAppCreateManagedApp) GetCredentials() managedAppFieldsCredentialsCognitoCredentials {
	return v.managedAppFields.Credentials
}

// GetTableAccess returns CreateManagedAppCreateManagedApp.TableAccess, and is useful for accessing the field via an interface.
func (v *CreateManagedAppCreateManagedApp) GetTableAccess() bool {
	return v.managedAppFields.TableAccess
}

func (v *CreateManagedAppCreateManagedApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateManagedAppCreateManagedApp
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateManagedAppCreateManagedApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsManagedApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.managedAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateManagedAppCreateManagedApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials managedAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	TableAccess bool `json:"tableAccess"`
}

func (v *CreateManagedAppCreateManagedApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateManagedAppCreateManagedApp) __premarshalJSON() (*__premarshalCreateManagedAppCreateManagedApp, error) {
	var retval __premarshalCreateManagedAppCreateManagedApp

	retval.Description = v.appFieldsManagedApp.Description
	retval.Name = v.appFieldsManagedApp.Name
	retval.AuditRecordsEndpoint = v.managedAppFields.AuditRecordsEndpoint
	retval.Config = v.managedAppFields.Config
	retval.Credentials = v.managedAppFields.Credentials
	retval.TableAccess = v.managedAppFields.TableAccess
	return &retval, nil
}

// CreateManagedAppResponse is returned by CreateManagedApp on success.
type CreateManagedAppResponse struct {
	CreateManagedApp CreateManagedAppCreateManagedApp `json:"CreateManagedApp"`
}

// GetCreateManagedApp returns CreateManagedAppResponse.CreateManagedApp, and is useful for accessing the field via an interface.
func (v *CreateManagedAppResponse) GetCreateManagedApp() CreateManagedAppCreateManagedApp {
	return v.CreateManagedApp
}

// CreateManagedNodeCreateManagedNode includes the requested fields of the GraphQL type ManagedNode.
type CreateManagedNodeCreateManagedNode struct {
	nodeFieldsManagedNode `json:"-"`
	managedNodeFields     `json:"-"`
}

// GetDescription returns CreateManagedNodeCreateManagedNode.Description, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetDescription() *string {
	return v.nodeFieldsManagedNode.Description
}

// GetName returns CreateManagedNodeCreateManagedNode.Name, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetName() string { return v.nodeFieldsManagedNode.Name }

// GetApp returns CreateManagedNodeCreateManagedNode.App, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetApp() managedNodeFieldsAppManagedApp {
	return v.managedNodeFields.App
}

// GetConfig returns CreateManagedNodeCreateManagedNode.Config, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetConfig() *string { return v.managedNodeFields.Config }

// GetLoggingLevel returns CreateManagedNodeCreateManagedNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetLoggingLevel() *LogLevel {
	return v.managedNodeFields.LoggingLevel
}

// GetManagedNodeType returns CreateManagedNodeCreateManagedNode.ManagedNodeType, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetManagedNodeType() managedNodeFieldsManagedNodeType {
	return v.managedNodeFields.ManagedNodeType
}

// GetMounts returns CreateManagedNodeCreateManagedNode.Mounts, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetMounts() []managedNodeFieldsMountsMount {
	return v.managedNodeFields.Mounts
}

// GetPorts returns CreateManagedNodeCreateManagedNode.Ports, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetPorts() []managedNodeFieldsPortsPort {
	return v.managedNodeFields.Ports
}

// GetReceiveMessageType returns CreateManagedNodeCreateManagedNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetReceiveMessageType() *managedNodeFieldsReceiveMessageType {
	return v.managedNodeFields.ReceiveMessageType
}

// GetSendMessageType returns CreateManagedNodeCreateManagedNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeCreateManagedNode) GetSendMessageType() *managedNodeFieldsSendMessageType {
	return v.managedNodeFields.SendMessageType
}

func (v *CreateManagedNodeCreateManagedNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateManagedNodeCreateManagedNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateManagedNodeCreateManagedNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsManagedNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.managedNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateManagedNodeCreateManagedNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	App managedNodeFieldsAppManagedApp `json:"app"`

	Config *string `json:"config"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedNodeType managedNodeFieldsManagedNodeType `json:"managedNodeType"`

	Mounts []managedNodeFieldsMountsMount `json:"mounts"`

	Ports []managedNodeFieldsPortsPort `json:"ports"`

	ReceiveMessageType *managedNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *managedNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *CreateManagedNodeCreateManagedNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateManagedNodeCreateManagedNode) __premarshalJSON() (*__premarshalCreateManagedNodeCreateManagedNode, error) {
	var retval __premarshalCreateManagedNodeCreateManagedNode

	retval.Description = v.nodeFieldsManagedNode.Description
	retval.Name = v.nodeFieldsManagedNode.Name
	retval.App = v.managedNodeFields.App
	retval.Config = v.managedNodeFields.Config
	retval.LoggingLevel = v.managedNodeFields.LoggingLevel
	retval.ManagedNodeType = v.managedNodeFields.ManagedNodeType
	retval.Mounts = v.managedNodeFields.Mounts
	retval.Ports = v.managedNodeFields.Ports
	retval.ReceiveMessageType = v.managedNodeFields.ReceiveMessageType
	retval.SendMessageType = v.managedNodeFields.SendMessageType
	return &retval, nil
}

// CreateManagedNodeResponse is returned by CreateManagedNode on success.
type CreateManagedNodeResponse struct {
	CreateManagedNode CreateManagedNodeCreateManagedNode `json:"CreateManagedNode"`
}

// GetCreateManagedNode returns CreateManagedNodeResponse.CreateManagedNode, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeResponse) GetCreateManagedNode() CreateManagedNodeCreateManagedNode {
	return v.CreateManagedNode
}

// CreateManagedNodeTypeCreateManagedNodeType includes the requested fields of the GraphQL type ManagedNodeType.
type CreateManagedNodeTypeCreateManagedNodeType struct {
	managedNodeTypeFields `json:"-"`
}

// GetConfigTemplate returns CreateManagedNodeTypeCreateManagedNodeType.ConfigTemplate, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetConfigTemplate() *string {
	return v.managedNodeTypeFields.ConfigTemplate
}

// GetDescription returns CreateManagedNodeTypeCreateManagedNodeType.Description, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetDescription() string {
	return v.managedNodeTypeFields.Description
}

// GetImageUri returns CreateManagedNodeTypeCreateManagedNodeType.ImageUri, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetImageUri() string {
	return v.managedNodeTypeFields.ImageUri
}

// GetInUse returns CreateManagedNodeTypeCreateManagedNodeType.InUse, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetInUse() bool {
	return v.managedNodeTypeFields.InUse
}

// GetMountRequirements returns CreateManagedNodeTypeCreateManagedNodeType.MountRequirements, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetMountRequirements() []managedNodeTypeFieldsMountRequirementsMountRequirement {
	return v.managedNodeTypeFields.MountRequirements
}

// GetName returns CreateManagedNodeTypeCreateManagedNodeType.Name, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetName() string {
	return v.managedNodeTypeFields.Name
}

// GetPortRequirements returns CreateManagedNodeTypeCreateManagedNodeType.PortRequirements, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetPortRequirements() []managedNodeTypeFieldsPortRequirementsPortRequirement {
	return v.managedNodeTypeFields.PortRequirements
}

// GetReadme returns CreateManagedNodeTypeCreateManagedNodeType.Readme, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetReadme() *string {
	return v.managedNodeTypeFields.Readme
}

// GetReceiveMessageType returns CreateManagedNodeTypeCreateManagedNodeType.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetReceiveMessageType() *managedNodeTypeFieldsReceiveMessageType {
	return v.managedNodeTypeFields.ReceiveMessageType
}

// GetSendMessageType returns CreateManagedNodeTypeCreateManagedNodeType.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetSendMessageType() *managedNodeTypeFieldsSendMessageType {
	return v.managedNodeTypeFields.SendMessageType
}

// GetSystem returns CreateManagedNodeTypeCreateManagedNodeType.System, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeCreateManagedNodeType) GetSystem() *bool {
	return v.managedNodeTypeFields.System
}

func (v *CreateManagedNodeTypeCreateManagedNodeType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateManagedNodeTypeCreateManagedNodeType
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateManagedNodeTypeCreateManagedNodeType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.managedNodeTypeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateManagedNodeTypeCreateManagedNodeType struct {
	ConfigTemplate *string `json:"configTemplate"`

	Description string `json:"description"`

	ImageUri string `json:"imageUri"`

	InUse bool `json:"inUse"`

	MountRequirements []managedNodeTypeFieldsMountRequirementsMountRequirement `json:"mountRequirements"`

	Name string `json:"name"`

	PortRequirements []managedNodeTypeFieldsPortRequirementsPortRequirement `json:"portRequirements"`

	Readme *string `json:"readme"`

	ReceiveMessageType *managedNodeTypeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *managedNodeTypeFieldsSendMessageType `json:"sendMessageType"`

	System *bool `json:"system"`
}

func (v *CreateManagedNodeTypeCreateManagedNodeType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateManagedNodeTypeCreateManagedNodeType) __premarshalJSON() (*__premarshalCreateManagedNodeTypeCreateManagedNodeType, error) {
	var retval __premarshalCreateManagedNodeTypeCreateManagedNodeType

	retval.ConfigTemplate = v.managedNodeTypeFields.ConfigTemplate
	retval.Description = v.managedNodeTypeFields.Description
	retval.ImageUri = v.managedNodeTypeFields.ImageUri
	retval.InUse = v.managedNodeTypeFields.InUse
	retval.MountRequirements = v.managedNodeTypeFields.MountRequirements
	retval.Name = v.managedNodeTypeFields.Name
	retval.PortRequirements = v.managedNodeTypeFields.PortRequirements
	retval.Readme = v.managedNodeTypeFields.Readme
	retval.ReceiveMessageType = v.managedNodeTypeFields.ReceiveMessageType
	retval.SendMessageType = v.managedNodeTypeFields.SendMessageType
	retval.System = v.managedNodeTypeFields.System
	return &retval, nil
}

// CreateManagedNodeTypeResponse is returned by CreateManagedNodeType on success.
type CreateManagedNodeTypeResponse struct {
	CreateManagedNodeType CreateManagedNodeTypeCreateManagedNodeType `json:"CreateManagedNodeType"`
}

// GetCreateManagedNodeType returns CreateManagedNodeTypeResponse.CreateManagedNodeType, and is useful for accessing the field via an interface.
func (v *CreateManagedNodeTypeResponse) GetCreateManagedNodeType() CreateManagedNodeTypeCreateManagedNodeType {
	return v.CreateManagedNodeType
}

// CreateMessageTypeCreateMessageType includes the requested fields of the GraphQL type MessageType.
type CreateMessageTypeCreateMessageType struct {
	messageTypeFields `json:"-"`
}

// GetAuditor returns CreateMessageTypeCreateMessageType.Auditor, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetAuditor() string { return v.messageTypeFields.Auditor }

// GetBitmapperTemplate returns CreateMessageTypeCreateMessageType.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetBitmapperTemplate() string {
	return v.messageTypeFields.BitmapperTemplate
}

// GetDescription returns CreateMessageTypeCreateMessageType.Description, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetDescription() string {
	return v.messageTypeFields.Description
}

// GetInUse returns CreateMessageTypeCreateMessageType.InUse, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetInUse() bool { return v.messageTypeFields.InUse }

// GetName returns CreateMessageTypeCreateMessageType.Name, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetName() string { return v.messageTypeFields.Name }

// GetProcessorTemplate returns CreateMessageTypeCreateMessageType.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetProcessorTemplate() string {
	return v.messageTypeFields.ProcessorTemplate
}

// GetReadme returns CreateMessageTypeCreateMessageType.Readme, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetReadme() *string { return v.messageTypeFields.Readme }

// GetRequirements returns CreateMessageTypeCreateMessageType.Requirements, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetRequirements() []string {
	return v.messageTypeFields.Requirements
}

// GetSampleMessage returns CreateMessageTypeCreateMessageType.SampleMessage, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetSampleMessage() string {
	return v.messageTypeFields.SampleMessage
}

// GetSystem returns CreateMessageTypeCreateMessageType.System, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeCreateMessageType) GetSystem() *bool { return v.messageTypeFields.System }

func (v *CreateMessageTypeCreateMessageType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateMessageTypeCreateMessageType
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateMessageTypeCreateMessageType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.messageTypeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateMessageTypeCreateMessageType struct {
	Auditor string `json:"auditor"`

	BitmapperTemplate string `json:"bitmapperTemplate"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	ProcessorTemplate string `json:"processorTemplate"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	SampleMessage string `json:"sampleMessage"`

	System *bool `json:"system"`
}

func (v *CreateMessageTypeCreateMessageType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateMessageTypeCreateMessageType) __premarshalJSON() (*__premarshalCreateMessageTypeCreateMessageType, error) {
	var retval __premarshalCreateMessageTypeCreateMessageType

	retval.Auditor = v.messageTypeFields.Auditor
	retval.BitmapperTemplate = v.messageTypeFields.BitmapperTemplate
	retval.Description = v.messageTypeFields.Description
	retval.InUse = v.messageTypeFields.InUse
	retval.Name = v.messageTypeFields.Name
	retval.ProcessorTemplate = v.messageTypeFields.ProcessorTemplate
	retval.Readme = v.messageTypeFields.Readme
	retval.Requirements = v.messageTypeFields.Requirements
	retval.SampleMessage = v.messageTypeFields.SampleMessage
	retval.System = v.messageTypeFields.System
	return &retval, nil
}

// CreateMessageTypeResponse is returned by CreateMessageType on success.
type CreateMessageTypeResponse struct {
	CreateMessageType CreateMessageTypeCreateMessageType `json:"CreateMessageType"`
}

// GetCreateMessageType returns CreateMessageTypeResponse.CreateMessageType, and is useful for accessing the field via an interface.
func (v *CreateMessageTypeResponse) GetCreateMessageType() CreateMessageTypeCreateMessageType {
	return v.CreateMessageType
}

// CreateProcessorFunctionCreateProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type CreateProcessorFunctionCreateProcessorFunction struct {
	functionFieldsProcessorFunction `json:"-"`
	processorFunctionFields         `json:"-"`
}

// GetCode returns CreateProcessorFunctionCreateProcessorFunction.Code, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetCode() string {
	return v.functionFieldsProcessorFunction.Code
}

// GetDescription returns CreateProcessorFunctionCreateProcessorFunction.Description, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetDescription() string {
	return v.functionFieldsProcessorFunction.Description
}

// GetInUse returns CreateProcessorFunctionCreateProcessorFunction.InUse, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetInUse() bool {
	return v.functionFieldsProcessorFunction.InUse
}

// GetName returns CreateProcessorFunctionCreateProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetName() string {
	return v.functionFieldsProcessorFunction.Name
}

// GetReadme returns CreateProcessorFunctionCreateProcessorFunction.Readme, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetReadme() *string {
	return v.functionFieldsProcessorFunction.Readme
}

// GetRequirements returns CreateProcessorFunctionCreateProcessorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetRequirements() []string {
	return v.functionFieldsProcessorFunction.Requirements
}

// GetSystem returns CreateProcessorFunctionCreateProcessorFunction.System, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetSystem() *bool {
	return v.functionFieldsProcessorFunction.System
}

// GetArgumentMessageType returns CreateProcessorFunctionCreateProcessorFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetArgumentMessageType() processorFunctionFieldsArgumentMessageType {
	return v.processorFunctionFields.ArgumentMessageType
}

// GetReturnMessageType returns CreateProcessorFunctionCreateProcessorFunction.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionCreateProcessorFunction) GetReturnMessageType() *processorFunctionFieldsReturnMessageType {
	return v.processorFunctionFields.ReturnMessageType
}

func (v *CreateProcessorFunctionCreateProcessorFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateProcessorFunctionCreateProcessorFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateProcessorFunctionCreateProcessorFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsProcessorFunction)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.processorFunctionFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateProcessorFunctionCreateProcessorFunction struct {
	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`

	ArgumentMessageType processorFunctionFieldsArgumentMessageType `json:"argumentMessageType"`

	ReturnMessageType *processorFunctionFieldsReturnMessageType `json:"returnMessageType"`
}

func (v *CreateProcessorFunctionCreateProcessorFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateProcessorFunctionCreateProcessorFunction) __premarshalJSON() (*__premarshalCreateProcessorFunctionCreateProcessorFunction, error) {
	var retval __premarshalCreateProcessorFunctionCreateProcessorFunction

	retval.Code = v.functionFieldsProcessorFunction.Code
	retval.Description = v.functionFieldsProcessorFunction.Description
	retval.InUse = v.functionFieldsProcessorFunction.InUse
	retval.Name = v.functionFieldsProcessorFunction.Name
	retval.Readme = v.functionFieldsProcessorFunction.Readme
	retval.Requirements = v.functionFieldsProcessorFunction.Requirements
	retval.System = v.functionFieldsProcessorFunction.System
	retval.ArgumentMessageType = v.processorFunctionFields.ArgumentMessageType
	retval.ReturnMessageType = v.processorFunctionFields.ReturnMessageType
	return &retval, nil
}

// CreateProcessorFunctionResponse is returned by CreateProcessorFunction on success.
type CreateProcessorFunctionResponse struct {
	CreateProcessorFunction CreateProcessorFunctionCreateProcessorFunction `json:"CreateProcessorFunction"`
}

// GetCreateProcessorFunction returns CreateProcessorFunctionResponse.CreateProcessorFunction, and is useful for accessing the field via an interface.
func (v *CreateProcessorFunctionResponse) GetCreateProcessorFunction() CreateProcessorFunctionCreateProcessorFunction {
	return v.CreateProcessorFunction
}

// CreateProcessorNodeCreateProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type CreateProcessorNodeCreateProcessorNode struct {
	nodeFieldsProcessorNode `json:"-"`
	processorNodeFields     `json:"-"`
}

// GetDescription returns CreateProcessorNodeCreateProcessorNode.Description, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetDescription() *string {
	return v.nodeFieldsProcessorNode.Description
}

// GetName returns CreateProcessorNodeCreateProcessorNode.Name, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetName() string {
	return v.nodeFieldsProcessorNode.Name
}

// GetConfig returns CreateProcessorNodeCreateProcessorNode.Config, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetConfig() *string {
	return v.processorNodeFields.Config
}

// GetInlineProcessor returns CreateProcessorNodeCreateProcessorNode.InlineProcessor, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetInlineProcessor() *string {
	return v.processorNodeFields.InlineProcessor
}

// GetLoggingLevel returns CreateProcessorNodeCreateProcessorNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetLoggingLevel() *LogLevel {
	return v.processorNodeFields.LoggingLevel
}

// GetManagedProcessor returns CreateProcessorNodeCreateProcessorNode.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetManagedProcessor() *processorNodeFieldsManagedProcessorProcessorFunction {
	return v.processorNodeFields.ManagedProcessor
}

// GetReceiveMessageType returns CreateProcessorNodeCreateProcessorNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetReceiveMessageType() *processorNodeFieldsReceiveMessageType {
	return v.processorNodeFields.ReceiveMessageType
}

// GetRequirements returns CreateProcessorNodeCreateProcessorNode.Requirements, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetRequirements() []string {
	return v.processorNodeFields.Requirements
}

// GetSendMessageType returns CreateProcessorNodeCreateProcessorNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetSendMessageType() *processorNodeFieldsSendMessageType {
	return v.processorNodeFields.SendMessageType
}

// GetSequentialProcessing returns CreateProcessorNodeCreateProcessorNode.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeCreateProcessorNode) GetSequentialProcessing() *bool {
	return v.processorNodeFields.SequentialProcessing
}

func (v *CreateProcessorNodeCreateProcessorNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateProcessorNodeCreateProcessorNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateProcessorNodeCreateProcessorNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsProcessorNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.processorNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateProcessorNodeCreateProcessorNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Config *string `json:"config"`

	InlineProcessor *string `json:"inlineProcessor"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedProcessor *processorNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`

	ReceiveMessageType *processorNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *processorNodeFieldsSendMessageType `json:"sendMessageType"`

	SequentialProcessing *bool `json:"sequentialProcessing"`
}

func (v *CreateProcessorNodeCreateProcessorNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateProcessorNodeCreateProcessorNode) __premarshalJSON() (*__premarshalCreateProcessorNodeCreateProcessorNode, error) {
	var retval __premarshalCreateProcessorNodeCreateProcessorNode

	retval.Description = v.nodeFieldsProcessorNode.Description
	retval.Name = v.nodeFieldsProcessorNode.Name
	retval.Config = v.processorNodeFields.Config
	retval.InlineProcessor = v.processorNodeFields.InlineProcessor
	retval.LoggingLevel = v.processorNodeFields.LoggingLevel
	retval.ManagedProcessor = v.processorNodeFields.ManagedProcessor
	retval.ReceiveMessageType = v.processorNodeFields.ReceiveMessageType
	retval.Requirements = v.processorNodeFields.Requirements
	retval.SendMessageType = v.processorNodeFields.SendMessageType
	retval.SequentialProcessing = v.processorNodeFields.SequentialProcessing
	return &retval, nil
}

// CreateProcessorNodeResponse is returned by CreateProcessorNode on success.
type CreateProcessorNodeResponse struct {
	CreateProcessorNode CreateProcessorNodeCreateProcessorNode `json:"CreateProcessorNode"`
}

// GetCreateProcessorNode returns CreateProcessorNodeResponse.CreateProcessorNode, and is useful for accessing the field via an interface.
func (v *CreateProcessorNodeResponse) GetCreateProcessorNode() CreateProcessorNodeCreateProcessorNode {
	return v.CreateProcessorNode
}

// CreateTimerNodeCreateTimerNode includes the requested fields of the GraphQL type TimerNode.
type CreateTimerNodeCreateTimerNode struct {
	nodeFieldsTimerNode `json:"-"`
	timerNodeFields     `json:"-"`
}

// GetDescription returns CreateTimerNodeCreateTimerNode.Description, and is useful for accessing the field via an interface.
func (v *CreateTimerNodeCreateTimerNode) GetDescription() *string {
	return v.nodeFieldsTimerNode.Description
}

// GetName returns CreateTimerNodeCreateTimerNode.Name, and is useful for accessing the field via an interface.
func (v *CreateTimerNodeCreateTimerNode) GetName() string { return v.nodeFieldsTimerNode.Name }

// GetScheduleExpression returns CreateTimerNodeCreateTimerNode.ScheduleExpression, and is useful for accessing the field via an interface.
func (v *CreateTimerNodeCreateTimerNode) GetScheduleExpression() string {
	return v.timerNodeFields.ScheduleExpression
}

// GetSendMessageType returns CreateTimerNodeCreateTimerNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateTimerNodeCreateTimerNode) GetSendMessageType() *timerNodeFieldsSendMessageType {
	return v.timerNodeFields.SendMessageType
}

func (v *CreateTimerNodeCreateTimerNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateTimerNodeCreateTimerNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateTimerNodeCreateTimerNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsTimerNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.timerNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateTimerNodeCreateTimerNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	ScheduleExpression string `json:"scheduleExpression"`

	SendMessageType *timerNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *CreateTimerNodeCreateTimerNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateTimerNodeCreateTimerNode) __premarshalJSON() (*__premarshalCreateTimerNodeCreateTimerNode, error) {
	var retval __premarshalCreateTimerNodeCreateTimerNode

	retval.Description = v.nodeFieldsTimerNode.Description
	retval.Name = v.nodeFieldsTimerNode.Name
	retval.ScheduleExpression = v.timerNodeFields.ScheduleExpression
	retval.SendMessageType = v.timerNodeFields.SendMessageType
	return &retval, nil
}

// CreateTimerNodeResponse is returned by CreateTimerNode on success.
type CreateTimerNodeResponse struct {
	CreateTimerNode CreateTimerNodeCreateTimerNode `json:"CreateTimerNode"`
}

// GetCreateTimerNode returns CreateTimerNodeResponse.CreateTimerNode, and is useful for accessing the field via an interface.
func (v *CreateTimerNodeResponse) GetCreateTimerNode() CreateTimerNodeCreateTimerNode {
	return v.CreateTimerNode
}

// CreateWebhookNodeCreateWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type CreateWebhookNodeCreateWebhookNode struct {
	nodeFieldsWebhookNode `json:"-"`
	webhookNodeFields     `json:"-"`
}

// GetDescription returns CreateWebhookNodeCreateWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetDescription() *string {
	return v.nodeFieldsWebhookNode.Description
}

// GetName returns CreateWebhookNodeCreateWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetName() string { return v.nodeFieldsWebhookNode.Name }

// GetConfig returns CreateWebhookNodeCreateWebhookNode.Config, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetConfig() *string { return v.webhookNodeFields.Config }

// GetEndpoint returns CreateWebhookNodeCreateWebhookNode.Endpoint, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetEndpoint() string {
	return v.webhookNodeFields.Endpoint
}

// GetInlineApiAuthenticator returns CreateWebhookNodeCreateWebhookNode.InlineApiAuthenticator, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetInlineApiAuthenticator() *string {
	return v.webhookNodeFields.InlineApiAuthenticator
}

// GetLoggingLevel returns CreateWebhookNodeCreateWebhookNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetLoggingLevel() *LogLevel {
	return v.webhookNodeFields.LoggingLevel
}

// GetManagedApiAuthenticator returns CreateWebhookNodeCreateWebhookNode.ManagedApiAuthenticator, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetManagedApiAuthenticator() *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction {
	return v.webhookNodeFields.ManagedApiAuthenticator
}

// GetRequirements returns CreateWebhookNodeCreateWebhookNode.Requirements, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetRequirements() []string {
	return v.webhookNodeFields.Requirements
}

// GetSendMessageType returns CreateWebhookNodeCreateWebhookNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeCreateWebhookNode) GetSendMessageType() *webhookNodeFieldsSendMessageType {
	return v.webhookNodeFields.SendMessageType
}

func (v *CreateWebhookNodeCreateWebhookNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*CreateWebhookNodeCreateWebhookNode
		graphql.NoUnmarshalJSON
	}
	firstPass.CreateWebhookNodeCreateWebhookNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsWebhookNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.webhookNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalCreateWebhookNodeCreateWebhookNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Config *string `json:"config"`

	Endpoint string `json:"endpoint"`

	InlineApiAuthenticator *string `json:"inlineApiAuthenticator"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedApiAuthenticator *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction `json:"managedApiAuthenticator"`

	Requirements []string `json:"requirements"`

	SendMessageType *webhookNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *CreateWebhookNodeCreateWebhookNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *CreateWebhookNodeCreateWebhookNode) __premarshalJSON() (*__premarshalCreateWebhookNodeCreateWebhookNode, error) {
	var retval __premarshalCreateWebhookNodeCreateWebhookNode

	retval.Description = v.nodeFieldsWebhookNode.Description
	retval.Name = v.nodeFieldsWebhookNode.Name
	retval.Config = v.webhookNodeFields.Config
	retval.Endpoint = v.webhookNodeFields.Endpoint
	retval.InlineApiAuthenticator = v.webhookNodeFields.InlineApiAuthenticator
	retval.LoggingLevel = v.webhookNodeFields.LoggingLevel
	retval.ManagedApiAuthenticator = v.webhookNodeFields.ManagedApiAuthenticator
	retval.Requirements = v.webhookNodeFields.Requirements
	retval.SendMessageType = v.webhookNodeFields.SendMessageType
	return &retval, nil
}

// CreateWebhookNodeResponse is returned by CreateWebhookNode on success.
type CreateWebhookNodeResponse struct {
	CreateWebhookNode CreateWebhookNodeCreateWebhookNode `json:"CreateWebhookNode"`
}

// GetCreateWebhookNode returns CreateWebhookNodeResponse.CreateWebhookNode, and is useful for accessing the field via an interface.
func (v *CreateWebhookNodeResponse) GetCreateWebhookNode() CreateWebhookNodeCreateWebhookNode {
	return v.CreateWebhookNode
}

// DeleteAppGetApp includes the requested fields of the GraphQL interface App.
//
// DeleteAppGetApp is implemented by the following types:
// DeleteAppGetAppCrossAccountApp
// DeleteAppGetAppCrossTenantReceivingApp
// DeleteAppGetAppCrossTenantSendingApp
// DeleteAppGetAppExternalApp
// DeleteAppGetAppManagedApp
type DeleteAppGetApp interface {
	implementsGraphQLInterfaceDeleteAppGetApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetDelete returns the interface-field "Delete" from its implementation.
	GetDelete() bool
}

func (v *DeleteAppGetAppCrossAccountApp) implementsGraphQLInterfaceDeleteAppGetApp()         {}
func (v *DeleteAppGetAppCrossTenantReceivingApp) implementsGraphQLInterfaceDeleteAppGetApp() {}
func (v *DeleteAppGetAppCrossTenantSendingApp) implementsGraphQLInterfaceDeleteAppGetApp()   {}
func (v *DeleteAppGetAppExternalApp) implementsGraphQLInterfaceDeleteAppGetApp()             {}
func (v *DeleteAppGetAppManagedApp) implementsGraphQLInterfaceDeleteAppGetApp()              {}

func __unmarshalDeleteAppGetApp(b []byte, v *DeleteAppGetApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(DeleteAppGetAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(DeleteAppGetAppCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(DeleteAppGetAppCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(DeleteAppGetAppExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(DeleteAppGetAppManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteAppGetApp: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteAppGetApp(v *DeleteAppGetApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteAppGetAppCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteAppGetAppCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *DeleteAppGetAppCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteAppGetAppCrossTenantReceivingApp
		}{typename, v}
		return json.Marshal(result)
	case *DeleteAppGetAppCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteAppGetAppCrossTenantSendingApp
		}{typename, v}
		return json.Marshal(result)
	case *DeleteAppGetAppExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteAppGetAppExternalApp
		}{typename, v}
		return json.Marshal(result)
	case *DeleteAppGetAppManagedApp:
		typename = "ManagedApp"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteAppGetAppManagedApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteAppGetApp: "%T"`, v)
	}
}

// DeleteAppGetAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type DeleteAppGetAppCrossAccountApp struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteAppGetAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppCrossAccountApp) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteAppGetAppCrossAccountApp.Delete, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppCrossAccountApp) GetDelete() bool { return v.Delete }

// DeleteAppGetAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type DeleteAppGetAppCrossTenantReceivingApp struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteAppGetAppCrossTenantReceivingApp.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppCrossTenantReceivingApp) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteAppGetAppCrossTenantReceivingApp.Delete, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppCrossTenantReceivingApp) GetDelete() bool { return v.Delete }

// DeleteAppGetAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type DeleteAppGetAppCrossTenantSendingApp struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteAppGetAppCrossTenantSendingApp.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppCrossTenantSendingApp) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteAppGetAppCrossTenantSendingApp.Delete, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppCrossTenantSendingApp) GetDelete() bool { return v.Delete }

// DeleteAppGetAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type DeleteAppGetAppExternalApp struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteAppGetAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppExternalApp) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteAppGetAppExternalApp.Delete, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppExternalApp) GetDelete() bool { return v.Delete }

// DeleteAppGetAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type DeleteAppGetAppManagedApp struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteAppGetAppManagedApp.Typename, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppManagedApp) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteAppGetAppManagedApp.Delete, and is useful for accessing the field via an interface.
func (v *DeleteAppGetAppManagedApp) GetDelete() bool { return v.Delete }

// DeleteAppResponse is returned by DeleteApp on success.
type DeleteAppResponse struct {
	GetApp *DeleteAppGetApp `json:"-"`
}

// GetGetApp returns DeleteAppResponse.GetApp, and is useful for accessing the field via an interface.
func (v *DeleteAppResponse) GetGetApp() *DeleteAppGetApp { return v.GetApp }

func (v *DeleteAppResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteAppResponse
		GetApp json.RawMessage `json:"GetApp"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteAppResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetApp
		src := firstPass.GetApp
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DeleteAppGetApp)
			err = __unmarshalDeleteAppGetApp(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal DeleteAppResponse.GetApp: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteAppResponse struct {
	GetApp json.RawMessage `json:"GetApp"`
}

func (v *DeleteAppResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteAppResponse) __premarshalJSON() (*__premarshalDeleteAppResponse, error) {
	var retval __premarshalDeleteAppResponse

	{

		dst := &retval.GetApp
		src := v.GetApp
		if src != nil {
			var err error
			*dst, err = __marshalDeleteAppGetApp(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal DeleteAppResponse.GetApp: %w", err)
			}
		}
	}
	return &retval, nil
}

// DeleteFunctionGetFunction includes the requested fields of the GraphQL interface Function.
//
// DeleteFunctionGetFunction is implemented by the following types:
// DeleteFunctionGetFunctionApiAuthenticatorFunction
// DeleteFunctionGetFunctionBitmapperFunction
// DeleteFunctionGetFunctionProcessorFunction
type DeleteFunctionGetFunction interface {
	implementsGraphQLInterfaceDeleteFunctionGetFunction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetDelete returns the interface-field "Delete" from its implementation.
	GetDelete() bool
}

func (v *DeleteFunctionGetFunctionApiAuthenticatorFunction) implementsGraphQLInterfaceDeleteFunctionGetFunction() {
}
func (v *DeleteFunctionGetFunctionBitmapperFunction) implementsGraphQLInterfaceDeleteFunctionGetFunction() {
}
func (v *DeleteFunctionGetFunctionProcessorFunction) implementsGraphQLInterfaceDeleteFunctionGetFunction() {
}

func __unmarshalDeleteFunctionGetFunction(b []byte, v *DeleteFunctionGetFunction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAuthenticatorFunction":
		*v = new(DeleteFunctionGetFunctionApiAuthenticatorFunction)
		return json.Unmarshal(b, *v)
	case "BitmapperFunction":
		*v = new(DeleteFunctionGetFunctionBitmapperFunction)
		return json.Unmarshal(b, *v)
	case "ProcessorFunction":
		*v = new(DeleteFunctionGetFunctionProcessorFunction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Function.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteFunctionGetFunction: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteFunctionGetFunction(v *DeleteFunctionGetFunction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteFunctionGetFunctionApiAuthenticatorFunction:
		typename = "ApiAuthenticatorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteFunctionGetFunctionApiAuthenticatorFunction
		}{typename, v}
		return json.Marshal(result)
	case *DeleteFunctionGetFunctionBitmapperFunction:
		typename = "BitmapperFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteFunctionGetFunctionBitmapperFunction
		}{typename, v}
		return json.Marshal(result)
	case *DeleteFunctionGetFunctionProcessorFunction:
		typename = "ProcessorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteFunctionGetFunctionProcessorFunction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteFunctionGetFunction: "%T"`, v)
	}
}

// DeleteFunctionGetFunctionApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type DeleteFunctionGetFunctionApiAuthenticatorFunction struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteFunctionGetFunctionApiAuthenticatorFunction.Typename, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionApiAuthenticatorFunction) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteFunctionGetFunctionApiAuthenticatorFunction.Delete, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionApiAuthenticatorFunction) GetDelete() bool { return v.Delete }

// DeleteFunctionGetFunctionBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type DeleteFunctionGetFunctionBitmapperFunction struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteFunctionGetFunctionBitmapperFunction.Typename, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionBitmapperFunction) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteFunctionGetFunctionBitmapperFunction.Delete, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionBitmapperFunction) GetDelete() bool { return v.Delete }

// DeleteFunctionGetFunctionProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type DeleteFunctionGetFunctionProcessorFunction struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteFunctionGetFunctionProcessorFunction.Typename, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionProcessorFunction) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteFunctionGetFunctionProcessorFunction.Delete, and is useful for accessing the field via an interface.
func (v *DeleteFunctionGetFunctionProcessorFunction) GetDelete() bool { return v.Delete }

// DeleteFunctionResponse is returned by DeleteFunction on success.
type DeleteFunctionResponse struct {
	GetFunction *DeleteFunctionGetFunction `json:"-"`
}

// GetGetFunction returns DeleteFunctionResponse.GetFunction, and is useful for accessing the field via an interface.
func (v *DeleteFunctionResponse) GetGetFunction() *DeleteFunctionGetFunction { return v.GetFunction }

func (v *DeleteFunctionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteFunctionResponse
		GetFunction json.RawMessage `json:"GetFunction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteFunctionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetFunction
		src := firstPass.GetFunction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DeleteFunctionGetFunction)
			err = __unmarshalDeleteFunctionGetFunction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal DeleteFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteFunctionResponse struct {
	GetFunction json.RawMessage `json:"GetFunction"`
}

func (v *DeleteFunctionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteFunctionResponse) __premarshalJSON() (*__premarshalDeleteFunctionResponse, error) {
	var retval __premarshalDeleteFunctionResponse

	{

		dst := &retval.GetFunction
		src := v.GetFunction
		if src != nil {
			var err error
			*dst, err = __marshalDeleteFunctionGetFunction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal DeleteFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return &retval, nil
}

// DeleteKmsKeyGetKmsKey includes the requested fields of the GraphQL type KmsKey.
type DeleteKmsKeyGetKmsKey struct {
	Delete bool `json:"Delete"`
}

// GetDelete returns DeleteKmsKeyGetKmsKey.Delete, and is useful for accessing the field via an interface.
func (v *DeleteKmsKeyGetKmsKey) GetDelete() bool { return v.Delete }

// DeleteKmsKeyResponse is returned by DeleteKmsKey on success.
type DeleteKmsKeyResponse struct {
	GetKmsKey *DeleteKmsKeyGetKmsKey `json:"GetKmsKey"`
}

// GetGetKmsKey returns DeleteKmsKeyResponse.GetKmsKey, and is useful for accessing the field via an interface.
func (v *DeleteKmsKeyResponse) GetGetKmsKey() *DeleteKmsKeyGetKmsKey { return v.GetKmsKey }

// DeleteManagedNodeTypeGetManagedNodeType includes the requested fields of the GraphQL type ManagedNodeType.
type DeleteManagedNodeTypeGetManagedNodeType struct {
	Delete bool `json:"Delete"`
}

// GetDelete returns DeleteManagedNodeTypeGetManagedNodeType.Delete, and is useful for accessing the field via an interface.
func (v *DeleteManagedNodeTypeGetManagedNodeType) GetDelete() bool { return v.Delete }

// DeleteManagedNodeTypeResponse is returned by DeleteManagedNodeType on success.
type DeleteManagedNodeTypeResponse struct {
	GetManagedNodeType *DeleteManagedNodeTypeGetManagedNodeType `json:"GetManagedNodeType"`
}

// GetGetManagedNodeType returns DeleteManagedNodeTypeResponse.GetManagedNodeType, and is useful for accessing the field via an interface.
func (v *DeleteManagedNodeTypeResponse) GetGetManagedNodeType() *DeleteManagedNodeTypeGetManagedNodeType {
	return v.GetManagedNodeType
}

// DeleteMessageTypeGetMessageType includes the requested fields of the GraphQL type MessageType.
type DeleteMessageTypeGetMessageType struct {
	Delete bool `json:"Delete"`
}

// GetDelete returns DeleteMessageTypeGetMessageType.Delete, and is useful for accessing the field via an interface.
func (v *DeleteMessageTypeGetMessageType) GetDelete() bool { return v.Delete }

// DeleteMessageTypeResponse is returned by DeleteMessageType on success.
type DeleteMessageTypeResponse struct {
	GetMessageType *DeleteMessageTypeGetMessageType `json:"GetMessageType"`
}

// GetGetMessageType returns DeleteMessageTypeResponse.GetMessageType, and is useful for accessing the field via an interface.
func (v *DeleteMessageTypeResponse) GetGetMessageType() *DeleteMessageTypeGetMessageType {
	return v.GetMessageType
}

// DeleteNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// DeleteNodeGetNode is implemented by the following types:
// DeleteNodeGetNodeAlertEmitterNode
// DeleteNodeGetNodeAppChangeReceiverNode
// DeleteNodeGetNodeAppChangeRouterNode
// DeleteNodeGetNodeAuditEmitterNode
// DeleteNodeGetNodeBitmapRouterNode
// DeleteNodeGetNodeChangeEmitterNode
// DeleteNodeGetNodeCrossTenantReceivingNode
// DeleteNodeGetNodeCrossTenantSendingNode
// DeleteNodeGetNodeDeadLetterEmitterNode
// DeleteNodeGetNodeExternalNode
// DeleteNodeGetNodeFilesDotComWebhookNode
// DeleteNodeGetNodeLoadBalancerNode
// DeleteNodeGetNodeLogEmitterNode
// DeleteNodeGetNodeManagedNode
// DeleteNodeGetNodeProcessorNode
// DeleteNodeGetNodeTimerNode
// DeleteNodeGetNodeWebhookNode
type DeleteNodeGetNode interface {
	implementsGraphQLInterfaceDeleteNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *DeleteNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceDeleteNodeGetNode()         {}
func (v *DeleteNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceDeleteNodeGetNode()    {}
func (v *DeleteNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceDeleteNodeGetNode()      {}
func (v *DeleteNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceDeleteNodeGetNode()         {}
func (v *DeleteNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceDeleteNodeGetNode()         {}
func (v *DeleteNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceDeleteNodeGetNode()        {}
func (v *DeleteNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceDeleteNodeGetNode() {}
func (v *DeleteNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceDeleteNodeGetNode()   {}
func (v *DeleteNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceDeleteNodeGetNode()    {}
func (v *DeleteNodeGetNodeExternalNode) implementsGraphQLInterfaceDeleteNodeGetNode()             {}
func (v *DeleteNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceDeleteNodeGetNode()   {}
func (v *DeleteNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceDeleteNodeGetNode()         {}
func (v *DeleteNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceDeleteNodeGetNode()           {}
func (v *DeleteNodeGetNodeManagedNode) implementsGraphQLInterfaceDeleteNodeGetNode()              {}
func (v *DeleteNodeGetNodeProcessorNode) implementsGraphQLInterfaceDeleteNodeGetNode()            {}
func (v *DeleteNodeGetNodeTimerNode) implementsGraphQLInterfaceDeleteNodeGetNode()                {}
func (v *DeleteNodeGetNodeWebhookNode) implementsGraphQLInterfaceDeleteNodeGetNode()              {}

func __unmarshalDeleteNodeGetNode(b []byte, v *DeleteNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(DeleteNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(DeleteNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(DeleteNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(DeleteNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(DeleteNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(DeleteNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(DeleteNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(DeleteNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(DeleteNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(DeleteNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(DeleteNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(DeleteNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(DeleteNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(DeleteNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(DeleteNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(DeleteNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(DeleteNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for DeleteNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalDeleteNodeGetNode(v *DeleteNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *DeleteNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *DeleteNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*DeleteNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for DeleteNodeGetNode: "%T"`, v)
	}
}

// DeleteNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type DeleteNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// DeleteNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type DeleteNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// DeleteNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type DeleteNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// DeleteNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type DeleteNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// DeleteNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type DeleteNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeBitmapRouterNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeBitmapRouterNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type DeleteNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// DeleteNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type DeleteNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeCrossTenantReceivingNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeCrossTenantReceivingNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type DeleteNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeCrossTenantSendingNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeCrossTenantSendingNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type DeleteNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// DeleteNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type DeleteNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeExternalNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeExternalNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type DeleteNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeFilesDotComWebhookNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeFilesDotComWebhookNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type DeleteNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeLoadBalancerNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeLoadBalancerNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type DeleteNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns DeleteNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// DeleteNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type DeleteNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeManagedNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeManagedNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type DeleteNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeProcessorNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeProcessorNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type DeleteNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeTimerNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeTimerNode) GetDelete() bool { return v.Delete }

// DeleteNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type DeleteNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
	Delete   bool    `json:"Delete"`
}

// GetTypename returns DeleteNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// GetDelete returns DeleteNodeGetNodeWebhookNode.Delete, and is useful for accessing the field via an interface.
func (v *DeleteNodeGetNodeWebhookNode) GetDelete() bool { return v.Delete }

// DeleteNodeResponse is returned by DeleteNode on success.
type DeleteNodeResponse struct {
	GetNode *DeleteNodeGetNode `json:"-"`
}

// GetGetNode returns DeleteNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *DeleteNodeResponse) GetGetNode() *DeleteNodeGetNode { return v.GetNode }

func (v *DeleteNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*DeleteNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.DeleteNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(DeleteNodeGetNode)
			err = __unmarshalDeleteNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal DeleteNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalDeleteNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *DeleteNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *DeleteNodeResponse) __premarshalJSON() (*__premarshalDeleteNodeResponse, error) {
	var retval __premarshalDeleteNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalDeleteNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal DeleteNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

type LogLevel string

const (
	LogLevelDebug   LogLevel = "DEBUG"
	LogLevelError   LogLevel = "ERROR"
	LogLevelInfo    LogLevel = "INFO"
	LogLevelWarning LogLevel = "WARNING"
)

type MountInput struct {
	Source *string `json:"source"`
	Target string  `json:"target"`
}

// GetSource returns MountInput.Source, and is useful for accessing the field via an interface.
func (v *MountInput) GetSource() *string { return v.Source }

// GetTarget returns MountInput.Target, and is useful for accessing the field via an interface.
func (v *MountInput) GetTarget() string { return v.Target }

type MountRequirementInput struct {
	Description string  `json:"description"`
	Source      *string `json:"source"`
	Target      string  `json:"target"`
}

// GetDescription returns MountRequirementInput.Description, and is useful for accessing the field via an interface.
func (v *MountRequirementInput) GetDescription() string { return v.Description }

// GetSource returns MountRequirementInput.Source, and is useful for accessing the field via an interface.
func (v *MountRequirementInput) GetSource() *string { return v.Source }

// GetTarget returns MountRequirementInput.Target, and is useful for accessing the field via an interface.
func (v *MountRequirementInput) GetTarget() string { return v.Target }

type PortInput struct {
	ContainerPort int      `json:"containerPort"`
	HostAddress   *string  `json:"hostAddress"`
	HostPort      int      `json:"hostPort"`
	Protocol      Protocol `json:"protocol"`
}

// GetContainerPort returns PortInput.ContainerPort, and is useful for accessing the field via an interface.
func (v *PortInput) GetContainerPort() int { return v.ContainerPort }

// GetHostAddress returns PortInput.HostAddress, and is useful for accessing the field via an interface.
func (v *PortInput) GetHostAddress() *string { return v.HostAddress }

// GetHostPort returns PortInput.HostPort, and is useful for accessing the field via an interface.
func (v *PortInput) GetHostPort() int { return v.HostPort }

// GetProtocol returns PortInput.Protocol, and is useful for accessing the field via an interface.
func (v *PortInput) GetProtocol() Protocol { return v.Protocol }

type PortRequirementInput struct {
	ContainerPort int      `json:"containerPort"`
	Description   string   `json:"description"`
	Protocol      Protocol `json:"protocol"`
}

// GetContainerPort returns PortRequirementInput.ContainerPort, and is useful for accessing the field via an interface.
func (v *PortRequirementInput) GetContainerPort() int { return v.ContainerPort }

// GetDescription returns PortRequirementInput.Description, and is useful for accessing the field via an interface.
func (v *PortRequirementInput) GetDescription() string { return v.Description }

// GetProtocol returns PortRequirementInput.Protocol, and is useful for accessing the field via an interface.
func (v *PortRequirementInput) GetProtocol() Protocol { return v.Protocol }

type Protocol string

const (
	ProtocolSctp Protocol = "sctp"
	ProtocolTcp  Protocol = "tcp"
	ProtocolUdp  Protocol = "udp"
)

// ReadAppGetApp includes the requested fields of the GraphQL interface App.
//
// ReadAppGetApp is implemented by the following types:
// ReadAppGetAppCrossAccountApp
// ReadAppGetAppCrossTenantReceivingApp
// ReadAppGetAppCrossTenantSendingApp
// ReadAppGetAppExternalApp
// ReadAppGetAppManagedApp
type ReadAppGetApp interface {
	implementsGraphQLInterfaceReadAppGetApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	appFields
}

func (v *ReadAppGetAppCrossAccountApp) implementsGraphQLInterfaceReadAppGetApp()         {}
func (v *ReadAppGetAppCrossTenantReceivingApp) implementsGraphQLInterfaceReadAppGetApp() {}
func (v *ReadAppGetAppCrossTenantSendingApp) implementsGraphQLInterfaceReadAppGetApp()   {}
func (v *ReadAppGetAppExternalApp) implementsGraphQLInterfaceReadAppGetApp()             {}
func (v *ReadAppGetAppManagedApp) implementsGraphQLInterfaceReadAppGetApp()              {}

func __unmarshalReadAppGetApp(b []byte, v *ReadAppGetApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(ReadAppGetAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(ReadAppGetAppCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(ReadAppGetAppCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(ReadAppGetAppExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(ReadAppGetAppManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReadAppGetApp: "%v"`, tn.TypeName)
	}
}

func __marshalReadAppGetApp(v *ReadAppGetApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReadAppGetAppCrossAccountApp:
		typename = "CrossAccountApp"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadAppGetAppCrossAccountApp
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadAppGetAppCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadAppGetAppCrossTenantReceivingApp
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadAppGetAppCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadAppGetAppCrossTenantSendingApp
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadAppGetAppExternalApp:
		typename = "ExternalApp"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadAppGetAppExternalApp
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadAppGetAppManagedApp:
		typename = "ManagedApp"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadAppGetAppManagedApp
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReadAppGetApp: "%T"`, v)
	}
}

// ReadAppGetAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type ReadAppGetAppCrossAccountApp struct {
	Typename                 *string `json:"__typename"`
	appFieldsCrossAccountApp `json:"-"`
	crossAccountAppFields    `json:"-"`
}

// GetTypename returns ReadAppGetAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetTypename() *string { return v.Typename }

// GetDescription returns ReadAppGetAppCrossAccountApp.Description, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetDescription() *string {
	return v.appFieldsCrossAccountApp.Description
}

// GetName returns ReadAppGetAppCrossAccountApp.Name, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetName() string { return v.appFieldsCrossAccountApp.Name }

// GetAccount returns ReadAppGetAppCrossAccountApp.Account, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetAccount() string { return v.crossAccountAppFields.Account }

// GetAppsyncEndpoint returns ReadAppGetAppCrossAccountApp.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetAppsyncEndpoint() string {
	return v.crossAccountAppFields.AppsyncEndpoint
}

// GetAuditRecordsEndpoint returns ReadAppGetAppCrossAccountApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetAuditRecordsEndpoint() string {
	return v.crossAccountAppFields.AuditRecordsEndpoint
}

// GetConfig returns ReadAppGetAppCrossAccountApp.Config, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetConfig() *string { return v.crossAccountAppFields.Config }

// GetCredentials returns ReadAppGetAppCrossAccountApp.Credentials, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetCredentials() crossAccountAppFieldsCredentialsCognitoCredentials {
	return v.crossAccountAppFields.Credentials
}

// GetIamPolicy returns ReadAppGetAppCrossAccountApp.IamPolicy, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetIamPolicy() string {
	return v.crossAccountAppFields.IamPolicy
}

// GetTableAccess returns ReadAppGetAppCrossAccountApp.TableAccess, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossAccountApp) GetTableAccess() bool {
	return v.crossAccountAppFields.TableAccess
}

func (v *ReadAppGetAppCrossAccountApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadAppGetAppCrossAccountApp
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadAppGetAppCrossAccountApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossAccountApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossAccountAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadAppGetAppCrossAccountApp struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	Account string `json:"account"`

	AppsyncEndpoint string `json:"appsyncEndpoint"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials crossAccountAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	IamPolicy string `json:"iamPolicy"`

	TableAccess bool `json:"tableAccess"`
}

func (v *ReadAppGetAppCrossAccountApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadAppGetAppCrossAccountApp) __premarshalJSON() (*__premarshalReadAppGetAppCrossAccountApp, error) {
	var retval __premarshalReadAppGetAppCrossAccountApp

	retval.Typename = v.Typename
	retval.Description = v.appFieldsCrossAccountApp.Description
	retval.Name = v.appFieldsCrossAccountApp.Name
	retval.Account = v.crossAccountAppFields.Account
	retval.AppsyncEndpoint = v.crossAccountAppFields.AppsyncEndpoint
	retval.AuditRecordsEndpoint = v.crossAccountAppFields.AuditRecordsEndpoint
	retval.Config = v.crossAccountAppFields.Config
	retval.Credentials = v.crossAccountAppFields.Credentials
	retval.IamPolicy = v.crossAccountAppFields.IamPolicy
	retval.TableAccess = v.crossAccountAppFields.TableAccess
	return &retval, nil
}

// ReadAppGetAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type ReadAppGetAppCrossTenantReceivingApp struct {
	Typename                         *string `json:"__typename"`
	appFieldsCrossTenantReceivingApp `json:"-"`
	crossTenantReceivingAppFields    `json:"-"`
}

// GetTypename returns ReadAppGetAppCrossTenantReceivingApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantReceivingApp) GetTypename() *string { return v.Typename }

// GetDescription returns ReadAppGetAppCrossTenantReceivingApp.Description, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantReceivingApp) GetDescription() *string {
	return v.appFieldsCrossTenantReceivingApp.Description
}

// GetName returns ReadAppGetAppCrossTenantReceivingApp.Name, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantReceivingApp) GetName() string {
	return v.appFieldsCrossTenantReceivingApp.Name
}

// GetSendingApp returns ReadAppGetAppCrossTenantReceivingApp.SendingApp, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantReceivingApp) GetSendingApp() *string {
	return v.crossTenantReceivingAppFields.SendingApp
}

// GetSendingTenant returns ReadAppGetAppCrossTenantReceivingApp.SendingTenant, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantReceivingApp) GetSendingTenant() string {
	return v.crossTenantReceivingAppFields.SendingTenant
}

func (v *ReadAppGetAppCrossTenantReceivingApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadAppGetAppCrossTenantReceivingApp
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadAppGetAppCrossTenantReceivingApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossTenantReceivingApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantReceivingAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadAppGetAppCrossTenantReceivingApp struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	SendingApp *string `json:"sendingApp"`

	SendingTenant string `json:"sendingTenant"`
}

func (v *ReadAppGetAppCrossTenantReceivingApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadAppGetAppCrossTenantReceivingApp) __premarshalJSON() (*__premarshalReadAppGetAppCrossTenantReceivingApp, error) {
	var retval __premarshalReadAppGetAppCrossTenantReceivingApp

	retval.Typename = v.Typename
	retval.Description = v.appFieldsCrossTenantReceivingApp.Description
	retval.Name = v.appFieldsCrossTenantReceivingApp.Name
	retval.SendingApp = v.crossTenantReceivingAppFields.SendingApp
	retval.SendingTenant = v.crossTenantReceivingAppFields.SendingTenant
	return &retval, nil
}

// ReadAppGetAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type ReadAppGetAppCrossTenantSendingApp struct {
	Typename                       *string `json:"__typename"`
	appFieldsCrossTenantSendingApp `json:"-"`
	crossTenantSendingAppFields    `json:"-"`
}

// GetTypename returns ReadAppGetAppCrossTenantSendingApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantSendingApp) GetTypename() *string { return v.Typename }

// GetDescription returns ReadAppGetAppCrossTenantSendingApp.Description, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantSendingApp) GetDescription() *string {
	return v.appFieldsCrossTenantSendingApp.Description
}

// GetName returns ReadAppGetAppCrossTenantSendingApp.Name, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantSendingApp) GetName() string {
	return v.appFieldsCrossTenantSendingApp.Name
}

// GetReceivingApp returns ReadAppGetAppCrossTenantSendingApp.ReceivingApp, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantSendingApp) GetReceivingApp() string {
	return v.crossTenantSendingAppFields.ReceivingApp
}

// GetReceivingTenant returns ReadAppGetAppCrossTenantSendingApp.ReceivingTenant, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppCrossTenantSendingApp) GetReceivingTenant() string {
	return v.crossTenantSendingAppFields.ReceivingTenant
}

func (v *ReadAppGetAppCrossTenantSendingApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadAppGetAppCrossTenantSendingApp
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadAppGetAppCrossTenantSendingApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossTenantSendingApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantSendingAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadAppGetAppCrossTenantSendingApp struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	ReceivingApp string `json:"receivingApp"`

	ReceivingTenant string `json:"receivingTenant"`
}

func (v *ReadAppGetAppCrossTenantSendingApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadAppGetAppCrossTenantSendingApp) __premarshalJSON() (*__premarshalReadAppGetAppCrossTenantSendingApp, error) {
	var retval __premarshalReadAppGetAppCrossTenantSendingApp

	retval.Typename = v.Typename
	retval.Description = v.appFieldsCrossTenantSendingApp.Description
	retval.Name = v.appFieldsCrossTenantSendingApp.Name
	retval.ReceivingApp = v.crossTenantSendingAppFields.ReceivingApp
	retval.ReceivingTenant = v.crossTenantSendingAppFields.ReceivingTenant
	return &retval, nil
}

// ReadAppGetAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type ReadAppGetAppExternalApp struct {
	Typename             *string `json:"__typename"`
	appFieldsExternalApp `json:"-"`
	externalAppFields    `json:"-"`
}

// GetTypename returns ReadAppGetAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetTypename() *string { return v.Typename }

// GetDescription returns ReadAppGetAppExternalApp.Description, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetDescription() *string {
	return v.appFieldsExternalApp.Description
}

// GetName returns ReadAppGetAppExternalApp.Name, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetName() string { return v.appFieldsExternalApp.Name }

// GetAppsyncEndpoint returns ReadAppGetAppExternalApp.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetAppsyncEndpoint() string {
	return v.externalAppFields.AppsyncEndpoint
}

// GetAuditRecordsEndpoint returns ReadAppGetAppExternalApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetAuditRecordsEndpoint() string {
	return v.externalAppFields.AuditRecordsEndpoint
}

// GetConfig returns ReadAppGetAppExternalApp.Config, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetConfig() *string { return v.externalAppFields.Config }

// GetCredentials returns ReadAppGetAppExternalApp.Credentials, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetCredentials() externalAppFieldsCredentialsCognitoCredentials {
	return v.externalAppFields.Credentials
}

// GetTableAccess returns ReadAppGetAppExternalApp.TableAccess, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppExternalApp) GetTableAccess() bool { return v.externalAppFields.TableAccess }

func (v *ReadAppGetAppExternalApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadAppGetAppExternalApp
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadAppGetAppExternalApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsExternalApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.externalAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadAppGetAppExternalApp struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	AppsyncEndpoint string `json:"appsyncEndpoint"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials externalAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	TableAccess bool `json:"tableAccess"`
}

func (v *ReadAppGetAppExternalApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadAppGetAppExternalApp) __premarshalJSON() (*__premarshalReadAppGetAppExternalApp, error) {
	var retval __premarshalReadAppGetAppExternalApp

	retval.Typename = v.Typename
	retval.Description = v.appFieldsExternalApp.Description
	retval.Name = v.appFieldsExternalApp.Name
	retval.AppsyncEndpoint = v.externalAppFields.AppsyncEndpoint
	retval.AuditRecordsEndpoint = v.externalAppFields.AuditRecordsEndpoint
	retval.Config = v.externalAppFields.Config
	retval.Credentials = v.externalAppFields.Credentials
	retval.TableAccess = v.externalAppFields.TableAccess
	return &retval, nil
}

// ReadAppGetAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type ReadAppGetAppManagedApp struct {
	Typename            *string `json:"__typename"`
	appFieldsManagedApp `json:"-"`
	managedAppFields    `json:"-"`
}

// GetTypename returns ReadAppGetAppManagedApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppManagedApp) GetTypename() *string { return v.Typename }

// GetDescription returns ReadAppGetAppManagedApp.Description, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppManagedApp) GetDescription() *string { return v.appFieldsManagedApp.Description }

// GetName returns ReadAppGetAppManagedApp.Name, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppManagedApp) GetName() string { return v.appFieldsManagedApp.Name }

// GetAuditRecordsEndpoint returns ReadAppGetAppManagedApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppManagedApp) GetAuditRecordsEndpoint() string {
	return v.managedAppFields.AuditRecordsEndpoint
}

// GetConfig returns ReadAppGetAppManagedApp.Config, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppManagedApp) GetConfig() *string { return v.managedAppFields.Config }

// GetCredentials returns ReadAppGetAppManagedApp.Credentials, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppManagedApp) GetCredentials() managedAppFieldsCredentialsCognitoCredentials {
	return v.managedAppFields.Credentials
}

// GetTableAccess returns ReadAppGetAppManagedApp.TableAccess, and is useful for accessing the field via an interface.
func (v *ReadAppGetAppManagedApp) GetTableAccess() bool { return v.managedAppFields.TableAccess }

func (v *ReadAppGetAppManagedApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadAppGetAppManagedApp
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadAppGetAppManagedApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsManagedApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.managedAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadAppGetAppManagedApp struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials managedAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	TableAccess bool `json:"tableAccess"`
}

func (v *ReadAppGetAppManagedApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadAppGetAppManagedApp) __premarshalJSON() (*__premarshalReadAppGetAppManagedApp, error) {
	var retval __premarshalReadAppGetAppManagedApp

	retval.Typename = v.Typename
	retval.Description = v.appFieldsManagedApp.Description
	retval.Name = v.appFieldsManagedApp.Name
	retval.AuditRecordsEndpoint = v.managedAppFields.AuditRecordsEndpoint
	retval.Config = v.managedAppFields.Config
	retval.Credentials = v.managedAppFields.Credentials
	retval.TableAccess = v.managedAppFields.TableAccess
	return &retval, nil
}

// ReadAppResponse is returned by ReadApp on success.
type ReadAppResponse struct {
	GetApp *ReadAppGetApp `json:"-"`
}

// GetGetApp returns ReadAppResponse.GetApp, and is useful for accessing the field via an interface.
func (v *ReadAppResponse) GetGetApp() *ReadAppGetApp { return v.GetApp }

func (v *ReadAppResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadAppResponse
		GetApp json.RawMessage `json:"GetApp"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadAppResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetApp
		src := firstPass.GetApp
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ReadAppGetApp)
			err = __unmarshalReadAppGetApp(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ReadAppResponse.GetApp: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReadAppResponse struct {
	GetApp json.RawMessage `json:"GetApp"`
}

func (v *ReadAppResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadAppResponse) __premarshalJSON() (*__premarshalReadAppResponse, error) {
	var retval __premarshalReadAppResponse

	{

		dst := &retval.GetApp
		src := v.GetApp
		if src != nil {
			var err error
			*dst, err = __marshalReadAppGetApp(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReadAppResponse.GetApp: %w", err)
			}
		}
	}
	return &retval, nil
}

// ReadFunctionGetFunction includes the requested fields of the GraphQL interface Function.
//
// ReadFunctionGetFunction is implemented by the following types:
// ReadFunctionGetFunctionApiAuthenticatorFunction
// ReadFunctionGetFunctionBitmapperFunction
// ReadFunctionGetFunctionProcessorFunction
type ReadFunctionGetFunction interface {
	implementsGraphQLInterfaceReadFunctionGetFunction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	functionFields
}

func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) implementsGraphQLInterfaceReadFunctionGetFunction() {
}
func (v *ReadFunctionGetFunctionBitmapperFunction) implementsGraphQLInterfaceReadFunctionGetFunction() {
}
func (v *ReadFunctionGetFunctionProcessorFunction) implementsGraphQLInterfaceReadFunctionGetFunction() {
}

func __unmarshalReadFunctionGetFunction(b []byte, v *ReadFunctionGetFunction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAuthenticatorFunction":
		*v = new(ReadFunctionGetFunctionApiAuthenticatorFunction)
		return json.Unmarshal(b, *v)
	case "BitmapperFunction":
		*v = new(ReadFunctionGetFunctionBitmapperFunction)
		return json.Unmarshal(b, *v)
	case "ProcessorFunction":
		*v = new(ReadFunctionGetFunctionProcessorFunction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Function.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReadFunctionGetFunction: "%v"`, tn.TypeName)
	}
}

func __marshalReadFunctionGetFunction(v *ReadFunctionGetFunction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReadFunctionGetFunctionApiAuthenticatorFunction:
		typename = "ApiAuthenticatorFunction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadFunctionGetFunctionApiAuthenticatorFunction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadFunctionGetFunctionBitmapperFunction:
		typename = "BitmapperFunction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadFunctionGetFunctionBitmapperFunction
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadFunctionGetFunctionProcessorFunction:
		typename = "ProcessorFunction"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadFunctionGetFunctionProcessorFunction
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReadFunctionGetFunction: "%T"`, v)
	}
}

// ReadFunctionGetFunctionApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type ReadFunctionGetFunctionApiAuthenticatorFunction struct {
	Typename                               *string `json:"__typename"`
	functionFieldsApiAuthenticatorFunction `json:"-"`
}

// GetTypename returns ReadFunctionGetFunctionApiAuthenticatorFunction.Typename, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetTypename() *string { return v.Typename }

// GetCode returns ReadFunctionGetFunctionApiAuthenticatorFunction.Code, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetCode() string {
	return v.functionFieldsApiAuthenticatorFunction.Code
}

// GetDescription returns ReadFunctionGetFunctionApiAuthenticatorFunction.Description, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetDescription() string {
	return v.functionFieldsApiAuthenticatorFunction.Description
}

// GetInUse returns ReadFunctionGetFunctionApiAuthenticatorFunction.InUse, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetInUse() bool {
	return v.functionFieldsApiAuthenticatorFunction.InUse
}

// GetName returns ReadFunctionGetFunctionApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetName() string {
	return v.functionFieldsApiAuthenticatorFunction.Name
}

// GetReadme returns ReadFunctionGetFunctionApiAuthenticatorFunction.Readme, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetReadme() *string {
	return v.functionFieldsApiAuthenticatorFunction.Readme
}

// GetRequirements returns ReadFunctionGetFunctionApiAuthenticatorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetRequirements() []string {
	return v.functionFieldsApiAuthenticatorFunction.Requirements
}

// GetSystem returns ReadFunctionGetFunctionApiAuthenticatorFunction.System, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) GetSystem() *bool {
	return v.functionFieldsApiAuthenticatorFunction.System
}

func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadFunctionGetFunctionApiAuthenticatorFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadFunctionGetFunctionApiAuthenticatorFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsApiAuthenticatorFunction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadFunctionGetFunctionApiAuthenticatorFunction struct {
	Typename *string `json:"__typename"`

	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`
}

func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadFunctionGetFunctionApiAuthenticatorFunction) __premarshalJSON() (*__premarshalReadFunctionGetFunctionApiAuthenticatorFunction, error) {
	var retval __premarshalReadFunctionGetFunctionApiAuthenticatorFunction

	retval.Typename = v.Typename
	retval.Code = v.functionFieldsApiAuthenticatorFunction.Code
	retval.Description = v.functionFieldsApiAuthenticatorFunction.Description
	retval.InUse = v.functionFieldsApiAuthenticatorFunction.InUse
	retval.Name = v.functionFieldsApiAuthenticatorFunction.Name
	retval.Readme = v.functionFieldsApiAuthenticatorFunction.Readme
	retval.Requirements = v.functionFieldsApiAuthenticatorFunction.Requirements
	retval.System = v.functionFieldsApiAuthenticatorFunction.System
	return &retval, nil
}

// ReadFunctionGetFunctionBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type ReadFunctionGetFunctionBitmapperFunction struct {
	Typename                        *string `json:"__typename"`
	functionFieldsBitmapperFunction `json:"-"`
	bitmapperFunctionFields         `json:"-"`
}

// GetTypename returns ReadFunctionGetFunctionBitmapperFunction.Typename, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetTypename() *string { return v.Typename }

// GetCode returns ReadFunctionGetFunctionBitmapperFunction.Code, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetCode() string {
	return v.functionFieldsBitmapperFunction.Code
}

// GetDescription returns ReadFunctionGetFunctionBitmapperFunction.Description, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetDescription() string {
	return v.functionFieldsBitmapperFunction.Description
}

// GetInUse returns ReadFunctionGetFunctionBitmapperFunction.InUse, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetInUse() bool {
	return v.functionFieldsBitmapperFunction.InUse
}

// GetName returns ReadFunctionGetFunctionBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetName() string {
	return v.functionFieldsBitmapperFunction.Name
}

// GetReadme returns ReadFunctionGetFunctionBitmapperFunction.Readme, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetReadme() *string {
	return v.functionFieldsBitmapperFunction.Readme
}

// GetRequirements returns ReadFunctionGetFunctionBitmapperFunction.Requirements, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetRequirements() []string {
	return v.functionFieldsBitmapperFunction.Requirements
}

// GetSystem returns ReadFunctionGetFunctionBitmapperFunction.System, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetSystem() *bool {
	return v.functionFieldsBitmapperFunction.System
}

// GetArgumentMessageType returns ReadFunctionGetFunctionBitmapperFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionBitmapperFunction) GetArgumentMessageType() bitmapperFunctionFieldsArgumentMessageType {
	return v.bitmapperFunctionFields.ArgumentMessageType
}

func (v *ReadFunctionGetFunctionBitmapperFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadFunctionGetFunctionBitmapperFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadFunctionGetFunctionBitmapperFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsBitmapperFunction)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.bitmapperFunctionFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadFunctionGetFunctionBitmapperFunction struct {
	Typename *string `json:"__typename"`

	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`

	ArgumentMessageType bitmapperFunctionFieldsArgumentMessageType `json:"argumentMessageType"`
}

func (v *ReadFunctionGetFunctionBitmapperFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadFunctionGetFunctionBitmapperFunction) __premarshalJSON() (*__premarshalReadFunctionGetFunctionBitmapperFunction, error) {
	var retval __premarshalReadFunctionGetFunctionBitmapperFunction

	retval.Typename = v.Typename
	retval.Code = v.functionFieldsBitmapperFunction.Code
	retval.Description = v.functionFieldsBitmapperFunction.Description
	retval.InUse = v.functionFieldsBitmapperFunction.InUse
	retval.Name = v.functionFieldsBitmapperFunction.Name
	retval.Readme = v.functionFieldsBitmapperFunction.Readme
	retval.Requirements = v.functionFieldsBitmapperFunction.Requirements
	retval.System = v.functionFieldsBitmapperFunction.System
	retval.ArgumentMessageType = v.bitmapperFunctionFields.ArgumentMessageType
	return &retval, nil
}

// ReadFunctionGetFunctionProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type ReadFunctionGetFunctionProcessorFunction struct {
	Typename                        *string `json:"__typename"`
	functionFieldsProcessorFunction `json:"-"`
	processorFunctionFields         `json:"-"`
}

// GetTypename returns ReadFunctionGetFunctionProcessorFunction.Typename, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetTypename() *string { return v.Typename }

// GetCode returns ReadFunctionGetFunctionProcessorFunction.Code, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetCode() string {
	return v.functionFieldsProcessorFunction.Code
}

// GetDescription returns ReadFunctionGetFunctionProcessorFunction.Description, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetDescription() string {
	return v.functionFieldsProcessorFunction.Description
}

// GetInUse returns ReadFunctionGetFunctionProcessorFunction.InUse, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetInUse() bool {
	return v.functionFieldsProcessorFunction.InUse
}

// GetName returns ReadFunctionGetFunctionProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetName() string {
	return v.functionFieldsProcessorFunction.Name
}

// GetReadme returns ReadFunctionGetFunctionProcessorFunction.Readme, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetReadme() *string {
	return v.functionFieldsProcessorFunction.Readme
}

// GetRequirements returns ReadFunctionGetFunctionProcessorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetRequirements() []string {
	return v.functionFieldsProcessorFunction.Requirements
}

// GetSystem returns ReadFunctionGetFunctionProcessorFunction.System, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetSystem() *bool {
	return v.functionFieldsProcessorFunction.System
}

// GetArgumentMessageType returns ReadFunctionGetFunctionProcessorFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetArgumentMessageType() processorFunctionFieldsArgumentMessageType {
	return v.processorFunctionFields.ArgumentMessageType
}

// GetReturnMessageType returns ReadFunctionGetFunctionProcessorFunction.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *ReadFunctionGetFunctionProcessorFunction) GetReturnMessageType() *processorFunctionFieldsReturnMessageType {
	return v.processorFunctionFields.ReturnMessageType
}

func (v *ReadFunctionGetFunctionProcessorFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadFunctionGetFunctionProcessorFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadFunctionGetFunctionProcessorFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsProcessorFunction)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.processorFunctionFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadFunctionGetFunctionProcessorFunction struct {
	Typename *string `json:"__typename"`

	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`

	ArgumentMessageType processorFunctionFieldsArgumentMessageType `json:"argumentMessageType"`

	ReturnMessageType *processorFunctionFieldsReturnMessageType `json:"returnMessageType"`
}

func (v *ReadFunctionGetFunctionProcessorFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadFunctionGetFunctionProcessorFunction) __premarshalJSON() (*__premarshalReadFunctionGetFunctionProcessorFunction, error) {
	var retval __premarshalReadFunctionGetFunctionProcessorFunction

	retval.Typename = v.Typename
	retval.Code = v.functionFieldsProcessorFunction.Code
	retval.Description = v.functionFieldsProcessorFunction.Description
	retval.InUse = v.functionFieldsProcessorFunction.InUse
	retval.Name = v.functionFieldsProcessorFunction.Name
	retval.Readme = v.functionFieldsProcessorFunction.Readme
	retval.Requirements = v.functionFieldsProcessorFunction.Requirements
	retval.System = v.functionFieldsProcessorFunction.System
	retval.ArgumentMessageType = v.processorFunctionFields.ArgumentMessageType
	retval.ReturnMessageType = v.processorFunctionFields.ReturnMessageType
	return &retval, nil
}

// ReadFunctionResponse is returned by ReadFunction on success.
type ReadFunctionResponse struct {
	GetFunction *ReadFunctionGetFunction `json:"-"`
}

// GetGetFunction returns ReadFunctionResponse.GetFunction, and is useful for accessing the field via an interface.
func (v *ReadFunctionResponse) GetGetFunction() *ReadFunctionGetFunction { return v.GetFunction }

func (v *ReadFunctionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadFunctionResponse
		GetFunction json.RawMessage `json:"GetFunction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadFunctionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetFunction
		src := firstPass.GetFunction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ReadFunctionGetFunction)
			err = __unmarshalReadFunctionGetFunction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ReadFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReadFunctionResponse struct {
	GetFunction json.RawMessage `json:"GetFunction"`
}

func (v *ReadFunctionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadFunctionResponse) __premarshalJSON() (*__premarshalReadFunctionResponse, error) {
	var retval __premarshalReadFunctionResponse

	{

		dst := &retval.GetFunction
		src := v.GetFunction
		if src != nil {
			var err error
			*dst, err = __marshalReadFunctionGetFunction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReadFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return &retval, nil
}

// ReadKmsKeyGetKmsKey includes the requested fields of the GraphQL type KmsKey.
type ReadKmsKeyGetKmsKey struct {
	kmsKeyFields `json:"-"`
}

// GetArn returns ReadKmsKeyGetKmsKey.Arn, and is useful for accessing the field via an interface.
func (v *ReadKmsKeyGetKmsKey) GetArn() string { return v.kmsKeyFields.Arn }

// GetDescription returns ReadKmsKeyGetKmsKey.Description, and is useful for accessing the field via an interface.
func (v *ReadKmsKeyGetKmsKey) GetDescription() *string { return v.kmsKeyFields.Description }

// GetInUse returns ReadKmsKeyGetKmsKey.InUse, and is useful for accessing the field via an interface.
func (v *ReadKmsKeyGetKmsKey) GetInUse() bool { return v.kmsKeyFields.InUse }

// GetName returns ReadKmsKeyGetKmsKey.Name, and is useful for accessing the field via an interface.
func (v *ReadKmsKeyGetKmsKey) GetName() string { return v.kmsKeyFields.Name }

func (v *ReadKmsKeyGetKmsKey) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadKmsKeyGetKmsKey
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadKmsKeyGetKmsKey = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.kmsKeyFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadKmsKeyGetKmsKey struct {
	Arn string `json:"arn"`

	Description *string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`
}

func (v *ReadKmsKeyGetKmsKey) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadKmsKeyGetKmsKey) __premarshalJSON() (*__premarshalReadKmsKeyGetKmsKey, error) {
	var retval __premarshalReadKmsKeyGetKmsKey

	retval.Arn = v.kmsKeyFields.Arn
	retval.Description = v.kmsKeyFields.Description
	retval.InUse = v.kmsKeyFields.InUse
	retval.Name = v.kmsKeyFields.Name
	return &retval, nil
}

// ReadKmsKeyResponse is returned by ReadKmsKey on success.
type ReadKmsKeyResponse struct {
	GetKmsKey *ReadKmsKeyGetKmsKey `json:"GetKmsKey"`
}

// GetGetKmsKey returns ReadKmsKeyResponse.GetKmsKey, and is useful for accessing the field via an interface.
func (v *ReadKmsKeyResponse) GetGetKmsKey() *ReadKmsKeyGetKmsKey { return v.GetKmsKey }

// ReadManagedAppIsoGetApp includes the requested fields of the GraphQL interface App.
//
// ReadManagedAppIsoGetApp is implemented by the following types:
// ReadManagedAppIsoGetAppCrossAccountApp
// ReadManagedAppIsoGetAppCrossTenantReceivingApp
// ReadManagedAppIsoGetAppCrossTenantSendingApp
// ReadManagedAppIsoGetAppExternalApp
// ReadManagedAppIsoGetAppManagedApp
type ReadManagedAppIsoGetApp interface {
	implementsGraphQLInterfaceReadManagedAppIsoGetApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ReadManagedAppIsoGetAppCrossAccountApp) implementsGraphQLInterfaceReadManagedAppIsoGetApp() {
}
func (v *ReadManagedAppIsoGetAppCrossTenantReceivingApp) implementsGraphQLInterfaceReadManagedAppIsoGetApp() {
}
func (v *ReadManagedAppIsoGetAppCrossTenantSendingApp) implementsGraphQLInterfaceReadManagedAppIsoGetApp() {
}
func (v *ReadManagedAppIsoGetAppExternalApp) implementsGraphQLInterfaceReadManagedAppIsoGetApp() {}
func (v *ReadManagedAppIsoGetAppManagedApp) implementsGraphQLInterfaceReadManagedAppIsoGetApp()  {}

func __unmarshalReadManagedAppIsoGetApp(b []byte, v *ReadManagedAppIsoGetApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(ReadManagedAppIsoGetAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(ReadManagedAppIsoGetAppCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(ReadManagedAppIsoGetAppCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(ReadManagedAppIsoGetAppExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(ReadManagedAppIsoGetAppManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReadManagedAppIsoGetApp: "%v"`, tn.TypeName)
	}
}

func __marshalReadManagedAppIsoGetApp(v *ReadManagedAppIsoGetApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReadManagedAppIsoGetAppCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppIsoGetAppCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppIsoGetAppCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppIsoGetAppCrossTenantReceivingApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppIsoGetAppCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppIsoGetAppCrossTenantSendingApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppIsoGetAppExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppIsoGetAppExternalApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppIsoGetAppManagedApp:
		typename = "ManagedApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppIsoGetAppManagedApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReadManagedAppIsoGetApp: "%T"`, v)
	}
}

// ReadManagedAppIsoGetAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type ReadManagedAppIsoGetAppCrossAccountApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppIsoGetAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppIsoGetAppCrossAccountApp) GetTypename() *string { return v.Typename }

// ReadManagedAppIsoGetAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type ReadManagedAppIsoGetAppCrossTenantReceivingApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppIsoGetAppCrossTenantReceivingApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppIsoGetAppCrossTenantReceivingApp) GetTypename() *string { return v.Typename }

// ReadManagedAppIsoGetAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type ReadManagedAppIsoGetAppCrossTenantSendingApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppIsoGetAppCrossTenantSendingApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppIsoGetAppCrossTenantSendingApp) GetTypename() *string { return v.Typename }

// ReadManagedAppIsoGetAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type ReadManagedAppIsoGetAppExternalApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppIsoGetAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppIsoGetAppExternalApp) GetTypename() *string { return v.Typename }

// ReadManagedAppIsoGetAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type ReadManagedAppIsoGetAppManagedApp struct {
	Typename *string `json:"__typename"`
	Iso      string  `json:"iso"`
}

// GetTypename returns ReadManagedAppIsoGetAppManagedApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppIsoGetAppManagedApp) GetTypename() *string { return v.Typename }

// GetIso returns ReadManagedAppIsoGetAppManagedApp.Iso, and is useful for accessing the field via an interface.
func (v *ReadManagedAppIsoGetAppManagedApp) GetIso() string { return v.Iso }

// ReadManagedAppIsoResponse is returned by ReadManagedAppIso on success.
type ReadManagedAppIsoResponse struct {
	GetApp *ReadManagedAppIsoGetApp `json:"-"`
}

// GetGetApp returns ReadManagedAppIsoResponse.GetApp, and is useful for accessing the field via an interface.
func (v *ReadManagedAppIsoResponse) GetGetApp() *ReadManagedAppIsoGetApp { return v.GetApp }

func (v *ReadManagedAppIsoResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadManagedAppIsoResponse
		GetApp json.RawMessage `json:"GetApp"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadManagedAppIsoResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetApp
		src := firstPass.GetApp
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ReadManagedAppIsoGetApp)
			err = __unmarshalReadManagedAppIsoGetApp(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ReadManagedAppIsoResponse.GetApp: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReadManagedAppIsoResponse struct {
	GetApp json.RawMessage `json:"GetApp"`
}

func (v *ReadManagedAppIsoResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadManagedAppIsoResponse) __premarshalJSON() (*__premarshalReadManagedAppIsoResponse, error) {
	var retval __premarshalReadManagedAppIsoResponse

	{

		dst := &retval.GetApp
		src := v.GetApp
		if src != nil {
			var err error
			*dst, err = __marshalReadManagedAppIsoGetApp(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReadManagedAppIsoResponse.GetApp: %w", err)
			}
		}
	}
	return &retval, nil
}

// ReadManagedAppUserdataGetApp includes the requested fields of the GraphQL interface App.
//
// ReadManagedAppUserdataGetApp is implemented by the following types:
// ReadManagedAppUserdataGetAppCrossAccountApp
// ReadManagedAppUserdataGetAppCrossTenantReceivingApp
// ReadManagedAppUserdataGetAppCrossTenantSendingApp
// ReadManagedAppUserdataGetAppExternalApp
// ReadManagedAppUserdataGetAppManagedApp
type ReadManagedAppUserdataGetApp interface {
	implementsGraphQLInterfaceReadManagedAppUserdataGetApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *ReadManagedAppUserdataGetAppCrossAccountApp) implementsGraphQLInterfaceReadManagedAppUserdataGetApp() {
}
func (v *ReadManagedAppUserdataGetAppCrossTenantReceivingApp) implementsGraphQLInterfaceReadManagedAppUserdataGetApp() {
}
func (v *ReadManagedAppUserdataGetAppCrossTenantSendingApp) implementsGraphQLInterfaceReadManagedAppUserdataGetApp() {
}
func (v *ReadManagedAppUserdataGetAppExternalApp) implementsGraphQLInterfaceReadManagedAppUserdataGetApp() {
}
func (v *ReadManagedAppUserdataGetAppManagedApp) implementsGraphQLInterfaceReadManagedAppUserdataGetApp() {
}

func __unmarshalReadManagedAppUserdataGetApp(b []byte, v *ReadManagedAppUserdataGetApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(ReadManagedAppUserdataGetAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(ReadManagedAppUserdataGetAppCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(ReadManagedAppUserdataGetAppCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(ReadManagedAppUserdataGetAppExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(ReadManagedAppUserdataGetAppManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReadManagedAppUserdataGetApp: "%v"`, tn.TypeName)
	}
}

func __marshalReadManagedAppUserdataGetApp(v *ReadManagedAppUserdataGetApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReadManagedAppUserdataGetAppCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppUserdataGetAppCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppUserdataGetAppCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppUserdataGetAppCrossTenantReceivingApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppUserdataGetAppCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppUserdataGetAppCrossTenantSendingApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppUserdataGetAppExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppUserdataGetAppExternalApp
		}{typename, v}
		return json.Marshal(result)
	case *ReadManagedAppUserdataGetAppManagedApp:
		typename = "ManagedApp"

		result := struct {
			TypeName string `json:"__typename"`
			*ReadManagedAppUserdataGetAppManagedApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReadManagedAppUserdataGetApp: "%T"`, v)
	}
}

// ReadManagedAppUserdataGetAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type ReadManagedAppUserdataGetAppCrossAccountApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppUserdataGetAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppUserdataGetAppCrossAccountApp) GetTypename() *string { return v.Typename }

// ReadManagedAppUserdataGetAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type ReadManagedAppUserdataGetAppCrossTenantReceivingApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppUserdataGetAppCrossTenantReceivingApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppUserdataGetAppCrossTenantReceivingApp) GetTypename() *string {
	return v.Typename
}

// ReadManagedAppUserdataGetAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type ReadManagedAppUserdataGetAppCrossTenantSendingApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppUserdataGetAppCrossTenantSendingApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppUserdataGetAppCrossTenantSendingApp) GetTypename() *string { return v.Typename }

// ReadManagedAppUserdataGetAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type ReadManagedAppUserdataGetAppExternalApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns ReadManagedAppUserdataGetAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppUserdataGetAppExternalApp) GetTypename() *string { return v.Typename }

// ReadManagedAppUserdataGetAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type ReadManagedAppUserdataGetAppManagedApp struct {
	Typename *string `json:"__typename"`
	Userdata string  `json:"userdata"`
}

// GetTypename returns ReadManagedAppUserdataGetAppManagedApp.Typename, and is useful for accessing the field via an interface.
func (v *ReadManagedAppUserdataGetAppManagedApp) GetTypename() *string { return v.Typename }

// GetUserdata returns ReadManagedAppUserdataGetAppManagedApp.Userdata, and is useful for accessing the field via an interface.
func (v *ReadManagedAppUserdataGetAppManagedApp) GetUserdata() string { return v.Userdata }

// ReadManagedAppUserdataResponse is returned by ReadManagedAppUserdata on success.
type ReadManagedAppUserdataResponse struct {
	GetApp *ReadManagedAppUserdataGetApp `json:"-"`
}

// GetGetApp returns ReadManagedAppUserdataResponse.GetApp, and is useful for accessing the field via an interface.
func (v *ReadManagedAppUserdataResponse) GetGetApp() *ReadManagedAppUserdataGetApp { return v.GetApp }

func (v *ReadManagedAppUserdataResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadManagedAppUserdataResponse
		GetApp json.RawMessage `json:"GetApp"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadManagedAppUserdataResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetApp
		src := firstPass.GetApp
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ReadManagedAppUserdataGetApp)
			err = __unmarshalReadManagedAppUserdataGetApp(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ReadManagedAppUserdataResponse.GetApp: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReadManagedAppUserdataResponse struct {
	GetApp json.RawMessage `json:"GetApp"`
}

func (v *ReadManagedAppUserdataResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadManagedAppUserdataResponse) __premarshalJSON() (*__premarshalReadManagedAppUserdataResponse, error) {
	var retval __premarshalReadManagedAppUserdataResponse

	{

		dst := &retval.GetApp
		src := v.GetApp
		if src != nil {
			var err error
			*dst, err = __marshalReadManagedAppUserdataGetApp(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReadManagedAppUserdataResponse.GetApp: %w", err)
			}
		}
	}
	return &retval, nil
}

// ReadManagedNodeTypeGetManagedNodeType includes the requested fields of the GraphQL type ManagedNodeType.
type ReadManagedNodeTypeGetManagedNodeType struct {
	managedNodeTypeFields `json:"-"`
}

// GetConfigTemplate returns ReadManagedNodeTypeGetManagedNodeType.ConfigTemplate, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetConfigTemplate() *string {
	return v.managedNodeTypeFields.ConfigTemplate
}

// GetDescription returns ReadManagedNodeTypeGetManagedNodeType.Description, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetDescription() string {
	return v.managedNodeTypeFields.Description
}

// GetImageUri returns ReadManagedNodeTypeGetManagedNodeType.ImageUri, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetImageUri() string {
	return v.managedNodeTypeFields.ImageUri
}

// GetInUse returns ReadManagedNodeTypeGetManagedNodeType.InUse, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetInUse() bool { return v.managedNodeTypeFields.InUse }

// GetMountRequirements returns ReadManagedNodeTypeGetManagedNodeType.MountRequirements, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetMountRequirements() []managedNodeTypeFieldsMountRequirementsMountRequirement {
	return v.managedNodeTypeFields.MountRequirements
}

// GetName returns ReadManagedNodeTypeGetManagedNodeType.Name, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetName() string { return v.managedNodeTypeFields.Name }

// GetPortRequirements returns ReadManagedNodeTypeGetManagedNodeType.PortRequirements, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetPortRequirements() []managedNodeTypeFieldsPortRequirementsPortRequirement {
	return v.managedNodeTypeFields.PortRequirements
}

// GetReadme returns ReadManagedNodeTypeGetManagedNodeType.Readme, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetReadme() *string {
	return v.managedNodeTypeFields.Readme
}

// GetReceiveMessageType returns ReadManagedNodeTypeGetManagedNodeType.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetReceiveMessageType() *managedNodeTypeFieldsReceiveMessageType {
	return v.managedNodeTypeFields.ReceiveMessageType
}

// GetSendMessageType returns ReadManagedNodeTypeGetManagedNodeType.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetSendMessageType() *managedNodeTypeFieldsSendMessageType {
	return v.managedNodeTypeFields.SendMessageType
}

// GetSystem returns ReadManagedNodeTypeGetManagedNodeType.System, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeGetManagedNodeType) GetSystem() *bool {
	return v.managedNodeTypeFields.System
}

func (v *ReadManagedNodeTypeGetManagedNodeType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadManagedNodeTypeGetManagedNodeType
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadManagedNodeTypeGetManagedNodeType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.managedNodeTypeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadManagedNodeTypeGetManagedNodeType struct {
	ConfigTemplate *string `json:"configTemplate"`

	Description string `json:"description"`

	ImageUri string `json:"imageUri"`

	InUse bool `json:"inUse"`

	MountRequirements []managedNodeTypeFieldsMountRequirementsMountRequirement `json:"mountRequirements"`

	Name string `json:"name"`

	PortRequirements []managedNodeTypeFieldsPortRequirementsPortRequirement `json:"portRequirements"`

	Readme *string `json:"readme"`

	ReceiveMessageType *managedNodeTypeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *managedNodeTypeFieldsSendMessageType `json:"sendMessageType"`

	System *bool `json:"system"`
}

func (v *ReadManagedNodeTypeGetManagedNodeType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadManagedNodeTypeGetManagedNodeType) __premarshalJSON() (*__premarshalReadManagedNodeTypeGetManagedNodeType, error) {
	var retval __premarshalReadManagedNodeTypeGetManagedNodeType

	retval.ConfigTemplate = v.managedNodeTypeFields.ConfigTemplate
	retval.Description = v.managedNodeTypeFields.Description
	retval.ImageUri = v.managedNodeTypeFields.ImageUri
	retval.InUse = v.managedNodeTypeFields.InUse
	retval.MountRequirements = v.managedNodeTypeFields.MountRequirements
	retval.Name = v.managedNodeTypeFields.Name
	retval.PortRequirements = v.managedNodeTypeFields.PortRequirements
	retval.Readme = v.managedNodeTypeFields.Readme
	retval.ReceiveMessageType = v.managedNodeTypeFields.ReceiveMessageType
	retval.SendMessageType = v.managedNodeTypeFields.SendMessageType
	retval.System = v.managedNodeTypeFields.System
	return &retval, nil
}

// ReadManagedNodeTypeResponse is returned by ReadManagedNodeType on success.
type ReadManagedNodeTypeResponse struct {
	GetManagedNodeType *ReadManagedNodeTypeGetManagedNodeType `json:"GetManagedNodeType"`
}

// GetGetManagedNodeType returns ReadManagedNodeTypeResponse.GetManagedNodeType, and is useful for accessing the field via an interface.
func (v *ReadManagedNodeTypeResponse) GetGetManagedNodeType() *ReadManagedNodeTypeGetManagedNodeType {
	return v.GetManagedNodeType
}

// ReadMessageTypeGetMessageType includes the requested fields of the GraphQL type MessageType.
type ReadMessageTypeGetMessageType struct {
	messageTypeFields `json:"-"`
}

// GetAuditor returns ReadMessageTypeGetMessageType.Auditor, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetAuditor() string { return v.messageTypeFields.Auditor }

// GetBitmapperTemplate returns ReadMessageTypeGetMessageType.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetBitmapperTemplate() string {
	return v.messageTypeFields.BitmapperTemplate
}

// GetDescription returns ReadMessageTypeGetMessageType.Description, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetDescription() string {
	return v.messageTypeFields.Description
}

// GetInUse returns ReadMessageTypeGetMessageType.InUse, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetInUse() bool { return v.messageTypeFields.InUse }

// GetName returns ReadMessageTypeGetMessageType.Name, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetName() string { return v.messageTypeFields.Name }

// GetProcessorTemplate returns ReadMessageTypeGetMessageType.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetProcessorTemplate() string {
	return v.messageTypeFields.ProcessorTemplate
}

// GetReadme returns ReadMessageTypeGetMessageType.Readme, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetReadme() *string { return v.messageTypeFields.Readme }

// GetRequirements returns ReadMessageTypeGetMessageType.Requirements, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetRequirements() []string {
	return v.messageTypeFields.Requirements
}

// GetSampleMessage returns ReadMessageTypeGetMessageType.SampleMessage, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetSampleMessage() string {
	return v.messageTypeFields.SampleMessage
}

// GetSystem returns ReadMessageTypeGetMessageType.System, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeGetMessageType) GetSystem() *bool { return v.messageTypeFields.System }

func (v *ReadMessageTypeGetMessageType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadMessageTypeGetMessageType
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadMessageTypeGetMessageType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.messageTypeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadMessageTypeGetMessageType struct {
	Auditor string `json:"auditor"`

	BitmapperTemplate string `json:"bitmapperTemplate"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	ProcessorTemplate string `json:"processorTemplate"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	SampleMessage string `json:"sampleMessage"`

	System *bool `json:"system"`
}

func (v *ReadMessageTypeGetMessageType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadMessageTypeGetMessageType) __premarshalJSON() (*__premarshalReadMessageTypeGetMessageType, error) {
	var retval __premarshalReadMessageTypeGetMessageType

	retval.Auditor = v.messageTypeFields.Auditor
	retval.BitmapperTemplate = v.messageTypeFields.BitmapperTemplate
	retval.Description = v.messageTypeFields.Description
	retval.InUse = v.messageTypeFields.InUse
	retval.Name = v.messageTypeFields.Name
	retval.ProcessorTemplate = v.messageTypeFields.ProcessorTemplate
	retval.Readme = v.messageTypeFields.Readme
	retval.Requirements = v.messageTypeFields.Requirements
	retval.SampleMessage = v.messageTypeFields.SampleMessage
	retval.System = v.messageTypeFields.System
	return &retval, nil
}

// ReadMessageTypeResponse is returned by ReadMessageType on success.
type ReadMessageTypeResponse struct {
	GetMessageType *ReadMessageTypeGetMessageType `json:"GetMessageType"`
}

// GetGetMessageType returns ReadMessageTypeResponse.GetMessageType, and is useful for accessing the field via an interface.
func (v *ReadMessageTypeResponse) GetGetMessageType() *ReadMessageTypeGetMessageType {
	return v.GetMessageType
}

// ReadNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// ReadNodeGetNode is implemented by the following types:
// ReadNodeGetNodeAlertEmitterNode
// ReadNodeGetNodeAppChangeReceiverNode
// ReadNodeGetNodeAppChangeRouterNode
// ReadNodeGetNodeAuditEmitterNode
// ReadNodeGetNodeBitmapRouterNode
// ReadNodeGetNodeChangeEmitterNode
// ReadNodeGetNodeCrossTenantReceivingNode
// ReadNodeGetNodeCrossTenantSendingNode
// ReadNodeGetNodeDeadLetterEmitterNode
// ReadNodeGetNodeExternalNode
// ReadNodeGetNodeFilesDotComWebhookNode
// ReadNodeGetNodeLoadBalancerNode
// ReadNodeGetNodeLogEmitterNode
// ReadNodeGetNodeManagedNode
// ReadNodeGetNodeProcessorNode
// ReadNodeGetNodeTimerNode
// ReadNodeGetNodeWebhookNode
type ReadNodeGetNode interface {
	implementsGraphQLInterfaceReadNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	nodeFields
}

func (v *ReadNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceReadNodeGetNode()    {}
func (v *ReadNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceReadNodeGetNode()      {}
func (v *ReadNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()        {}
func (v *ReadNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceReadNodeGetNode() {}
func (v *ReadNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceReadNodeGetNode()   {}
func (v *ReadNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()    {}
func (v *ReadNodeGetNodeExternalNode) implementsGraphQLInterfaceReadNodeGetNode()             {}
func (v *ReadNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceReadNodeGetNode()   {}
func (v *ReadNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceReadNodeGetNode()         {}
func (v *ReadNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceReadNodeGetNode()           {}
func (v *ReadNodeGetNodeManagedNode) implementsGraphQLInterfaceReadNodeGetNode()              {}
func (v *ReadNodeGetNodeProcessorNode) implementsGraphQLInterfaceReadNodeGetNode()            {}
func (v *ReadNodeGetNodeTimerNode) implementsGraphQLInterfaceReadNodeGetNode()                {}
func (v *ReadNodeGetNodeWebhookNode) implementsGraphQLInterfaceReadNodeGetNode()              {}

func __unmarshalReadNodeGetNode(b []byte, v *ReadNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(ReadNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(ReadNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(ReadNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(ReadNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(ReadNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(ReadNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(ReadNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(ReadNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(ReadNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(ReadNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(ReadNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(ReadNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(ReadNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(ReadNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(ReadNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(ReadNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(ReadNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for ReadNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalReadNodeGetNode(v *ReadNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *ReadNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeAlertEmitterNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeAppChangeReceiverNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeAppChangeRouterNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeAuditEmitterNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeBitmapRouterNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeChangeEmitterNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeCrossTenantReceivingNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeCrossTenantSendingNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeDeadLetterEmitterNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeExternalNode:
		typename = "ExternalNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeExternalNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeFilesDotComWebhookNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeLoadBalancerNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeLogEmitterNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeManagedNode:
		typename = "ManagedNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeManagedNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeProcessorNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeTimerNode:
		typename = "TimerNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeTimerNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case *ReadNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		premarshaled, err := v.__premarshalJSON()
		if err != nil {
			return nil, err
		}
		result := struct {
			TypeName string `json:"__typename"`
			*__premarshalReadNodeGetNodeWebhookNode
		}{typename, premarshaled}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for ReadNodeGetNode: "%T"`, v)
	}
}

// ReadNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type ReadNodeGetNodeAlertEmitterNode struct {
	Typename                   *string `json:"__typename"`
	nodeFieldsAlertEmitterNode `json:"-"`
	alertEmitterNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAlertEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetDescription() *string {
	return v.nodeFieldsAlertEmitterNode.Description
}

// GetName returns ReadNodeGetNodeAlertEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetName() string { return v.nodeFieldsAlertEmitterNode.Name }

// GetSendMessageType returns ReadNodeGetNodeAlertEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAlertEmitterNode) GetSendMessageType() *alertEmitterNodeFieldsSendMessageType {
	return v.alertEmitterNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeAlertEmitterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeAlertEmitterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeAlertEmitterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsAlertEmitterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.alertEmitterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	SendMessageType *alertEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeAlertEmitterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeAlertEmitterNode) __premarshalJSON() (*__premarshalReadNodeGetNodeAlertEmitterNode, error) {
	var retval __premarshalReadNodeGetNodeAlertEmitterNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsAlertEmitterNode.Description
	retval.Name = v.nodeFieldsAlertEmitterNode.Name
	retval.SendMessageType = v.alertEmitterNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type ReadNodeGetNodeAppChangeReceiverNode struct {
	Typename                        *string `json:"__typename"`
	nodeFieldsAppChangeReceiverNode `json:"-"`
	appChangeReceiverNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAppChangeReceiverNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetDescription() *string {
	return v.nodeFieldsAppChangeReceiverNode.Description
}

// GetName returns ReadNodeGetNodeAppChangeReceiverNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetName() string {
	return v.nodeFieldsAppChangeReceiverNode.Name
}

// GetApp returns ReadNodeGetNodeAppChangeReceiverNode.App, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetApp() appChangeReceiverNodeFieldsApp {
	return v.appChangeReceiverNodeFields.App
}

// GetReceiveMessageType returns ReadNodeGetNodeAppChangeReceiverNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeReceiverNode) GetReceiveMessageType() *appChangeReceiverNodeFieldsReceiveMessageType {
	return v.appChangeReceiverNodeFields.ReceiveMessageType
}

func (v *ReadNodeGetNodeAppChangeReceiverNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeAppChangeReceiverNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeAppChangeReceiverNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsAppChangeReceiverNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.appChangeReceiverNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	App json.RawMessage `json:"app"`

	ReceiveMessageType *appChangeReceiverNodeFieldsReceiveMessageType `json:"receiveMessageType"`
}

func (v *ReadNodeGetNodeAppChangeReceiverNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeAppChangeReceiverNode) __premarshalJSON() (*__premarshalReadNodeGetNodeAppChangeReceiverNode, error) {
	var retval __premarshalReadNodeGetNodeAppChangeReceiverNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsAppChangeReceiverNode.Description
	retval.Name = v.nodeFieldsAppChangeReceiverNode.Name
	{

		dst := &retval.App
		src := v.appChangeReceiverNodeFields.App
		var err error
		*dst, err = __marshalappChangeReceiverNodeFieldsApp(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ReadNodeGetNodeAppChangeReceiverNode.appChangeReceiverNodeFields.App: %w", err)
		}
	}
	retval.ReceiveMessageType = v.appChangeReceiverNodeFields.ReceiveMessageType
	return &retval, nil
}

// ReadNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type ReadNodeGetNodeAppChangeRouterNode struct {
	Typename                      *string `json:"__typename"`
	nodeFieldsAppChangeRouterNode `json:"-"`
	appChangeRouterNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAppChangeRouterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetDescription() *string {
	return v.nodeFieldsAppChangeRouterNode.Description
}

// GetName returns ReadNodeGetNodeAppChangeRouterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetName() string {
	return v.nodeFieldsAppChangeRouterNode.Name
}

// GetReceiveMessageType returns ReadNodeGetNodeAppChangeRouterNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetReceiveMessageType() *appChangeRouterNodeFieldsReceiveMessageType {
	return v.appChangeRouterNodeFields.ReceiveMessageType
}

// GetSendMessageType returns ReadNodeGetNodeAppChangeRouterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAppChangeRouterNode) GetSendMessageType() *appChangeRouterNodeFieldsSendMessageType {
	return v.appChangeRouterNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeAppChangeRouterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeAppChangeRouterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeAppChangeRouterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsAppChangeRouterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.appChangeRouterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	ReceiveMessageType *appChangeRouterNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *appChangeRouterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeAppChangeRouterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeAppChangeRouterNode) __premarshalJSON() (*__premarshalReadNodeGetNodeAppChangeRouterNode, error) {
	var retval __premarshalReadNodeGetNodeAppChangeRouterNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsAppChangeRouterNode.Description
	retval.Name = v.nodeFieldsAppChangeRouterNode.Name
	retval.ReceiveMessageType = v.appChangeRouterNodeFields.ReceiveMessageType
	retval.SendMessageType = v.appChangeRouterNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type ReadNodeGetNodeAuditEmitterNode struct {
	Typename                   *string `json:"__typename"`
	nodeFieldsAuditEmitterNode `json:"-"`
	auditEmitterNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeAuditEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetDescription() *string {
	return v.nodeFieldsAuditEmitterNode.Description
}

// GetName returns ReadNodeGetNodeAuditEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetName() string { return v.nodeFieldsAuditEmitterNode.Name }

// GetSendMessageType returns ReadNodeGetNodeAuditEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeAuditEmitterNode) GetSendMessageType() *auditEmitterNodeFieldsSendMessageType {
	return v.auditEmitterNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeAuditEmitterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeAuditEmitterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeAuditEmitterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsAuditEmitterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.auditEmitterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	SendMessageType *auditEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeAuditEmitterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeAuditEmitterNode) __premarshalJSON() (*__premarshalReadNodeGetNodeAuditEmitterNode, error) {
	var retval __premarshalReadNodeGetNodeAuditEmitterNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsAuditEmitterNode.Description
	retval.Name = v.nodeFieldsAuditEmitterNode.Name
	retval.SendMessageType = v.auditEmitterNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type ReadNodeGetNodeBitmapRouterNode struct {
	Typename                   *string `json:"__typename"`
	nodeFieldsBitmapRouterNode `json:"-"`
	bitmapRouterNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeBitmapRouterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetDescription() *string {
	return v.nodeFieldsBitmapRouterNode.Description
}

// GetName returns ReadNodeGetNodeBitmapRouterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetName() string { return v.nodeFieldsBitmapRouterNode.Name }

// GetInlineBitmapper returns ReadNodeGetNodeBitmapRouterNode.InlineBitmapper, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetInlineBitmapper() *string {
	return v.bitmapRouterNodeFields.InlineBitmapper
}

// GetLoggingLevel returns ReadNodeGetNodeBitmapRouterNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetLoggingLevel() *LogLevel {
	return v.bitmapRouterNodeFields.LoggingLevel
}

// GetManagedBitmapper returns ReadNodeGetNodeBitmapRouterNode.ManagedBitmapper, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetManagedBitmapper() *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction {
	return v.bitmapRouterNodeFields.ManagedBitmapper
}

// GetReceiveMessageType returns ReadNodeGetNodeBitmapRouterNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetReceiveMessageType() *bitmapRouterNodeFieldsReceiveMessageType {
	return v.bitmapRouterNodeFields.ReceiveMessageType
}

// GetRequirements returns ReadNodeGetNodeBitmapRouterNode.Requirements, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetRequirements() []string {
	return v.bitmapRouterNodeFields.Requirements
}

// GetSendMessageType returns ReadNodeGetNodeBitmapRouterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeBitmapRouterNode) GetSendMessageType() *bitmapRouterNodeFieldsSendMessageType {
	return v.bitmapRouterNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeBitmapRouterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeBitmapRouterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeBitmapRouterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsBitmapRouterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.bitmapRouterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	InlineBitmapper *string `json:"inlineBitmapper"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedBitmapper *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction `json:"managedBitmapper"`

	ReceiveMessageType *bitmapRouterNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *bitmapRouterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeBitmapRouterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeBitmapRouterNode) __premarshalJSON() (*__premarshalReadNodeGetNodeBitmapRouterNode, error) {
	var retval __premarshalReadNodeGetNodeBitmapRouterNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsBitmapRouterNode.Description
	retval.Name = v.nodeFieldsBitmapRouterNode.Name
	retval.InlineBitmapper = v.bitmapRouterNodeFields.InlineBitmapper
	retval.LoggingLevel = v.bitmapRouterNodeFields.LoggingLevel
	retval.ManagedBitmapper = v.bitmapRouterNodeFields.ManagedBitmapper
	retval.ReceiveMessageType = v.bitmapRouterNodeFields.ReceiveMessageType
	retval.Requirements = v.bitmapRouterNodeFields.Requirements
	retval.SendMessageType = v.bitmapRouterNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type ReadNodeGetNodeChangeEmitterNode struct {
	Typename                    *string `json:"__typename"`
	nodeFieldsChangeEmitterNode `json:"-"`
	changeEmitterNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeChangeEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetDescription() *string {
	return v.nodeFieldsChangeEmitterNode.Description
}

// GetName returns ReadNodeGetNodeChangeEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetName() string {
	return v.nodeFieldsChangeEmitterNode.Name
}

// GetSendMessageType returns ReadNodeGetNodeChangeEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeChangeEmitterNode) GetSendMessageType() *changeEmitterNodeFieldsSendMessageType {
	return v.changeEmitterNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeChangeEmitterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeChangeEmitterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeChangeEmitterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsChangeEmitterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.changeEmitterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	SendMessageType *changeEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeChangeEmitterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeChangeEmitterNode) __premarshalJSON() (*__premarshalReadNodeGetNodeChangeEmitterNode, error) {
	var retval __premarshalReadNodeGetNodeChangeEmitterNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsChangeEmitterNode.Description
	retval.Name = v.nodeFieldsChangeEmitterNode.Name
	retval.SendMessageType = v.changeEmitterNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type ReadNodeGetNodeCrossTenantReceivingNode struct {
	Typename                           *string `json:"__typename"`
	nodeFieldsCrossTenantReceivingNode `json:"-"`
	crossTenantReceivingNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeCrossTenantReceivingNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetDescription() *string {
	return v.nodeFieldsCrossTenantReceivingNode.Description
}

// GetName returns ReadNodeGetNodeCrossTenantReceivingNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetName() string {
	return v.nodeFieldsCrossTenantReceivingNode.Name
}

// GetApp returns ReadNodeGetNodeCrossTenantReceivingNode.App, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetApp() crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp {
	return v.crossTenantReceivingNodeFields.App
}

// GetSendMessageType returns ReadNodeGetNodeCrossTenantReceivingNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantReceivingNode) GetSendMessageType() *crossTenantReceivingNodeFieldsSendMessageType {
	return v.crossTenantReceivingNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeCrossTenantReceivingNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeCrossTenantReceivingNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeCrossTenantReceivingNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsCrossTenantReceivingNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantReceivingNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	App crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp `json:"app"`

	SendMessageType *crossTenantReceivingNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeCrossTenantReceivingNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeCrossTenantReceivingNode) __premarshalJSON() (*__premarshalReadNodeGetNodeCrossTenantReceivingNode, error) {
	var retval __premarshalReadNodeGetNodeCrossTenantReceivingNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsCrossTenantReceivingNode.Description
	retval.Name = v.nodeFieldsCrossTenantReceivingNode.Name
	retval.App = v.crossTenantReceivingNodeFields.App
	retval.SendMessageType = v.crossTenantReceivingNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type ReadNodeGetNodeCrossTenantSendingNode struct {
	Typename                         *string `json:"__typename"`
	nodeFieldsCrossTenantSendingNode `json:"-"`
	crossTenantSendingNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeCrossTenantSendingNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetDescription() *string {
	return v.nodeFieldsCrossTenantSendingNode.Description
}

// GetName returns ReadNodeGetNodeCrossTenantSendingNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetName() string {
	return v.nodeFieldsCrossTenantSendingNode.Name
}

// GetApp returns ReadNodeGetNodeCrossTenantSendingNode.App, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetApp() crossTenantSendingNodeFieldsAppCrossTenantSendingApp {
	return v.crossTenantSendingNodeFields.App
}

// GetInlineProcessor returns ReadNodeGetNodeCrossTenantSendingNode.InlineProcessor, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetInlineProcessor() *string {
	return v.crossTenantSendingNodeFields.InlineProcessor
}

// GetLoggingLevel returns ReadNodeGetNodeCrossTenantSendingNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetLoggingLevel() *LogLevel {
	return v.crossTenantSendingNodeFields.LoggingLevel
}

// GetManagedProcessor returns ReadNodeGetNodeCrossTenantSendingNode.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetManagedProcessor() *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction {
	return v.crossTenantSendingNodeFields.ManagedProcessor
}

// GetReceiveMessageType returns ReadNodeGetNodeCrossTenantSendingNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetReceiveMessageType() *crossTenantSendingNodeFieldsReceiveMessageType {
	return v.crossTenantSendingNodeFields.ReceiveMessageType
}

// GetRequirements returns ReadNodeGetNodeCrossTenantSendingNode.Requirements, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetRequirements() []string {
	return v.crossTenantSendingNodeFields.Requirements
}

// GetSendMessageType returns ReadNodeGetNodeCrossTenantSendingNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetSendMessageType() *crossTenantSendingNodeFieldsSendMessageType {
	return v.crossTenantSendingNodeFields.SendMessageType
}

// GetSequentialProcessing returns ReadNodeGetNodeCrossTenantSendingNode.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeCrossTenantSendingNode) GetSequentialProcessing() *bool {
	return v.crossTenantSendingNodeFields.SequentialProcessing
}

func (v *ReadNodeGetNodeCrossTenantSendingNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeCrossTenantSendingNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeCrossTenantSendingNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsCrossTenantSendingNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantSendingNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	App crossTenantSendingNodeFieldsAppCrossTenantSendingApp `json:"app"`

	InlineProcessor *string `json:"inlineProcessor"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedProcessor *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`

	ReceiveMessageType *crossTenantSendingNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *crossTenantSendingNodeFieldsSendMessageType `json:"sendMessageType"`

	SequentialProcessing *bool `json:"sequentialProcessing"`
}

func (v *ReadNodeGetNodeCrossTenantSendingNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeCrossTenantSendingNode) __premarshalJSON() (*__premarshalReadNodeGetNodeCrossTenantSendingNode, error) {
	var retval __premarshalReadNodeGetNodeCrossTenantSendingNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsCrossTenantSendingNode.Description
	retval.Name = v.nodeFieldsCrossTenantSendingNode.Name
	retval.App = v.crossTenantSendingNodeFields.App
	retval.InlineProcessor = v.crossTenantSendingNodeFields.InlineProcessor
	retval.LoggingLevel = v.crossTenantSendingNodeFields.LoggingLevel
	retval.ManagedProcessor = v.crossTenantSendingNodeFields.ManagedProcessor
	retval.ReceiveMessageType = v.crossTenantSendingNodeFields.ReceiveMessageType
	retval.Requirements = v.crossTenantSendingNodeFields.Requirements
	retval.SendMessageType = v.crossTenantSendingNodeFields.SendMessageType
	retval.SequentialProcessing = v.crossTenantSendingNodeFields.SequentialProcessing
	return &retval, nil
}

// ReadNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type ReadNodeGetNodeDeadLetterEmitterNode struct {
	Typename                        *string `json:"__typename"`
	nodeFieldsDeadLetterEmitterNode `json:"-"`
	deadLetterEmitterNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeDeadLetterEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeDeadLetterEmitterNode) GetDescription() *string {
	return v.nodeFieldsDeadLetterEmitterNode.Description
}

// GetName returns ReadNodeGetNodeDeadLetterEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeDeadLetterEmitterNode) GetName() string {
	return v.nodeFieldsDeadLetterEmitterNode.Name
}

// GetSendMessageType returns ReadNodeGetNodeDeadLetterEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeDeadLetterEmitterNode) GetSendMessageType() *deadLetterEmitterNodeFieldsSendMessageType {
	return v.deadLetterEmitterNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeDeadLetterEmitterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeDeadLetterEmitterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeDeadLetterEmitterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsDeadLetterEmitterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.deadLetterEmitterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	SendMessageType *deadLetterEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeDeadLetterEmitterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeDeadLetterEmitterNode) __premarshalJSON() (*__premarshalReadNodeGetNodeDeadLetterEmitterNode, error) {
	var retval __premarshalReadNodeGetNodeDeadLetterEmitterNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsDeadLetterEmitterNode.Description
	retval.Name = v.nodeFieldsDeadLetterEmitterNode.Name
	retval.SendMessageType = v.deadLetterEmitterNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type ReadNodeGetNodeExternalNode struct {
	Typename               *string `json:"__typename"`
	nodeFieldsExternalNode `json:"-"`
	externalNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeExternalNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetDescription() *string {
	return v.nodeFieldsExternalNode.Description
}

// GetName returns ReadNodeGetNodeExternalNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetName() string { return v.nodeFieldsExternalNode.Name }

// GetApp returns ReadNodeGetNodeExternalNode.App, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetApp() externalNodeFieldsAppRemoteApp {
	return v.externalNodeFields.App
}

// GetConfig returns ReadNodeGetNodeExternalNode.Config, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetConfig() *string { return v.externalNodeFields.Config }

// GetReceiveMessageType returns ReadNodeGetNodeExternalNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetReceiveMessageType() *externalNodeFieldsReceiveMessageType {
	return v.externalNodeFields.ReceiveMessageType
}

// GetSendMessageType returns ReadNodeGetNodeExternalNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeExternalNode) GetSendMessageType() *externalNodeFieldsSendMessageType {
	return v.externalNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeExternalNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeExternalNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeExternalNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsExternalNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.externalNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	App json.RawMessage `json:"app"`

	Config *string `json:"config"`

	ReceiveMessageType *externalNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *externalNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeExternalNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeExternalNode) __premarshalJSON() (*__premarshalReadNodeGetNodeExternalNode, error) {
	var retval __premarshalReadNodeGetNodeExternalNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsExternalNode.Description
	retval.Name = v.nodeFieldsExternalNode.Name
	{

		dst := &retval.App
		src := v.externalNodeFields.App
		var err error
		*dst, err = __marshalexternalNodeFieldsAppRemoteApp(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal ReadNodeGetNodeExternalNode.externalNodeFields.App: %w", err)
		}
	}
	retval.Config = v.externalNodeFields.Config
	retval.ReceiveMessageType = v.externalNodeFields.ReceiveMessageType
	retval.SendMessageType = v.externalNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type ReadNodeGetNodeFilesDotComWebhookNode struct {
	Typename                         *string `json:"__typename"`
	nodeFieldsFilesDotComWebhookNode `json:"-"`
	filesDotComWebhookNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeFilesDotComWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetDescription() *string {
	return v.nodeFieldsFilesDotComWebhookNode.Description
}

// GetName returns ReadNodeGetNodeFilesDotComWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetName() string {
	return v.nodeFieldsFilesDotComWebhookNode.Name
}

// GetEndpoint returns ReadNodeGetNodeFilesDotComWebhookNode.Endpoint, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetEndpoint() string {
	return v.filesDotComWebhookNodeFields.Endpoint
}

// GetSendMessageType returns ReadNodeGetNodeFilesDotComWebhookNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeFilesDotComWebhookNode) GetSendMessageType() *filesDotComWebhookNodeFieldsSendMessageType {
	return v.filesDotComWebhookNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeFilesDotComWebhookNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeFilesDotComWebhookNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeFilesDotComWebhookNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsFilesDotComWebhookNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.filesDotComWebhookNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	Endpoint string `json:"endpoint"`

	SendMessageType *filesDotComWebhookNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeFilesDotComWebhookNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeFilesDotComWebhookNode) __premarshalJSON() (*__premarshalReadNodeGetNodeFilesDotComWebhookNode, error) {
	var retval __premarshalReadNodeGetNodeFilesDotComWebhookNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsFilesDotComWebhookNode.Description
	retval.Name = v.nodeFieldsFilesDotComWebhookNode.Name
	retval.Endpoint = v.filesDotComWebhookNodeFields.Endpoint
	retval.SendMessageType = v.filesDotComWebhookNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type ReadNodeGetNodeLoadBalancerNode struct {
	Typename                   *string `json:"__typename"`
	nodeFieldsLoadBalancerNode `json:"-"`
	loadBalancerNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeLoadBalancerNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetDescription() *string {
	return v.nodeFieldsLoadBalancerNode.Description
}

// GetName returns ReadNodeGetNodeLoadBalancerNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetName() string { return v.nodeFieldsLoadBalancerNode.Name }

// GetReceiveMessageType returns ReadNodeGetNodeLoadBalancerNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetReceiveMessageType() *loadBalancerNodeFieldsReceiveMessageType {
	return v.loadBalancerNodeFields.ReceiveMessageType
}

// GetSendMessageType returns ReadNodeGetNodeLoadBalancerNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLoadBalancerNode) GetSendMessageType() *loadBalancerNodeFieldsSendMessageType {
	return v.loadBalancerNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeLoadBalancerNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeLoadBalancerNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeLoadBalancerNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsLoadBalancerNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.loadBalancerNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	ReceiveMessageType *loadBalancerNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *loadBalancerNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeLoadBalancerNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeLoadBalancerNode) __premarshalJSON() (*__premarshalReadNodeGetNodeLoadBalancerNode, error) {
	var retval __premarshalReadNodeGetNodeLoadBalancerNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsLoadBalancerNode.Description
	retval.Name = v.nodeFieldsLoadBalancerNode.Name
	retval.ReceiveMessageType = v.loadBalancerNodeFields.ReceiveMessageType
	retval.SendMessageType = v.loadBalancerNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type ReadNodeGetNodeLogEmitterNode struct {
	Typename                 *string `json:"__typename"`
	nodeFieldsLogEmitterNode `json:"-"`
	logEmitterNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeLogEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLogEmitterNode) GetDescription() *string {
	return v.nodeFieldsLogEmitterNode.Description
}

// GetName returns ReadNodeGetNodeLogEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLogEmitterNode) GetName() string { return v.nodeFieldsLogEmitterNode.Name }

// GetSendMessageType returns ReadNodeGetNodeLogEmitterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeLogEmitterNode) GetSendMessageType() *logEmitterNodeFieldsSendMessageType {
	return v.logEmitterNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeLogEmitterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeLogEmitterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeLogEmitterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsLogEmitterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.logEmitterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	SendMessageType *logEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeLogEmitterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeLogEmitterNode) __premarshalJSON() (*__premarshalReadNodeGetNodeLogEmitterNode, error) {
	var retval __premarshalReadNodeGetNodeLogEmitterNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsLogEmitterNode.Description
	retval.Name = v.nodeFieldsLogEmitterNode.Name
	retval.SendMessageType = v.logEmitterNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type ReadNodeGetNodeManagedNode struct {
	Typename              *string `json:"__typename"`
	nodeFieldsManagedNode `json:"-"`
	managedNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeManagedNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetDescription() *string {
	return v.nodeFieldsManagedNode.Description
}

// GetName returns ReadNodeGetNodeManagedNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetName() string { return v.nodeFieldsManagedNode.Name }

// GetApp returns ReadNodeGetNodeManagedNode.App, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetApp() managedNodeFieldsAppManagedApp {
	return v.managedNodeFields.App
}

// GetConfig returns ReadNodeGetNodeManagedNode.Config, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetConfig() *string { return v.managedNodeFields.Config }

// GetLoggingLevel returns ReadNodeGetNodeManagedNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetLoggingLevel() *LogLevel {
	return v.managedNodeFields.LoggingLevel
}

// GetManagedNodeType returns ReadNodeGetNodeManagedNode.ManagedNodeType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetManagedNodeType() managedNodeFieldsManagedNodeType {
	return v.managedNodeFields.ManagedNodeType
}

// GetMounts returns ReadNodeGetNodeManagedNode.Mounts, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetMounts() []managedNodeFieldsMountsMount {
	return v.managedNodeFields.Mounts
}

// GetPorts returns ReadNodeGetNodeManagedNode.Ports, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetPorts() []managedNodeFieldsPortsPort {
	return v.managedNodeFields.Ports
}

// GetReceiveMessageType returns ReadNodeGetNodeManagedNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetReceiveMessageType() *managedNodeFieldsReceiveMessageType {
	return v.managedNodeFields.ReceiveMessageType
}

// GetSendMessageType returns ReadNodeGetNodeManagedNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeManagedNode) GetSendMessageType() *managedNodeFieldsSendMessageType {
	return v.managedNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeManagedNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeManagedNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeManagedNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsManagedNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.managedNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	App managedNodeFieldsAppManagedApp `json:"app"`

	Config *string `json:"config"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedNodeType managedNodeFieldsManagedNodeType `json:"managedNodeType"`

	Mounts []managedNodeFieldsMountsMount `json:"mounts"`

	Ports []managedNodeFieldsPortsPort `json:"ports"`

	ReceiveMessageType *managedNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *managedNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeManagedNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeManagedNode) __premarshalJSON() (*__premarshalReadNodeGetNodeManagedNode, error) {
	var retval __premarshalReadNodeGetNodeManagedNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsManagedNode.Description
	retval.Name = v.nodeFieldsManagedNode.Name
	retval.App = v.managedNodeFields.App
	retval.Config = v.managedNodeFields.Config
	retval.LoggingLevel = v.managedNodeFields.LoggingLevel
	retval.ManagedNodeType = v.managedNodeFields.ManagedNodeType
	retval.Mounts = v.managedNodeFields.Mounts
	retval.Ports = v.managedNodeFields.Ports
	retval.ReceiveMessageType = v.managedNodeFields.ReceiveMessageType
	retval.SendMessageType = v.managedNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type ReadNodeGetNodeProcessorNode struct {
	Typename                *string `json:"__typename"`
	nodeFieldsProcessorNode `json:"-"`
	processorNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeProcessorNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetDescription() *string {
	return v.nodeFieldsProcessorNode.Description
}

// GetName returns ReadNodeGetNodeProcessorNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetName() string { return v.nodeFieldsProcessorNode.Name }

// GetConfig returns ReadNodeGetNodeProcessorNode.Config, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetConfig() *string { return v.processorNodeFields.Config }

// GetInlineProcessor returns ReadNodeGetNodeProcessorNode.InlineProcessor, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetInlineProcessor() *string {
	return v.processorNodeFields.InlineProcessor
}

// GetLoggingLevel returns ReadNodeGetNodeProcessorNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetLoggingLevel() *LogLevel {
	return v.processorNodeFields.LoggingLevel
}

// GetManagedProcessor returns ReadNodeGetNodeProcessorNode.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetManagedProcessor() *processorNodeFieldsManagedProcessorProcessorFunction {
	return v.processorNodeFields.ManagedProcessor
}

// GetReceiveMessageType returns ReadNodeGetNodeProcessorNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetReceiveMessageType() *processorNodeFieldsReceiveMessageType {
	return v.processorNodeFields.ReceiveMessageType
}

// GetRequirements returns ReadNodeGetNodeProcessorNode.Requirements, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetRequirements() []string {
	return v.processorNodeFields.Requirements
}

// GetSendMessageType returns ReadNodeGetNodeProcessorNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetSendMessageType() *processorNodeFieldsSendMessageType {
	return v.processorNodeFields.SendMessageType
}

// GetSequentialProcessing returns ReadNodeGetNodeProcessorNode.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeProcessorNode) GetSequentialProcessing() *bool {
	return v.processorNodeFields.SequentialProcessing
}

func (v *ReadNodeGetNodeProcessorNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeProcessorNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeProcessorNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsProcessorNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.processorNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	Config *string `json:"config"`

	InlineProcessor *string `json:"inlineProcessor"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedProcessor *processorNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`

	ReceiveMessageType *processorNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *processorNodeFieldsSendMessageType `json:"sendMessageType"`

	SequentialProcessing *bool `json:"sequentialProcessing"`
}

func (v *ReadNodeGetNodeProcessorNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeProcessorNode) __premarshalJSON() (*__premarshalReadNodeGetNodeProcessorNode, error) {
	var retval __premarshalReadNodeGetNodeProcessorNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsProcessorNode.Description
	retval.Name = v.nodeFieldsProcessorNode.Name
	retval.Config = v.processorNodeFields.Config
	retval.InlineProcessor = v.processorNodeFields.InlineProcessor
	retval.LoggingLevel = v.processorNodeFields.LoggingLevel
	retval.ManagedProcessor = v.processorNodeFields.ManagedProcessor
	retval.ReceiveMessageType = v.processorNodeFields.ReceiveMessageType
	retval.Requirements = v.processorNodeFields.Requirements
	retval.SendMessageType = v.processorNodeFields.SendMessageType
	retval.SequentialProcessing = v.processorNodeFields.SequentialProcessing
	return &retval, nil
}

// ReadNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type ReadNodeGetNodeTimerNode struct {
	Typename            *string `json:"__typename"`
	nodeFieldsTimerNode `json:"-"`
	timerNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeTimerNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetDescription() *string { return v.nodeFieldsTimerNode.Description }

// GetName returns ReadNodeGetNodeTimerNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetName() string { return v.nodeFieldsTimerNode.Name }

// GetScheduleExpression returns ReadNodeGetNodeTimerNode.ScheduleExpression, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetScheduleExpression() string {
	return v.timerNodeFields.ScheduleExpression
}

// GetSendMessageType returns ReadNodeGetNodeTimerNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeTimerNode) GetSendMessageType() *timerNodeFieldsSendMessageType {
	return v.timerNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeTimerNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeTimerNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeTimerNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsTimerNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.timerNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	ScheduleExpression string `json:"scheduleExpression"`

	SendMessageType *timerNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeTimerNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeTimerNode) __premarshalJSON() (*__premarshalReadNodeGetNodeTimerNode, error) {
	var retval __premarshalReadNodeGetNodeTimerNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsTimerNode.Description
	retval.Name = v.nodeFieldsTimerNode.Name
	retval.ScheduleExpression = v.timerNodeFields.ScheduleExpression
	retval.SendMessageType = v.timerNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type ReadNodeGetNodeWebhookNode struct {
	Typename              *string `json:"__typename"`
	nodeFieldsWebhookNode `json:"-"`
	webhookNodeFields     `json:"-"`
}

// GetTypename returns ReadNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// GetDescription returns ReadNodeGetNodeWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetDescription() *string {
	return v.nodeFieldsWebhookNode.Description
}

// GetName returns ReadNodeGetNodeWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetName() string { return v.nodeFieldsWebhookNode.Name }

// GetConfig returns ReadNodeGetNodeWebhookNode.Config, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetConfig() *string { return v.webhookNodeFields.Config }

// GetEndpoint returns ReadNodeGetNodeWebhookNode.Endpoint, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetEndpoint() string { return v.webhookNodeFields.Endpoint }

// GetInlineApiAuthenticator returns ReadNodeGetNodeWebhookNode.InlineApiAuthenticator, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetInlineApiAuthenticator() *string {
	return v.webhookNodeFields.InlineApiAuthenticator
}

// GetLoggingLevel returns ReadNodeGetNodeWebhookNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetLoggingLevel() *LogLevel {
	return v.webhookNodeFields.LoggingLevel
}

// GetManagedApiAuthenticator returns ReadNodeGetNodeWebhookNode.ManagedApiAuthenticator, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetManagedApiAuthenticator() *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction {
	return v.webhookNodeFields.ManagedApiAuthenticator
}

// GetRequirements returns ReadNodeGetNodeWebhookNode.Requirements, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetRequirements() []string {
	return v.webhookNodeFields.Requirements
}

// GetSendMessageType returns ReadNodeGetNodeWebhookNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *ReadNodeGetNodeWebhookNode) GetSendMessageType() *webhookNodeFieldsSendMessageType {
	return v.webhookNodeFields.SendMessageType
}

func (v *ReadNodeGetNodeWebhookNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeGetNodeWebhookNode
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeGetNodeWebhookNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsWebhookNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.webhookNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`

	Description *string `json:"description"`

	Name string `json:"name"`

	Config *string `json:"config"`

	Endpoint string `json:"endpoint"`

	InlineApiAuthenticator *string `json:"inlineApiAuthenticator"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedApiAuthenticator *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction `json:"managedApiAuthenticator"`

	Requirements []string `json:"requirements"`

	SendMessageType *webhookNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *ReadNodeGetNodeWebhookNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeGetNodeWebhookNode) __premarshalJSON() (*__premarshalReadNodeGetNodeWebhookNode, error) {
	var retval __premarshalReadNodeGetNodeWebhookNode

	retval.Typename = v.Typename
	retval.Description = v.nodeFieldsWebhookNode.Description
	retval.Name = v.nodeFieldsWebhookNode.Name
	retval.Config = v.webhookNodeFields.Config
	retval.Endpoint = v.webhookNodeFields.Endpoint
	retval.InlineApiAuthenticator = v.webhookNodeFields.InlineApiAuthenticator
	retval.LoggingLevel = v.webhookNodeFields.LoggingLevel
	retval.ManagedApiAuthenticator = v.webhookNodeFields.ManagedApiAuthenticator
	retval.Requirements = v.webhookNodeFields.Requirements
	retval.SendMessageType = v.webhookNodeFields.SendMessageType
	return &retval, nil
}

// ReadNodeResponse is returned by ReadNode on success.
type ReadNodeResponse struct {
	GetNode *ReadNodeGetNode `json:"-"`
}

// GetGetNode returns ReadNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *ReadNodeResponse) GetGetNode() *ReadNodeGetNode { return v.GetNode }

func (v *ReadNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(ReadNodeGetNode)
			err = __unmarshalReadNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal ReadNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalReadNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *ReadNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadNodeResponse) __premarshalJSON() (*__premarshalReadNodeResponse, error) {
	var retval __premarshalReadNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalReadNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal ReadNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// ReadTenantAwsCredentialsGetTenant includes the requested fields of the GraphQL type Tenant.
type ReadTenantAwsCredentialsGetTenant struct {
	GetAwsCredentials ReadTenantAwsCredentialsGetTenantGetAwsCredentials `json:"GetAwsCredentials"`
}

// GetGetAwsCredentials returns ReadTenantAwsCredentialsGetTenant.GetAwsCredentials, and is useful for accessing the field via an interface.
func (v *ReadTenantAwsCredentialsGetTenant) GetGetAwsCredentials() ReadTenantAwsCredentialsGetTenantGetAwsCredentials {
	return v.GetAwsCredentials
}

// ReadTenantAwsCredentialsGetTenantGetAwsCredentials includes the requested fields of the GraphQL type AwsCredentials.
type ReadTenantAwsCredentialsGetTenantGetAwsCredentials struct {
	AccessKeyId     string `json:"accessKeyId"`
	Expiration      string `json:"expiration"`
	SecretAccessKey string `json:"secretAccessKey"`
	SessionToken    string `json:"sessionToken"`
}

// GetAccessKeyId returns ReadTenantAwsCredentialsGetTenantGetAwsCredentials.AccessKeyId, and is useful for accessing the field via an interface.
func (v *ReadTenantAwsCredentialsGetTenantGetAwsCredentials) GetAccessKeyId() string {
	return v.AccessKeyId
}

// GetExpiration returns ReadTenantAwsCredentialsGetTenantGetAwsCredentials.Expiration, and is useful for accessing the field via an interface.
func (v *ReadTenantAwsCredentialsGetTenantGetAwsCredentials) GetExpiration() string {
	return v.Expiration
}

// GetSecretAccessKey returns ReadTenantAwsCredentialsGetTenantGetAwsCredentials.SecretAccessKey, and is useful for accessing the field via an interface.
func (v *ReadTenantAwsCredentialsGetTenantGetAwsCredentials) GetSecretAccessKey() string {
	return v.SecretAccessKey
}

// GetSessionToken returns ReadTenantAwsCredentialsGetTenantGetAwsCredentials.SessionToken, and is useful for accessing the field via an interface.
func (v *ReadTenantAwsCredentialsGetTenantGetAwsCredentials) GetSessionToken() string {
	return v.SessionToken
}

// ReadTenantAwsCredentialsResponse is returned by ReadTenantAwsCredentials on success.
type ReadTenantAwsCredentialsResponse struct {
	GetTenant *ReadTenantAwsCredentialsGetTenant `json:"GetTenant"`
}

// GetGetTenant returns ReadTenantAwsCredentialsResponse.GetTenant, and is useful for accessing the field via an interface.
func (v *ReadTenantAwsCredentialsResponse) GetGetTenant() *ReadTenantAwsCredentialsGetTenant {
	return v.GetTenant
}

// ReadTenantGetTenant includes the requested fields of the GraphQL type Tenant.
type ReadTenantGetTenant struct {
	tenantFields `json:"-"`
}

// GetActive returns ReadTenantGetTenant.Active, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetActive() bool { return v.tenantFields.Active }

// GetConfig returns ReadTenantGetTenant.Config, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetConfig() *string { return v.tenantFields.Config }

// GetDescription returns ReadTenantGetTenant.Description, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetDescription() *string { return v.tenantFields.Description }

// GetName returns ReadTenantGetTenant.Name, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetName() string { return v.tenantFields.Name }

// GetRegion returns ReadTenantGetTenant.Region, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetRegion() string { return v.tenantFields.Region }

// GetTable returns ReadTenantGetTenant.Table, and is useful for accessing the field via an interface.
func (v *ReadTenantGetTenant) GetTable() string { return v.tenantFields.Table }

func (v *ReadTenantGetTenant) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*ReadTenantGetTenant
		graphql.NoUnmarshalJSON
	}
	firstPass.ReadTenantGetTenant = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tenantFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalReadTenantGetTenant struct {
	Active bool `json:"active"`

	Config *string `json:"config"`

	Description *string `json:"description"`

	Name string `json:"name"`

	Region string `json:"region"`

	Table string `json:"table"`
}

func (v *ReadTenantGetTenant) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *ReadTenantGetTenant) __premarshalJSON() (*__premarshalReadTenantGetTenant, error) {
	var retval __premarshalReadTenantGetTenant

	retval.Active = v.tenantFields.Active
	retval.Config = v.tenantFields.Config
	retval.Description = v.tenantFields.Description
	retval.Name = v.tenantFields.Name
	retval.Region = v.tenantFields.Region
	retval.Table = v.tenantFields.Table
	return &retval, nil
}

// ReadTenantResponse is returned by ReadTenant on success.
type ReadTenantResponse struct {
	GetTenant *ReadTenantGetTenant `json:"GetTenant"`
}

// GetGetTenant returns ReadTenantResponse.GetTenant, and is useful for accessing the field via an interface.
func (v *ReadTenantResponse) GetGetTenant() *ReadTenantGetTenant { return v.GetTenant }

// UpdateBitmpaRouterNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateBitmpaRouterNodeGetNode is implemented by the following types:
// UpdateBitmpaRouterNodeGetNodeAlertEmitterNode
// UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode
// UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode
// UpdateBitmpaRouterNodeGetNodeAuditEmitterNode
// UpdateBitmpaRouterNodeGetNodeBitmapRouterNode
// UpdateBitmpaRouterNodeGetNodeChangeEmitterNode
// UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode
// UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode
// UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode
// UpdateBitmpaRouterNodeGetNodeExternalNode
// UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode
// UpdateBitmpaRouterNodeGetNodeLoadBalancerNode
// UpdateBitmpaRouterNodeGetNodeLogEmitterNode
// UpdateBitmpaRouterNodeGetNodeManagedNode
// UpdateBitmpaRouterNodeGetNodeProcessorNode
// UpdateBitmpaRouterNodeGetNodeTimerNode
// UpdateBitmpaRouterNodeGetNodeWebhookNode
type UpdateBitmpaRouterNodeGetNode interface {
	implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateBitmpaRouterNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}
func (v *UpdateBitmpaRouterNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateBitmpaRouterNodeGetNode() {
}

func __unmarshalUpdateBitmpaRouterNodeGetNode(b []byte, v *UpdateBitmpaRouterNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateBitmpaRouterNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateBitmpaRouterNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateBitmpaRouterNodeGetNode(v *UpdateBitmpaRouterNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateBitmpaRouterNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateBitmpaRouterNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateBitmpaRouterNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateBitmpaRouterNodeGetNode: "%T"`, v)
	}
}

// UpdateBitmpaRouterNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateBitmpaRouterNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateBitmpaRouterNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateBitmpaRouterNodeGetNodeBitmapRouterNode struct {
	Typename *string                                                             `json:"__typename"`
	Update   UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode `json:"Update"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNode) GetUpdate() UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode {
	return v.Update
}

// UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode struct {
	nodeFieldsBitmapRouterNode `json:"-"`
	bitmapRouterNodeFields     `json:"-"`
}

// GetDescription returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetDescription() *string {
	return v.nodeFieldsBitmapRouterNode.Description
}

// GetName returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetName() string {
	return v.nodeFieldsBitmapRouterNode.Name
}

// GetInlineBitmapper returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.InlineBitmapper, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetInlineBitmapper() *string {
	return v.bitmapRouterNodeFields.InlineBitmapper
}

// GetLoggingLevel returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetLoggingLevel() *LogLevel {
	return v.bitmapRouterNodeFields.LoggingLevel
}

// GetManagedBitmapper returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.ManagedBitmapper, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetManagedBitmapper() *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction {
	return v.bitmapRouterNodeFields.ManagedBitmapper
}

// GetReceiveMessageType returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetReceiveMessageType() *bitmapRouterNodeFieldsReceiveMessageType {
	return v.bitmapRouterNodeFields.ReceiveMessageType
}

// GetRequirements returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetRequirements() []string {
	return v.bitmapRouterNodeFields.Requirements
}

// GetSendMessageType returns UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) GetSendMessageType() *bitmapRouterNodeFieldsSendMessageType {
	return v.bitmapRouterNodeFields.SendMessageType
}

func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsBitmapRouterNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.bitmapRouterNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	InlineBitmapper *string `json:"inlineBitmapper"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedBitmapper *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction `json:"managedBitmapper"`

	ReceiveMessageType *bitmapRouterNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *bitmapRouterNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode) __premarshalJSON() (*__premarshalUpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode, error) {
	var retval __premarshalUpdateBitmpaRouterNodeGetNodeBitmapRouterNodeUpdateBitmapRouterNode

	retval.Description = v.nodeFieldsBitmapRouterNode.Description
	retval.Name = v.nodeFieldsBitmapRouterNode.Name
	retval.InlineBitmapper = v.bitmapRouterNodeFields.InlineBitmapper
	retval.LoggingLevel = v.bitmapRouterNodeFields.LoggingLevel
	retval.ManagedBitmapper = v.bitmapRouterNodeFields.ManagedBitmapper
	retval.ReceiveMessageType = v.bitmapRouterNodeFields.ReceiveMessageType
	retval.Requirements = v.bitmapRouterNodeFields.Requirements
	retval.SendMessageType = v.bitmapRouterNodeFields.SendMessageType
	return &retval, nil
}

// UpdateBitmpaRouterNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateBitmpaRouterNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeCrossTenantReceivingNode) GetTypename() *string {
	return v.Typename
}

// UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeCrossTenantSendingNode) GetTypename() *string {
	return v.Typename
}

// UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateBitmpaRouterNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeFilesDotComWebhookNode) GetTypename() *string {
	return v.Typename
}

// UpdateBitmpaRouterNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateBitmpaRouterNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateBitmpaRouterNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateBitmpaRouterNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateBitmpaRouterNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateBitmpaRouterNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateBitmpaRouterNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateBitmpaRouterNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateBitmpaRouterNodeResponse is returned by UpdateBitmpaRouterNode on success.
type UpdateBitmpaRouterNodeResponse struct {
	GetNode *UpdateBitmpaRouterNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateBitmpaRouterNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateBitmpaRouterNodeResponse) GetGetNode() *UpdateBitmpaRouterNodeGetNode {
	return v.GetNode
}

func (v *UpdateBitmpaRouterNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateBitmpaRouterNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateBitmpaRouterNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateBitmpaRouterNodeGetNode)
			err = __unmarshalUpdateBitmpaRouterNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateBitmpaRouterNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateBitmpaRouterNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateBitmpaRouterNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateBitmpaRouterNodeResponse) __premarshalJSON() (*__premarshalUpdateBitmpaRouterNodeResponse, error) {
	var retval __premarshalUpdateBitmpaRouterNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateBitmpaRouterNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateBitmpaRouterNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateCrossTenantAppGetApp includes the requested fields of the GraphQL interface App.
//
// UpdateCrossTenantAppGetApp is implemented by the following types:
// UpdateCrossTenantAppGetAppCrossAccountApp
// UpdateCrossTenantAppGetAppCrossTenantReceivingApp
// UpdateCrossTenantAppGetAppCrossTenantSendingApp
// UpdateCrossTenantAppGetAppExternalApp
// UpdateCrossTenantAppGetAppManagedApp
type UpdateCrossTenantAppGetApp interface {
	implementsGraphQLInterfaceUpdateCrossTenantAppGetApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateCrossTenantAppGetAppCrossAccountApp) implementsGraphQLInterfaceUpdateCrossTenantAppGetApp() {
}
func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingApp) implementsGraphQLInterfaceUpdateCrossTenantAppGetApp() {
}
func (v *UpdateCrossTenantAppGetAppCrossTenantSendingApp) implementsGraphQLInterfaceUpdateCrossTenantAppGetApp() {
}
func (v *UpdateCrossTenantAppGetAppExternalApp) implementsGraphQLInterfaceUpdateCrossTenantAppGetApp() {
}
func (v *UpdateCrossTenantAppGetAppManagedApp) implementsGraphQLInterfaceUpdateCrossTenantAppGetApp() {
}

func __unmarshalUpdateCrossTenantAppGetApp(b []byte, v *UpdateCrossTenantAppGetApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(UpdateCrossTenantAppGetAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(UpdateCrossTenantAppGetAppCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(UpdateCrossTenantAppGetAppCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(UpdateCrossTenantAppGetAppExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(UpdateCrossTenantAppGetAppManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateCrossTenantAppGetApp: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateCrossTenantAppGetApp(v *UpdateCrossTenantAppGetApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateCrossTenantAppGetAppCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantAppGetAppCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantAppGetAppCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantAppGetAppCrossTenantReceivingApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantAppGetAppCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantAppGetAppCrossTenantSendingApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantAppGetAppExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantAppGetAppExternalApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantAppGetAppManagedApp:
		typename = "ManagedApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantAppGetAppManagedApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateCrossTenantAppGetApp: "%T"`, v)
	}
}

// UpdateCrossTenantAppGetAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type UpdateCrossTenantAppGetAppCrossAccountApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantAppGetAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossAccountApp) GetTypename() *string { return v.Typename }

// UpdateCrossTenantAppGetAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type UpdateCrossTenantAppGetAppCrossTenantReceivingApp struct {
	Typename *string                                                                        `json:"__typename"`
	Update   UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp `json:"Update"`
}

// GetTypename returns UpdateCrossTenantAppGetAppCrossTenantReceivingApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingApp) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateCrossTenantAppGetAppCrossTenantReceivingApp.Update, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingApp) GetUpdate() UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp {
	return v.Update
}

// UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp struct {
	appFieldsCrossTenantReceivingApp `json:"-"`
	crossTenantReceivingAppFields    `json:"-"`
}

// GetDescription returns UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp.Description, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp) GetDescription() *string {
	return v.appFieldsCrossTenantReceivingApp.Description
}

// GetName returns UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp.Name, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp) GetName() string {
	return v.appFieldsCrossTenantReceivingApp.Name
}

// GetSendingApp returns UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp.SendingApp, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp) GetSendingApp() *string {
	return v.crossTenantReceivingAppFields.SendingApp
}

// GetSendingTenant returns UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp.SendingTenant, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp) GetSendingTenant() string {
	return v.crossTenantReceivingAppFields.SendingTenant
}

func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossTenantReceivingApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantReceivingAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	SendingApp *string `json:"sendingApp"`

	SendingTenant string `json:"sendingTenant"`
}

func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp) __premarshalJSON() (*__premarshalUpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp, error) {
	var retval __premarshalUpdateCrossTenantAppGetAppCrossTenantReceivingAppUpdateCrossTenantReceivingApp

	retval.Description = v.appFieldsCrossTenantReceivingApp.Description
	retval.Name = v.appFieldsCrossTenantReceivingApp.Name
	retval.SendingApp = v.crossTenantReceivingAppFields.SendingApp
	retval.SendingTenant = v.crossTenantReceivingAppFields.SendingTenant
	return &retval, nil
}

// UpdateCrossTenantAppGetAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type UpdateCrossTenantAppGetAppCrossTenantSendingApp struct {
	Typename *string                                                                    `json:"__typename"`
	Update   UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp `json:"Update"`
}

// GetTypename returns UpdateCrossTenantAppGetAppCrossTenantSendingApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantSendingApp) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateCrossTenantAppGetAppCrossTenantSendingApp.Update, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantSendingApp) GetUpdate() UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp {
	return v.Update
}

// UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp struct {
	appFieldsCrossTenantSendingApp `json:"-"`
	crossTenantSendingAppFields    `json:"-"`
}

// GetDescription returns UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp.Description, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp) GetDescription() *string {
	return v.appFieldsCrossTenantSendingApp.Description
}

// GetName returns UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp.Name, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp) GetName() string {
	return v.appFieldsCrossTenantSendingApp.Name
}

// GetReceivingApp returns UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp.ReceivingApp, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp) GetReceivingApp() string {
	return v.crossTenantSendingAppFields.ReceivingApp
}

// GetReceivingTenant returns UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp.ReceivingTenant, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp) GetReceivingTenant() string {
	return v.crossTenantSendingAppFields.ReceivingTenant
}

func (v *UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossTenantSendingApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantSendingAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	ReceivingApp string `json:"receivingApp"`

	ReceivingTenant string `json:"receivingTenant"`
}

func (v *UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp) __premarshalJSON() (*__premarshalUpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp, error) {
	var retval __premarshalUpdateCrossTenantAppGetAppCrossTenantSendingAppUpdateCrossTenantSendingApp

	retval.Description = v.appFieldsCrossTenantSendingApp.Description
	retval.Name = v.appFieldsCrossTenantSendingApp.Name
	retval.ReceivingApp = v.crossTenantSendingAppFields.ReceivingApp
	retval.ReceivingTenant = v.crossTenantSendingAppFields.ReceivingTenant
	return &retval, nil
}

// UpdateCrossTenantAppGetAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type UpdateCrossTenantAppGetAppExternalApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantAppGetAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppExternalApp) GetTypename() *string { return v.Typename }

// UpdateCrossTenantAppGetAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type UpdateCrossTenantAppGetAppManagedApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantAppGetAppManagedApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppGetAppManagedApp) GetTypename() *string { return v.Typename }

// UpdateCrossTenantAppResponse is returned by UpdateCrossTenantApp on success.
type UpdateCrossTenantAppResponse struct {
	GetApp *UpdateCrossTenantAppGetApp `json:"-"`
}

// GetGetApp returns UpdateCrossTenantAppResponse.GetApp, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantAppResponse) GetGetApp() *UpdateCrossTenantAppGetApp { return v.GetApp }

func (v *UpdateCrossTenantAppResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateCrossTenantAppResponse
		GetApp json.RawMessage `json:"GetApp"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateCrossTenantAppResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetApp
		src := firstPass.GetApp
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateCrossTenantAppGetApp)
			err = __unmarshalUpdateCrossTenantAppGetApp(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateCrossTenantAppResponse.GetApp: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateCrossTenantAppResponse struct {
	GetApp json.RawMessage `json:"GetApp"`
}

func (v *UpdateCrossTenantAppResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateCrossTenantAppResponse) __premarshalJSON() (*__premarshalUpdateCrossTenantAppResponse, error) {
	var retval __premarshalUpdateCrossTenantAppResponse

	{

		dst := &retval.GetApp
		src := v.GetApp
		if src != nil {
			var err error
			*dst, err = __marshalUpdateCrossTenantAppGetApp(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateCrossTenantAppResponse.GetApp: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateCrossTenantReceivingNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateCrossTenantReceivingNodeGetNode is implemented by the following types:
// UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode
// UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode
// UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode
// UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode
// UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode
// UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode
// UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode
// UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode
// UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode
// UpdateCrossTenantReceivingNodeGetNodeExternalNode
// UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode
// UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode
// UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode
// UpdateCrossTenantReceivingNodeGetNodeManagedNode
// UpdateCrossTenantReceivingNodeGetNodeProcessorNode
// UpdateCrossTenantReceivingNodeGetNodeTimerNode
// UpdateCrossTenantReceivingNodeGetNodeWebhookNode
type UpdateCrossTenantReceivingNodeGetNode interface {
	implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}
func (v *UpdateCrossTenantReceivingNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateCrossTenantReceivingNodeGetNode() {
}

func __unmarshalUpdateCrossTenantReceivingNodeGetNode(b []byte, v *UpdateCrossTenantReceivingNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateCrossTenantReceivingNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateCrossTenantReceivingNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateCrossTenantReceivingNodeGetNode(v *UpdateCrossTenantReceivingNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantReceivingNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantReceivingNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateCrossTenantReceivingNodeGetNode: "%T"`, v)
	}
}

// UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeAlertEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeAppChangeReceiverNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeAppChangeRouterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeAuditEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeBitmapRouterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeChangeEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string                                                                                     `json:"__typename"`
	Update   UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode `json:"Update"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode) GetTypename() *string {
	return v.Typename
}

// GetUpdate returns UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNode) GetUpdate() UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode {
	return v.Update
}

// UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode struct {
	nodeFieldsCrossTenantReceivingNode `json:"-"`
	crossTenantReceivingNodeFields     `json:"-"`
}

// GetDescription returns UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode) GetDescription() *string {
	return v.nodeFieldsCrossTenantReceivingNode.Description
}

// GetName returns UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode) GetName() string {
	return v.nodeFieldsCrossTenantReceivingNode.Name
}

// GetApp returns UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode.App, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode) GetApp() crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp {
	return v.crossTenantReceivingNodeFields.App
}

// GetSendMessageType returns UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode) GetSendMessageType() *crossTenantReceivingNodeFieldsSendMessageType {
	return v.crossTenantReceivingNodeFields.SendMessageType
}

func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsCrossTenantReceivingNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantReceivingNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	App crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp `json:"app"`

	SendMessageType *crossTenantReceivingNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode) __premarshalJSON() (*__premarshalUpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode, error) {
	var retval __premarshalUpdateCrossTenantReceivingNodeGetNodeCrossTenantReceivingNodeUpdateCrossTenantReceivingNode

	retval.Description = v.nodeFieldsCrossTenantReceivingNode.Description
	retval.Name = v.nodeFieldsCrossTenantReceivingNode.Name
	retval.App = v.crossTenantReceivingNodeFields.App
	retval.SendMessageType = v.crossTenantReceivingNodeFields.SendMessageType
	return &retval, nil
}

// UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeCrossTenantSendingNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeDeadLetterEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateCrossTenantReceivingNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeFilesDotComWebhookNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeLoadBalancerNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeLogEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantReceivingNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateCrossTenantReceivingNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantReceivingNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateCrossTenantReceivingNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantReceivingNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateCrossTenantReceivingNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantReceivingNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateCrossTenantReceivingNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantReceivingNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantReceivingNodeResponse is returned by UpdateCrossTenantReceivingNode on success.
type UpdateCrossTenantReceivingNodeResponse struct {
	GetNode *UpdateCrossTenantReceivingNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateCrossTenantReceivingNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantReceivingNodeResponse) GetGetNode() *UpdateCrossTenantReceivingNodeGetNode {
	return v.GetNode
}

func (v *UpdateCrossTenantReceivingNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateCrossTenantReceivingNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateCrossTenantReceivingNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateCrossTenantReceivingNodeGetNode)
			err = __unmarshalUpdateCrossTenantReceivingNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateCrossTenantReceivingNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateCrossTenantReceivingNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateCrossTenantReceivingNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateCrossTenantReceivingNodeResponse) __premarshalJSON() (*__premarshalUpdateCrossTenantReceivingNodeResponse, error) {
	var retval __premarshalUpdateCrossTenantReceivingNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateCrossTenantReceivingNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateCrossTenantReceivingNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateCrossTenantSendingNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateCrossTenantSendingNodeGetNode is implemented by the following types:
// UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode
// UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode
// UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode
// UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode
// UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode
// UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode
// UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode
// UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode
// UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode
// UpdateCrossTenantSendingNodeGetNodeExternalNode
// UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode
// UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode
// UpdateCrossTenantSendingNodeGetNodeLogEmitterNode
// UpdateCrossTenantSendingNodeGetNodeManagedNode
// UpdateCrossTenantSendingNodeGetNodeProcessorNode
// UpdateCrossTenantSendingNodeGetNodeTimerNode
// UpdateCrossTenantSendingNodeGetNodeWebhookNode
type UpdateCrossTenantSendingNodeGetNode interface {
	implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}
func (v *UpdateCrossTenantSendingNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateCrossTenantSendingNodeGetNode() {
}

func __unmarshalUpdateCrossTenantSendingNodeGetNode(b []byte, v *UpdateCrossTenantSendingNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateCrossTenantSendingNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateCrossTenantSendingNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateCrossTenantSendingNodeGetNode(v *UpdateCrossTenantSendingNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateCrossTenantSendingNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateCrossTenantSendingNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateCrossTenantSendingNodeGetNode: "%T"`, v)
	}
}

// UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeAlertEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeAppChangeReceiverNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeAppChangeRouterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeAuditEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeBitmapRouterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeChangeEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantReceivingNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode struct {
	Typename *string                                                                               `json:"__typename"`
	Update   UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode `json:"Update"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode) GetTypename() *string {
	return v.Typename
}

// GetUpdate returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNode) GetUpdate() UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode {
	return v.Update
}

// UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode struct {
	nodeFieldsCrossTenantSendingNode `json:"-"`
	crossTenantSendingNodeFields     `json:"-"`
}

// GetDescription returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetDescription() *string {
	return v.nodeFieldsCrossTenantSendingNode.Description
}

// GetName returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetName() string {
	return v.nodeFieldsCrossTenantSendingNode.Name
}

// GetApp returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.App, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetApp() crossTenantSendingNodeFieldsAppCrossTenantSendingApp {
	return v.crossTenantSendingNodeFields.App
}

// GetInlineProcessor returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.InlineProcessor, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetInlineProcessor() *string {
	return v.crossTenantSendingNodeFields.InlineProcessor
}

// GetLoggingLevel returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetLoggingLevel() *LogLevel {
	return v.crossTenantSendingNodeFields.LoggingLevel
}

// GetManagedProcessor returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetManagedProcessor() *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction {
	return v.crossTenantSendingNodeFields.ManagedProcessor
}

// GetReceiveMessageType returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetReceiveMessageType() *crossTenantSendingNodeFieldsReceiveMessageType {
	return v.crossTenantSendingNodeFields.ReceiveMessageType
}

// GetRequirements returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetRequirements() []string {
	return v.crossTenantSendingNodeFields.Requirements
}

// GetSendMessageType returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetSendMessageType() *crossTenantSendingNodeFieldsSendMessageType {
	return v.crossTenantSendingNodeFields.SendMessageType
}

// GetSequentialProcessing returns UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) GetSequentialProcessing() *bool {
	return v.crossTenantSendingNodeFields.SequentialProcessing
}

func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsCrossTenantSendingNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossTenantSendingNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	App crossTenantSendingNodeFieldsAppCrossTenantSendingApp `json:"app"`

	InlineProcessor *string `json:"inlineProcessor"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedProcessor *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`

	ReceiveMessageType *crossTenantSendingNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *crossTenantSendingNodeFieldsSendMessageType `json:"sendMessageType"`

	SequentialProcessing *bool `json:"sequentialProcessing"`
}

func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode) __premarshalJSON() (*__premarshalUpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode, error) {
	var retval __premarshalUpdateCrossTenantSendingNodeGetNodeCrossTenantSendingNodeUpdateCrossTenantSendingNode

	retval.Description = v.nodeFieldsCrossTenantSendingNode.Description
	retval.Name = v.nodeFieldsCrossTenantSendingNode.Name
	retval.App = v.crossTenantSendingNodeFields.App
	retval.InlineProcessor = v.crossTenantSendingNodeFields.InlineProcessor
	retval.LoggingLevel = v.crossTenantSendingNodeFields.LoggingLevel
	retval.ManagedProcessor = v.crossTenantSendingNodeFields.ManagedProcessor
	retval.ReceiveMessageType = v.crossTenantSendingNodeFields.ReceiveMessageType
	retval.Requirements = v.crossTenantSendingNodeFields.Requirements
	retval.SendMessageType = v.crossTenantSendingNodeFields.SendMessageType
	retval.SequentialProcessing = v.crossTenantSendingNodeFields.SequentialProcessing
	return &retval, nil
}

// UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeDeadLetterEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateCrossTenantSendingNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeFilesDotComWebhookNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeLoadBalancerNode) GetTypename() *string {
	return v.Typename
}

// UpdateCrossTenantSendingNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateCrossTenantSendingNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantSendingNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateCrossTenantSendingNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantSendingNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateCrossTenantSendingNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantSendingNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateCrossTenantSendingNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantSendingNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateCrossTenantSendingNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateCrossTenantSendingNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateCrossTenantSendingNodeResponse is returned by UpdateCrossTenantSendingNode on success.
type UpdateCrossTenantSendingNodeResponse struct {
	GetNode *UpdateCrossTenantSendingNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateCrossTenantSendingNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateCrossTenantSendingNodeResponse) GetGetNode() *UpdateCrossTenantSendingNodeGetNode {
	return v.GetNode
}

func (v *UpdateCrossTenantSendingNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateCrossTenantSendingNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateCrossTenantSendingNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateCrossTenantSendingNodeGetNode)
			err = __unmarshalUpdateCrossTenantSendingNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateCrossTenantSendingNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateCrossTenantSendingNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateCrossTenantSendingNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateCrossTenantSendingNodeResponse) __premarshalJSON() (*__premarshalUpdateCrossTenantSendingNodeResponse, error) {
	var retval __premarshalUpdateCrossTenantSendingNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateCrossTenantSendingNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateCrossTenantSendingNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateExternalNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateExternalNodeGetNode is implemented by the following types:
// UpdateExternalNodeGetNodeAlertEmitterNode
// UpdateExternalNodeGetNodeAppChangeReceiverNode
// UpdateExternalNodeGetNodeAppChangeRouterNode
// UpdateExternalNodeGetNodeAuditEmitterNode
// UpdateExternalNodeGetNodeBitmapRouterNode
// UpdateExternalNodeGetNodeChangeEmitterNode
// UpdateExternalNodeGetNodeCrossTenantReceivingNode
// UpdateExternalNodeGetNodeCrossTenantSendingNode
// UpdateExternalNodeGetNodeDeadLetterEmitterNode
// UpdateExternalNodeGetNodeExternalNode
// UpdateExternalNodeGetNodeFilesDotComWebhookNode
// UpdateExternalNodeGetNodeLoadBalancerNode
// UpdateExternalNodeGetNodeLogEmitterNode
// UpdateExternalNodeGetNodeManagedNode
// UpdateExternalNodeGetNodeProcessorNode
// UpdateExternalNodeGetNodeTimerNode
// UpdateExternalNodeGetNodeWebhookNode
type UpdateExternalNodeGetNode interface {
	implementsGraphQLInterfaceUpdateExternalNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateExternalNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}
func (v *UpdateExternalNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {}
func (v *UpdateExternalNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateExternalNodeGetNode() {
}

func __unmarshalUpdateExternalNodeGetNode(b []byte, v *UpdateExternalNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateExternalNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateExternalNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateExternalNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateExternalNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateExternalNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateExternalNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateExternalNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateExternalNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateExternalNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateExternalNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateExternalNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateExternalNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateExternalNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateExternalNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateExternalNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateExternalNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateExternalNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateExternalNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateExternalNodeGetNode(v *UpdateExternalNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateExternalNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateExternalNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateExternalNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateExternalNodeGetNode: "%T"`, v)
	}
}

// UpdateExternalNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateExternalNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateExternalNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateExternalNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateExternalNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateExternalNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateExternalNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateExternalNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateExternalNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateExternalNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateExternalNodeGetNodeExternalNode struct {
	Typename *string                                                 `json:"__typename"`
	Update   UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode `json:"Update"`
}

// GetTypename returns UpdateExternalNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateExternalNodeGetNodeExternalNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNode) GetUpdate() UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode {
	return v.Update
}

// UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode struct {
	nodeFieldsExternalNode `json:"-"`
	externalNodeFields     `json:"-"`
}

// GetDescription returns UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) GetDescription() *string {
	return v.nodeFieldsExternalNode.Description
}

// GetName returns UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) GetName() string {
	return v.nodeFieldsExternalNode.Name
}

// GetApp returns UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode.App, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) GetApp() externalNodeFieldsAppRemoteApp {
	return v.externalNodeFields.App
}

// GetConfig returns UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode.Config, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) GetConfig() *string {
	return v.externalNodeFields.Config
}

// GetReceiveMessageType returns UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) GetReceiveMessageType() *externalNodeFieldsReceiveMessageType {
	return v.externalNodeFields.ReceiveMessageType
}

// GetSendMessageType returns UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) GetSendMessageType() *externalNodeFieldsSendMessageType {
	return v.externalNodeFields.SendMessageType
}

func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsExternalNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.externalNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateExternalNodeGetNodeExternalNodeUpdateExternalNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	App json.RawMessage `json:"app"`

	Config *string `json:"config"`

	ReceiveMessageType *externalNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *externalNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode) __premarshalJSON() (*__premarshalUpdateExternalNodeGetNodeExternalNodeUpdateExternalNode, error) {
	var retval __premarshalUpdateExternalNodeGetNodeExternalNodeUpdateExternalNode

	retval.Description = v.nodeFieldsExternalNode.Description
	retval.Name = v.nodeFieldsExternalNode.Name
	{

		dst := &retval.App
		src := v.externalNodeFields.App
		var err error
		*dst, err = __marshalexternalNodeFieldsAppRemoteApp(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal UpdateExternalNodeGetNodeExternalNodeUpdateExternalNode.externalNodeFields.App: %w", err)
		}
	}
	retval.Config = v.externalNodeFields.Config
	retval.ReceiveMessageType = v.externalNodeFields.ReceiveMessageType
	retval.SendMessageType = v.externalNodeFields.SendMessageType
	return &retval, nil
}

// UpdateExternalNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateExternalNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateExternalNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateExternalNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateExternalNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateExternalNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateExternalNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateExternalNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateExternalNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateExternalNodeResponse is returned by UpdateExternalNode on success.
type UpdateExternalNodeResponse struct {
	GetNode *UpdateExternalNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateExternalNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateExternalNodeResponse) GetGetNode() *UpdateExternalNodeGetNode { return v.GetNode }

func (v *UpdateExternalNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateExternalNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateExternalNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateExternalNodeGetNode)
			err = __unmarshalUpdateExternalNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateExternalNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateExternalNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateExternalNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateExternalNodeResponse) __premarshalJSON() (*__premarshalUpdateExternalNodeResponse, error) {
	var retval __premarshalUpdateExternalNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateExternalNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateExternalNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateFilesDotComWebhookNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateFilesDotComWebhookNodeGetNode is implemented by the following types:
// UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode
// UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode
// UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode
// UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode
// UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode
// UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode
// UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode
// UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode
// UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode
// UpdateFilesDotComWebhookNodeGetNodeExternalNode
// UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode
// UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode
// UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode
// UpdateFilesDotComWebhookNodeGetNodeManagedNode
// UpdateFilesDotComWebhookNodeGetNodeProcessorNode
// UpdateFilesDotComWebhookNodeGetNodeTimerNode
// UpdateFilesDotComWebhookNodeGetNodeWebhookNode
type UpdateFilesDotComWebhookNodeGetNode interface {
	implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}
func (v *UpdateFilesDotComWebhookNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateFilesDotComWebhookNodeGetNode() {
}

func __unmarshalUpdateFilesDotComWebhookNodeGetNode(b []byte, v *UpdateFilesDotComWebhookNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateFilesDotComWebhookNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateFilesDotComWebhookNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateFilesDotComWebhookNodeGetNode(v *UpdateFilesDotComWebhookNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFilesDotComWebhookNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFilesDotComWebhookNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateFilesDotComWebhookNodeGetNode: "%T"`, v)
	}
}

// UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeAlertEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeAppChangeReceiverNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeAppChangeRouterNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeAuditEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeBitmapRouterNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeChangeEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeCrossTenantReceivingNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeCrossTenantSendingNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeDeadLetterEmitterNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateFilesDotComWebhookNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string                                                                               `json:"__typename"`
	Update   UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode `json:"Update"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode) GetTypename() *string {
	return v.Typename
}

// GetUpdate returns UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNode) GetUpdate() UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode {
	return v.Update
}

// UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode struct {
	nodeFieldsFilesDotComWebhookNode `json:"-"`
	filesDotComWebhookNodeFields     `json:"-"`
}

// GetDescription returns UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode) GetDescription() *string {
	return v.nodeFieldsFilesDotComWebhookNode.Description
}

// GetName returns UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode) GetName() string {
	return v.nodeFieldsFilesDotComWebhookNode.Name
}

// GetEndpoint returns UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode.Endpoint, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode) GetEndpoint() string {
	return v.filesDotComWebhookNodeFields.Endpoint
}

// GetSendMessageType returns UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode) GetSendMessageType() *filesDotComWebhookNodeFieldsSendMessageType {
	return v.filesDotComWebhookNodeFields.SendMessageType
}

func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsFilesDotComWebhookNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.filesDotComWebhookNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Endpoint string `json:"endpoint"`

	SendMessageType *filesDotComWebhookNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode) __premarshalJSON() (*__premarshalUpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode, error) {
	var retval __premarshalUpdateFilesDotComWebhookNodeGetNodeFilesDotComWebhookNodeUpdateFilesDotComWebhookNode

	retval.Description = v.nodeFieldsFilesDotComWebhookNode.Description
	retval.Name = v.nodeFieldsFilesDotComWebhookNode.Name
	retval.Endpoint = v.filesDotComWebhookNodeFields.Endpoint
	retval.SendMessageType = v.filesDotComWebhookNodeFields.SendMessageType
	return &retval, nil
}

// UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeLoadBalancerNode) GetTypename() *string {
	return v.Typename
}

// UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateFilesDotComWebhookNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateFilesDotComWebhookNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateFilesDotComWebhookNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateFilesDotComWebhookNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateFilesDotComWebhookNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateFilesDotComWebhookNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateFilesDotComWebhookNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateFilesDotComWebhookNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateFilesDotComWebhookNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateFilesDotComWebhookNodeResponse is returned by UpdateFilesDotComWebhookNode on success.
type UpdateFilesDotComWebhookNodeResponse struct {
	GetNode *UpdateFilesDotComWebhookNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateFilesDotComWebhookNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateFilesDotComWebhookNodeResponse) GetGetNode() *UpdateFilesDotComWebhookNodeGetNode {
	return v.GetNode
}

func (v *UpdateFilesDotComWebhookNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFilesDotComWebhookNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFilesDotComWebhookNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateFilesDotComWebhookNodeGetNode)
			err = __unmarshalUpdateFilesDotComWebhookNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateFilesDotComWebhookNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateFilesDotComWebhookNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateFilesDotComWebhookNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFilesDotComWebhookNodeResponse) __premarshalJSON() (*__premarshalUpdateFilesDotComWebhookNodeResponse, error) {
	var retval __premarshalUpdateFilesDotComWebhookNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateFilesDotComWebhookNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateFilesDotComWebhookNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateFunctionGetFunction includes the requested fields of the GraphQL interface Function.
//
// UpdateFunctionGetFunction is implemented by the following types:
// UpdateFunctionGetFunctionApiAuthenticatorFunction
// UpdateFunctionGetFunctionBitmapperFunction
// UpdateFunctionGetFunctionProcessorFunction
type UpdateFunctionGetFunction interface {
	implementsGraphQLInterfaceUpdateFunctionGetFunction()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateFunctionGetFunctionApiAuthenticatorFunction) implementsGraphQLInterfaceUpdateFunctionGetFunction() {
}
func (v *UpdateFunctionGetFunctionBitmapperFunction) implementsGraphQLInterfaceUpdateFunctionGetFunction() {
}
func (v *UpdateFunctionGetFunctionProcessorFunction) implementsGraphQLInterfaceUpdateFunctionGetFunction() {
}

func __unmarshalUpdateFunctionGetFunction(b []byte, v *UpdateFunctionGetFunction) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAuthenticatorFunction":
		*v = new(UpdateFunctionGetFunctionApiAuthenticatorFunction)
		return json.Unmarshal(b, *v)
	case "BitmapperFunction":
		*v = new(UpdateFunctionGetFunctionBitmapperFunction)
		return json.Unmarshal(b, *v)
	case "ProcessorFunction":
		*v = new(UpdateFunctionGetFunctionProcessorFunction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Function.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateFunctionGetFunction: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateFunctionGetFunction(v *UpdateFunctionGetFunction) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateFunctionGetFunctionApiAuthenticatorFunction:
		typename = "ApiAuthenticatorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFunctionGetFunctionApiAuthenticatorFunction
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFunctionGetFunctionBitmapperFunction:
		typename = "BitmapperFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFunctionGetFunctionBitmapperFunction
		}{typename, v}
		return json.Marshal(result)
	case *UpdateFunctionGetFunctionProcessorFunction:
		typename = "ProcessorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateFunctionGetFunctionProcessorFunction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateFunctionGetFunction: "%T"`, v)
	}
}

// UpdateFunctionGetFunctionApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type UpdateFunctionGetFunctionApiAuthenticatorFunction struct {
	Typename *string                                                                         `json:"__typename"`
	Update   UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction `json:"Update"`
}

// GetTypename returns UpdateFunctionGetFunctionApiAuthenticatorFunction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunction) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateFunctionGetFunctionApiAuthenticatorFunction.Update, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunction) GetUpdate() UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction {
	return v.Update
}

// UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction struct {
	functionFieldsApiAuthenticatorFunction `json:"-"`
}

// GetCode returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Code, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetCode() string {
	return v.functionFieldsApiAuthenticatorFunction.Code
}

// GetDescription returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Description, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetDescription() string {
	return v.functionFieldsApiAuthenticatorFunction.Description
}

// GetInUse returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.InUse, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetInUse() bool {
	return v.functionFieldsApiAuthenticatorFunction.InUse
}

// GetName returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetName() string {
	return v.functionFieldsApiAuthenticatorFunction.Name
}

// GetReadme returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Readme, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetReadme() *string {
	return v.functionFieldsApiAuthenticatorFunction.Readme
}

// GetRequirements returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetRequirements() []string {
	return v.functionFieldsApiAuthenticatorFunction.Requirements
}

// GetSystem returns UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction.System, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) GetSystem() *bool {
	return v.functionFieldsApiAuthenticatorFunction.System
}

func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsApiAuthenticatorFunction)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction struct {
	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`
}

func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction) __premarshalJSON() (*__premarshalUpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction, error) {
	var retval __premarshalUpdateFunctionGetFunctionApiAuthenticatorFunctionUpdateApiAuthenticatorFunction

	retval.Code = v.functionFieldsApiAuthenticatorFunction.Code
	retval.Description = v.functionFieldsApiAuthenticatorFunction.Description
	retval.InUse = v.functionFieldsApiAuthenticatorFunction.InUse
	retval.Name = v.functionFieldsApiAuthenticatorFunction.Name
	retval.Readme = v.functionFieldsApiAuthenticatorFunction.Readme
	retval.Requirements = v.functionFieldsApiAuthenticatorFunction.Requirements
	retval.System = v.functionFieldsApiAuthenticatorFunction.System
	return &retval, nil
}

// UpdateFunctionGetFunctionBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type UpdateFunctionGetFunctionBitmapperFunction struct {
	Typename *string                                                           `json:"__typename"`
	Update   UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction `json:"Update"`
}

// GetTypename returns UpdateFunctionGetFunctionBitmapperFunction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunction) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateFunctionGetFunctionBitmapperFunction.Update, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunction) GetUpdate() UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction {
	return v.Update
}

// UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction struct {
	functionFieldsBitmapperFunction `json:"-"`
	bitmapperFunctionFields         `json:"-"`
}

// GetCode returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Code, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetCode() string {
	return v.functionFieldsBitmapperFunction.Code
}

// GetDescription returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Description, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetDescription() string {
	return v.functionFieldsBitmapperFunction.Description
}

// GetInUse returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.InUse, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetInUse() bool {
	return v.functionFieldsBitmapperFunction.InUse
}

// GetName returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetName() string {
	return v.functionFieldsBitmapperFunction.Name
}

// GetReadme returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Readme, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetReadme() *string {
	return v.functionFieldsBitmapperFunction.Readme
}

// GetRequirements returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetRequirements() []string {
	return v.functionFieldsBitmapperFunction.Requirements
}

// GetSystem returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.System, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetSystem() *bool {
	return v.functionFieldsBitmapperFunction.System
}

// GetArgumentMessageType returns UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) GetArgumentMessageType() bitmapperFunctionFieldsArgumentMessageType {
	return v.bitmapperFunctionFields.ArgumentMessageType
}

func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsBitmapperFunction)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.bitmapperFunctionFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction struct {
	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`

	ArgumentMessageType bitmapperFunctionFieldsArgumentMessageType `json:"argumentMessageType"`
}

func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction) __premarshalJSON() (*__premarshalUpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction, error) {
	var retval __premarshalUpdateFunctionGetFunctionBitmapperFunctionUpdateBitmapperFunction

	retval.Code = v.functionFieldsBitmapperFunction.Code
	retval.Description = v.functionFieldsBitmapperFunction.Description
	retval.InUse = v.functionFieldsBitmapperFunction.InUse
	retval.Name = v.functionFieldsBitmapperFunction.Name
	retval.Readme = v.functionFieldsBitmapperFunction.Readme
	retval.Requirements = v.functionFieldsBitmapperFunction.Requirements
	retval.System = v.functionFieldsBitmapperFunction.System
	retval.ArgumentMessageType = v.bitmapperFunctionFields.ArgumentMessageType
	return &retval, nil
}

// UpdateFunctionGetFunctionProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type UpdateFunctionGetFunctionProcessorFunction struct {
	Typename *string                                                           `json:"__typename"`
	Update   UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction `json:"Update"`
}

// GetTypename returns UpdateFunctionGetFunctionProcessorFunction.Typename, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunction) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateFunctionGetFunctionProcessorFunction.Update, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunction) GetUpdate() UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction {
	return v.Update
}

// UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction struct {
	functionFieldsProcessorFunction `json:"-"`
	processorFunctionFields         `json:"-"`
}

// GetCode returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Code, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetCode() string {
	return v.functionFieldsProcessorFunction.Code
}

// GetDescription returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Description, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetDescription() string {
	return v.functionFieldsProcessorFunction.Description
}

// GetInUse returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.InUse, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetInUse() bool {
	return v.functionFieldsProcessorFunction.InUse
}

// GetName returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetName() string {
	return v.functionFieldsProcessorFunction.Name
}

// GetReadme returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Readme, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetReadme() *string {
	return v.functionFieldsProcessorFunction.Readme
}

// GetRequirements returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetRequirements() []string {
	return v.functionFieldsProcessorFunction.Requirements
}

// GetSystem returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.System, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetSystem() *bool {
	return v.functionFieldsProcessorFunction.System
}

// GetArgumentMessageType returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetArgumentMessageType() processorFunctionFieldsArgumentMessageType {
	return v.processorFunctionFields.ArgumentMessageType
}

// GetReturnMessageType returns UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) GetReturnMessageType() *processorFunctionFieldsReturnMessageType {
	return v.processorFunctionFields.ReturnMessageType
}

func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.functionFieldsProcessorFunction)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.processorFunctionFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction struct {
	Code string `json:"code"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	System *bool `json:"system"`

	ArgumentMessageType processorFunctionFieldsArgumentMessageType `json:"argumentMessageType"`

	ReturnMessageType *processorFunctionFieldsReturnMessageType `json:"returnMessageType"`
}

func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction) __premarshalJSON() (*__premarshalUpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction, error) {
	var retval __premarshalUpdateFunctionGetFunctionProcessorFunctionUpdateProcessorFunction

	retval.Code = v.functionFieldsProcessorFunction.Code
	retval.Description = v.functionFieldsProcessorFunction.Description
	retval.InUse = v.functionFieldsProcessorFunction.InUse
	retval.Name = v.functionFieldsProcessorFunction.Name
	retval.Readme = v.functionFieldsProcessorFunction.Readme
	retval.Requirements = v.functionFieldsProcessorFunction.Requirements
	retval.System = v.functionFieldsProcessorFunction.System
	retval.ArgumentMessageType = v.processorFunctionFields.ArgumentMessageType
	retval.ReturnMessageType = v.processorFunctionFields.ReturnMessageType
	return &retval, nil
}

// UpdateFunctionResponse is returned by UpdateFunction on success.
type UpdateFunctionResponse struct {
	GetFunction *UpdateFunctionGetFunction `json:"-"`
}

// GetGetFunction returns UpdateFunctionResponse.GetFunction, and is useful for accessing the field via an interface.
func (v *UpdateFunctionResponse) GetGetFunction() *UpdateFunctionGetFunction { return v.GetFunction }

func (v *UpdateFunctionResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateFunctionResponse
		GetFunction json.RawMessage `json:"GetFunction"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateFunctionResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetFunction
		src := firstPass.GetFunction
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateFunctionGetFunction)
			err = __unmarshalUpdateFunctionGetFunction(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateFunctionResponse struct {
	GetFunction json.RawMessage `json:"GetFunction"`
}

func (v *UpdateFunctionResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateFunctionResponse) __premarshalJSON() (*__premarshalUpdateFunctionResponse, error) {
	var retval __premarshalUpdateFunctionResponse

	{

		dst := &retval.GetFunction
		src := v.GetFunction
		if src != nil {
			var err error
			*dst, err = __marshalUpdateFunctionGetFunction(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateFunctionResponse.GetFunction: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateKmsKeyGetKmsKey includes the requested fields of the GraphQL type KmsKey.
type UpdateKmsKeyGetKmsKey struct {
	Update UpdateKmsKeyGetKmsKeyUpdateKmsKey `json:"Update"`
}

// GetUpdate returns UpdateKmsKeyGetKmsKey.Update, and is useful for accessing the field via an interface.
func (v *UpdateKmsKeyGetKmsKey) GetUpdate() UpdateKmsKeyGetKmsKeyUpdateKmsKey { return v.Update }

// UpdateKmsKeyGetKmsKeyUpdateKmsKey includes the requested fields of the GraphQL type KmsKey.
type UpdateKmsKeyGetKmsKeyUpdateKmsKey struct {
	kmsKeyFields `json:"-"`
}

// GetArn returns UpdateKmsKeyGetKmsKeyUpdateKmsKey.Arn, and is useful for accessing the field via an interface.
func (v *UpdateKmsKeyGetKmsKeyUpdateKmsKey) GetArn() string { return v.kmsKeyFields.Arn }

// GetDescription returns UpdateKmsKeyGetKmsKeyUpdateKmsKey.Description, and is useful for accessing the field via an interface.
func (v *UpdateKmsKeyGetKmsKeyUpdateKmsKey) GetDescription() *string {
	return v.kmsKeyFields.Description
}

// GetInUse returns UpdateKmsKeyGetKmsKeyUpdateKmsKey.InUse, and is useful for accessing the field via an interface.
func (v *UpdateKmsKeyGetKmsKeyUpdateKmsKey) GetInUse() bool { return v.kmsKeyFields.InUse }

// GetName returns UpdateKmsKeyGetKmsKeyUpdateKmsKey.Name, and is useful for accessing the field via an interface.
func (v *UpdateKmsKeyGetKmsKeyUpdateKmsKey) GetName() string { return v.kmsKeyFields.Name }

func (v *UpdateKmsKeyGetKmsKeyUpdateKmsKey) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateKmsKeyGetKmsKeyUpdateKmsKey
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateKmsKeyGetKmsKeyUpdateKmsKey = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.kmsKeyFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateKmsKeyGetKmsKeyUpdateKmsKey struct {
	Arn string `json:"arn"`

	Description *string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`
}

func (v *UpdateKmsKeyGetKmsKeyUpdateKmsKey) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateKmsKeyGetKmsKeyUpdateKmsKey) __premarshalJSON() (*__premarshalUpdateKmsKeyGetKmsKeyUpdateKmsKey, error) {
	var retval __premarshalUpdateKmsKeyGetKmsKeyUpdateKmsKey

	retval.Arn = v.kmsKeyFields.Arn
	retval.Description = v.kmsKeyFields.Description
	retval.InUse = v.kmsKeyFields.InUse
	retval.Name = v.kmsKeyFields.Name
	return &retval, nil
}

// UpdateKmsKeyResponse is returned by UpdateKmsKey on success.
type UpdateKmsKeyResponse struct {
	GetKmsKey *UpdateKmsKeyGetKmsKey `json:"GetKmsKey"`
}

// GetGetKmsKey returns UpdateKmsKeyResponse.GetKmsKey, and is useful for accessing the field via an interface.
func (v *UpdateKmsKeyResponse) GetGetKmsKey() *UpdateKmsKeyGetKmsKey { return v.GetKmsKey }

// UpdateLoadBalancerNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateLoadBalancerNodeGetNode is implemented by the following types:
// UpdateLoadBalancerNodeGetNodeAlertEmitterNode
// UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode
// UpdateLoadBalancerNodeGetNodeAppChangeRouterNode
// UpdateLoadBalancerNodeGetNodeAuditEmitterNode
// UpdateLoadBalancerNodeGetNodeBitmapRouterNode
// UpdateLoadBalancerNodeGetNodeChangeEmitterNode
// UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode
// UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode
// UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode
// UpdateLoadBalancerNodeGetNodeExternalNode
// UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode
// UpdateLoadBalancerNodeGetNodeLoadBalancerNode
// UpdateLoadBalancerNodeGetNodeLogEmitterNode
// UpdateLoadBalancerNodeGetNodeManagedNode
// UpdateLoadBalancerNodeGetNodeProcessorNode
// UpdateLoadBalancerNodeGetNodeTimerNode
// UpdateLoadBalancerNodeGetNodeWebhookNode
type UpdateLoadBalancerNodeGetNode interface {
	implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateLoadBalancerNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}
func (v *UpdateLoadBalancerNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateLoadBalancerNodeGetNode() {
}

func __unmarshalUpdateLoadBalancerNodeGetNode(b []byte, v *UpdateLoadBalancerNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateLoadBalancerNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateLoadBalancerNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateLoadBalancerNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateLoadBalancerNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateLoadBalancerNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateLoadBalancerNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateLoadBalancerNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateLoadBalancerNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateLoadBalancerNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateLoadBalancerNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateLoadBalancerNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateLoadBalancerNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateLoadBalancerNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateLoadBalancerNodeGetNode(v *UpdateLoadBalancerNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateLoadBalancerNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateLoadBalancerNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateLoadBalancerNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateLoadBalancerNodeGetNode: "%T"`, v)
	}
}

// UpdateLoadBalancerNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateLoadBalancerNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateLoadBalancerNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateLoadBalancerNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateLoadBalancerNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateLoadBalancerNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeCrossTenantReceivingNode) GetTypename() *string {
	return v.Typename
}

// UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeCrossTenantSendingNode) GetTypename() *string {
	return v.Typename
}

// UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateLoadBalancerNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeFilesDotComWebhookNode) GetTypename() *string {
	return v.Typename
}

// UpdateLoadBalancerNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateLoadBalancerNodeGetNodeLoadBalancerNode struct {
	Typename *string                                                             `json:"__typename"`
	Update   UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode `json:"Update"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateLoadBalancerNodeGetNodeLoadBalancerNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNode) GetUpdate() UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode {
	return v.Update
}

// UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode struct {
	nodeFieldsLoadBalancerNode `json:"-"`
	loadBalancerNodeFields     `json:"-"`
}

// GetDescription returns UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode) GetDescription() *string {
	return v.nodeFieldsLoadBalancerNode.Description
}

// GetName returns UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode) GetName() string {
	return v.nodeFieldsLoadBalancerNode.Name
}

// GetReceiveMessageType returns UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode) GetReceiveMessageType() *loadBalancerNodeFieldsReceiveMessageType {
	return v.loadBalancerNodeFields.ReceiveMessageType
}

// GetSendMessageType returns UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode) GetSendMessageType() *loadBalancerNodeFieldsSendMessageType {
	return v.loadBalancerNodeFields.SendMessageType
}

func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsLoadBalancerNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.loadBalancerNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	ReceiveMessageType *loadBalancerNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *loadBalancerNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode) __premarshalJSON() (*__premarshalUpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode, error) {
	var retval __premarshalUpdateLoadBalancerNodeGetNodeLoadBalancerNodeUpdateLoadBalancerNode

	retval.Description = v.nodeFieldsLoadBalancerNode.Description
	retval.Name = v.nodeFieldsLoadBalancerNode.Name
	retval.ReceiveMessageType = v.loadBalancerNodeFields.ReceiveMessageType
	retval.SendMessageType = v.loadBalancerNodeFields.SendMessageType
	return &retval, nil
}

// UpdateLoadBalancerNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateLoadBalancerNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateLoadBalancerNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateLoadBalancerNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateLoadBalancerNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateLoadBalancerNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateLoadBalancerNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateLoadBalancerNodeResponse is returned by UpdateLoadBalancerNode on success.
type UpdateLoadBalancerNodeResponse struct {
	GetNode *UpdateLoadBalancerNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateLoadBalancerNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateLoadBalancerNodeResponse) GetGetNode() *UpdateLoadBalancerNodeGetNode {
	return v.GetNode
}

func (v *UpdateLoadBalancerNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateLoadBalancerNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateLoadBalancerNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateLoadBalancerNodeGetNode)
			err = __unmarshalUpdateLoadBalancerNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateLoadBalancerNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateLoadBalancerNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateLoadBalancerNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateLoadBalancerNodeResponse) __premarshalJSON() (*__premarshalUpdateLoadBalancerNodeResponse, error) {
	var retval __premarshalUpdateLoadBalancerNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateLoadBalancerNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateLoadBalancerNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateManagedNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateManagedNodeGetNode is implemented by the following types:
// UpdateManagedNodeGetNodeAlertEmitterNode
// UpdateManagedNodeGetNodeAppChangeReceiverNode
// UpdateManagedNodeGetNodeAppChangeRouterNode
// UpdateManagedNodeGetNodeAuditEmitterNode
// UpdateManagedNodeGetNodeBitmapRouterNode
// UpdateManagedNodeGetNodeChangeEmitterNode
// UpdateManagedNodeGetNodeCrossTenantReceivingNode
// UpdateManagedNodeGetNodeCrossTenantSendingNode
// UpdateManagedNodeGetNodeDeadLetterEmitterNode
// UpdateManagedNodeGetNodeExternalNode
// UpdateManagedNodeGetNodeFilesDotComWebhookNode
// UpdateManagedNodeGetNodeLoadBalancerNode
// UpdateManagedNodeGetNodeLogEmitterNode
// UpdateManagedNodeGetNodeManagedNode
// UpdateManagedNodeGetNodeProcessorNode
// UpdateManagedNodeGetNodeTimerNode
// UpdateManagedNodeGetNodeWebhookNode
type UpdateManagedNodeGetNode interface {
	implementsGraphQLInterfaceUpdateManagedNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateManagedNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {}
func (v *UpdateManagedNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {}
func (v *UpdateManagedNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {
}
func (v *UpdateManagedNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode()   {}
func (v *UpdateManagedNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateManagedNodeGetNode() {}

func __unmarshalUpdateManagedNodeGetNode(b []byte, v *UpdateManagedNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateManagedNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateManagedNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateManagedNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateManagedNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateManagedNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateManagedNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateManagedNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateManagedNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateManagedNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateManagedNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateManagedNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateManagedNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateManagedNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateManagedNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateManagedNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateManagedNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateManagedNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateManagedNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateManagedNodeGetNode(v *UpdateManagedNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateManagedNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateManagedNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateManagedNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateManagedNodeGetNode: "%T"`, v)
	}
}

// UpdateManagedNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateManagedNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateManagedNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateManagedNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateManagedNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateManagedNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateManagedNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateManagedNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateManagedNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateManagedNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateManagedNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateManagedNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateManagedNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateManagedNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateManagedNodeGetNodeManagedNode struct {
	Typename *string                                              `json:"__typename"`
	Update   UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode `json:"Update"`
}

// GetTypename returns UpdateManagedNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateManagedNodeGetNodeManagedNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNode) GetUpdate() UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode {
	return v.Update
}

// UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode struct {
	nodeFieldsManagedNode `json:"-"`
	managedNodeFields     `json:"-"`
}

// GetDescription returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetDescription() *string {
	return v.nodeFieldsManagedNode.Description
}

// GetName returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetName() string {
	return v.nodeFieldsManagedNode.Name
}

// GetApp returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.App, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetApp() managedNodeFieldsAppManagedApp {
	return v.managedNodeFields.App
}

// GetConfig returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.Config, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetConfig() *string {
	return v.managedNodeFields.Config
}

// GetLoggingLevel returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetLoggingLevel() *LogLevel {
	return v.managedNodeFields.LoggingLevel
}

// GetManagedNodeType returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.ManagedNodeType, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetManagedNodeType() managedNodeFieldsManagedNodeType {
	return v.managedNodeFields.ManagedNodeType
}

// GetMounts returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.Mounts, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetMounts() []managedNodeFieldsMountsMount {
	return v.managedNodeFields.Mounts
}

// GetPorts returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.Ports, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetPorts() []managedNodeFieldsPortsPort {
	return v.managedNodeFields.Ports
}

// GetReceiveMessageType returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetReceiveMessageType() *managedNodeFieldsReceiveMessageType {
	return v.managedNodeFields.ReceiveMessageType
}

// GetSendMessageType returns UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) GetSendMessageType() *managedNodeFieldsSendMessageType {
	return v.managedNodeFields.SendMessageType
}

func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsManagedNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.managedNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateManagedNodeGetNodeManagedNodeUpdateManagedNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	App managedNodeFieldsAppManagedApp `json:"app"`

	Config *string `json:"config"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedNodeType managedNodeFieldsManagedNodeType `json:"managedNodeType"`

	Mounts []managedNodeFieldsMountsMount `json:"mounts"`

	Ports []managedNodeFieldsPortsPort `json:"ports"`

	ReceiveMessageType *managedNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *managedNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateManagedNodeGetNodeManagedNodeUpdateManagedNode) __premarshalJSON() (*__premarshalUpdateManagedNodeGetNodeManagedNodeUpdateManagedNode, error) {
	var retval __premarshalUpdateManagedNodeGetNodeManagedNodeUpdateManagedNode

	retval.Description = v.nodeFieldsManagedNode.Description
	retval.Name = v.nodeFieldsManagedNode.Name
	retval.App = v.managedNodeFields.App
	retval.Config = v.managedNodeFields.Config
	retval.LoggingLevel = v.managedNodeFields.LoggingLevel
	retval.ManagedNodeType = v.managedNodeFields.ManagedNodeType
	retval.Mounts = v.managedNodeFields.Mounts
	retval.Ports = v.managedNodeFields.Ports
	retval.ReceiveMessageType = v.managedNodeFields.ReceiveMessageType
	retval.SendMessageType = v.managedNodeFields.SendMessageType
	return &retval, nil
}

// UpdateManagedNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateManagedNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateManagedNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateManagedNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateManagedNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateManagedNodeResponse is returned by UpdateManagedNode on success.
type UpdateManagedNodeResponse struct {
	GetNode *UpdateManagedNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateManagedNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeResponse) GetGetNode() *UpdateManagedNodeGetNode { return v.GetNode }

func (v *UpdateManagedNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateManagedNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateManagedNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateManagedNodeGetNode)
			err = __unmarshalUpdateManagedNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateManagedNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateManagedNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateManagedNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateManagedNodeResponse) __premarshalJSON() (*__premarshalUpdateManagedNodeResponse, error) {
	var retval __premarshalUpdateManagedNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateManagedNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateManagedNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateManagedNodeTypeGetManagedNodeType includes the requested fields of the GraphQL type ManagedNodeType.
type UpdateManagedNodeTypeGetManagedNodeType struct {
	Update UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType `json:"Update"`
}

// GetUpdate returns UpdateManagedNodeTypeGetManagedNodeType.Update, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeType) GetUpdate() UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType {
	return v.Update
}

// UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType includes the requested fields of the GraphQL type ManagedNodeType.
type UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType struct {
	managedNodeTypeFields `json:"-"`
}

// GetConfigTemplate returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.ConfigTemplate, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetConfigTemplate() *string {
	return v.managedNodeTypeFields.ConfigTemplate
}

// GetDescription returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.Description, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetDescription() string {
	return v.managedNodeTypeFields.Description
}

// GetImageUri returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.ImageUri, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetImageUri() string {
	return v.managedNodeTypeFields.ImageUri
}

// GetInUse returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.InUse, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetInUse() bool {
	return v.managedNodeTypeFields.InUse
}

// GetMountRequirements returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.MountRequirements, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetMountRequirements() []managedNodeTypeFieldsMountRequirementsMountRequirement {
	return v.managedNodeTypeFields.MountRequirements
}

// GetName returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.Name, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetName() string {
	return v.managedNodeTypeFields.Name
}

// GetPortRequirements returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.PortRequirements, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetPortRequirements() []managedNodeTypeFieldsPortRequirementsPortRequirement {
	return v.managedNodeTypeFields.PortRequirements
}

// GetReadme returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.Readme, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetReadme() *string {
	return v.managedNodeTypeFields.Readme
}

// GetReceiveMessageType returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetReceiveMessageType() *managedNodeTypeFieldsReceiveMessageType {
	return v.managedNodeTypeFields.ReceiveMessageType
}

// GetSendMessageType returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetSendMessageType() *managedNodeTypeFieldsSendMessageType {
	return v.managedNodeTypeFields.SendMessageType
}

// GetSystem returns UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType.System, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) GetSystem() *bool {
	return v.managedNodeTypeFields.System
}

func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.managedNodeTypeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType struct {
	ConfigTemplate *string `json:"configTemplate"`

	Description string `json:"description"`

	ImageUri string `json:"imageUri"`

	InUse bool `json:"inUse"`

	MountRequirements []managedNodeTypeFieldsMountRequirementsMountRequirement `json:"mountRequirements"`

	Name string `json:"name"`

	PortRequirements []managedNodeTypeFieldsPortRequirementsPortRequirement `json:"portRequirements"`

	Readme *string `json:"readme"`

	ReceiveMessageType *managedNodeTypeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *managedNodeTypeFieldsSendMessageType `json:"sendMessageType"`

	System *bool `json:"system"`
}

func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType) __premarshalJSON() (*__premarshalUpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType, error) {
	var retval __premarshalUpdateManagedNodeTypeGetManagedNodeTypeUpdateManagedNodeType

	retval.ConfigTemplate = v.managedNodeTypeFields.ConfigTemplate
	retval.Description = v.managedNodeTypeFields.Description
	retval.ImageUri = v.managedNodeTypeFields.ImageUri
	retval.InUse = v.managedNodeTypeFields.InUse
	retval.MountRequirements = v.managedNodeTypeFields.MountRequirements
	retval.Name = v.managedNodeTypeFields.Name
	retval.PortRequirements = v.managedNodeTypeFields.PortRequirements
	retval.Readme = v.managedNodeTypeFields.Readme
	retval.ReceiveMessageType = v.managedNodeTypeFields.ReceiveMessageType
	retval.SendMessageType = v.managedNodeTypeFields.SendMessageType
	retval.System = v.managedNodeTypeFields.System
	return &retval, nil
}

// UpdateManagedNodeTypeResponse is returned by UpdateManagedNodeType on success.
type UpdateManagedNodeTypeResponse struct {
	GetManagedNodeType *UpdateManagedNodeTypeGetManagedNodeType `json:"GetManagedNodeType"`
}

// GetGetManagedNodeType returns UpdateManagedNodeTypeResponse.GetManagedNodeType, and is useful for accessing the field via an interface.
func (v *UpdateManagedNodeTypeResponse) GetGetManagedNodeType() *UpdateManagedNodeTypeGetManagedNodeType {
	return v.GetManagedNodeType
}

// UpdateMessageTypeGetMessageType includes the requested fields of the GraphQL type MessageType.
type UpdateMessageTypeGetMessageType struct {
	Update UpdateMessageTypeGetMessageTypeUpdateMessageType `json:"Update"`
}

// GetUpdate returns UpdateMessageTypeGetMessageType.Update, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageType) GetUpdate() UpdateMessageTypeGetMessageTypeUpdateMessageType {
	return v.Update
}

// UpdateMessageTypeGetMessageTypeUpdateMessageType includes the requested fields of the GraphQL type MessageType.
type UpdateMessageTypeGetMessageTypeUpdateMessageType struct {
	messageTypeFields `json:"-"`
}

// GetAuditor returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Auditor, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetAuditor() string {
	return v.messageTypeFields.Auditor
}

// GetBitmapperTemplate returns UpdateMessageTypeGetMessageTypeUpdateMessageType.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetBitmapperTemplate() string {
	return v.messageTypeFields.BitmapperTemplate
}

// GetDescription returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Description, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetDescription() string {
	return v.messageTypeFields.Description
}

// GetInUse returns UpdateMessageTypeGetMessageTypeUpdateMessageType.InUse, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetInUse() bool {
	return v.messageTypeFields.InUse
}

// GetName returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Name, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetName() string {
	return v.messageTypeFields.Name
}

// GetProcessorTemplate returns UpdateMessageTypeGetMessageTypeUpdateMessageType.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetProcessorTemplate() string {
	return v.messageTypeFields.ProcessorTemplate
}

// GetReadme returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Readme, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetReadme() *string {
	return v.messageTypeFields.Readme
}

// GetRequirements returns UpdateMessageTypeGetMessageTypeUpdateMessageType.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetRequirements() []string {
	return v.messageTypeFields.Requirements
}

// GetSampleMessage returns UpdateMessageTypeGetMessageTypeUpdateMessageType.SampleMessage, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetSampleMessage() string {
	return v.messageTypeFields.SampleMessage
}

// GetSystem returns UpdateMessageTypeGetMessageTypeUpdateMessageType.System, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) GetSystem() *bool {
	return v.messageTypeFields.System
}

func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateMessageTypeGetMessageTypeUpdateMessageType
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateMessageTypeGetMessageTypeUpdateMessageType = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.messageTypeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateMessageTypeGetMessageTypeUpdateMessageType struct {
	Auditor string `json:"auditor"`

	BitmapperTemplate string `json:"bitmapperTemplate"`

	Description string `json:"description"`

	InUse bool `json:"inUse"`

	Name string `json:"name"`

	ProcessorTemplate string `json:"processorTemplate"`

	Readme *string `json:"readme"`

	Requirements []string `json:"requirements"`

	SampleMessage string `json:"sampleMessage"`

	System *bool `json:"system"`
}

func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateMessageTypeGetMessageTypeUpdateMessageType) __premarshalJSON() (*__premarshalUpdateMessageTypeGetMessageTypeUpdateMessageType, error) {
	var retval __premarshalUpdateMessageTypeGetMessageTypeUpdateMessageType

	retval.Auditor = v.messageTypeFields.Auditor
	retval.BitmapperTemplate = v.messageTypeFields.BitmapperTemplate
	retval.Description = v.messageTypeFields.Description
	retval.InUse = v.messageTypeFields.InUse
	retval.Name = v.messageTypeFields.Name
	retval.ProcessorTemplate = v.messageTypeFields.ProcessorTemplate
	retval.Readme = v.messageTypeFields.Readme
	retval.Requirements = v.messageTypeFields.Requirements
	retval.SampleMessage = v.messageTypeFields.SampleMessage
	retval.System = v.messageTypeFields.System
	return &retval, nil
}

// UpdateMessageTypeResponse is returned by UpdateMessageType on success.
type UpdateMessageTypeResponse struct {
	GetMessageType *UpdateMessageTypeGetMessageType `json:"GetMessageType"`
}

// GetGetMessageType returns UpdateMessageTypeResponse.GetMessageType, and is useful for accessing the field via an interface.
func (v *UpdateMessageTypeResponse) GetGetMessageType() *UpdateMessageTypeGetMessageType {
	return v.GetMessageType
}

// UpdateProcessorNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateProcessorNodeGetNode is implemented by the following types:
// UpdateProcessorNodeGetNodeAlertEmitterNode
// UpdateProcessorNodeGetNodeAppChangeReceiverNode
// UpdateProcessorNodeGetNodeAppChangeRouterNode
// UpdateProcessorNodeGetNodeAuditEmitterNode
// UpdateProcessorNodeGetNodeBitmapRouterNode
// UpdateProcessorNodeGetNodeChangeEmitterNode
// UpdateProcessorNodeGetNodeCrossTenantReceivingNode
// UpdateProcessorNodeGetNodeCrossTenantSendingNode
// UpdateProcessorNodeGetNodeDeadLetterEmitterNode
// UpdateProcessorNodeGetNodeExternalNode
// UpdateProcessorNodeGetNodeFilesDotComWebhookNode
// UpdateProcessorNodeGetNodeLoadBalancerNode
// UpdateProcessorNodeGetNodeLogEmitterNode
// UpdateProcessorNodeGetNodeManagedNode
// UpdateProcessorNodeGetNodeProcessorNode
// UpdateProcessorNodeGetNodeTimerNode
// UpdateProcessorNodeGetNodeWebhookNode
type UpdateProcessorNodeGetNode interface {
	implementsGraphQLInterfaceUpdateProcessorNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateProcessorNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}
func (v *UpdateProcessorNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateProcessorNodeGetNode() {
}

func __unmarshalUpdateProcessorNodeGetNode(b []byte, v *UpdateProcessorNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateProcessorNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateProcessorNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateProcessorNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateProcessorNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateProcessorNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateProcessorNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateProcessorNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateProcessorNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateProcessorNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateProcessorNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateProcessorNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateProcessorNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateProcessorNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateProcessorNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateProcessorNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateProcessorNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateProcessorNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateProcessorNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateProcessorNodeGetNode(v *UpdateProcessorNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateProcessorNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateProcessorNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateProcessorNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateProcessorNodeGetNode: "%T"`, v)
	}
}

// UpdateProcessorNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateProcessorNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateProcessorNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateProcessorNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateProcessorNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateProcessorNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateProcessorNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateProcessorNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateProcessorNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateProcessorNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateProcessorNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateProcessorNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateProcessorNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateProcessorNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateProcessorNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateProcessorNodeGetNodeProcessorNode struct {
	Typename *string                                                    `json:"__typename"`
	Update   UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode `json:"Update"`
}

// GetTypename returns UpdateProcessorNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateProcessorNodeGetNodeProcessorNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNode) GetUpdate() UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode {
	return v.Update
}

// UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode struct {
	nodeFieldsProcessorNode `json:"-"`
	processorNodeFields     `json:"-"`
}

// GetDescription returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetDescription() *string {
	return v.nodeFieldsProcessorNode.Description
}

// GetName returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetName() string {
	return v.nodeFieldsProcessorNode.Name
}

// GetConfig returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.Config, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetConfig() *string {
	return v.processorNodeFields.Config
}

// GetInlineProcessor returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.InlineProcessor, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetInlineProcessor() *string {
	return v.processorNodeFields.InlineProcessor
}

// GetLoggingLevel returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetLoggingLevel() *LogLevel {
	return v.processorNodeFields.LoggingLevel
}

// GetManagedProcessor returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetManagedProcessor() *processorNodeFieldsManagedProcessorProcessorFunction {
	return v.processorNodeFields.ManagedProcessor
}

// GetReceiveMessageType returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetReceiveMessageType() *processorNodeFieldsReceiveMessageType {
	return v.processorNodeFields.ReceiveMessageType
}

// GetRequirements returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetRequirements() []string {
	return v.processorNodeFields.Requirements
}

// GetSendMessageType returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetSendMessageType() *processorNodeFieldsSendMessageType {
	return v.processorNodeFields.SendMessageType
}

// GetSequentialProcessing returns UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) GetSequentialProcessing() *bool {
	return v.processorNodeFields.SequentialProcessing
}

func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsProcessorNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.processorNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Config *string `json:"config"`

	InlineProcessor *string `json:"inlineProcessor"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedProcessor *processorNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`

	ReceiveMessageType *processorNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	Requirements []string `json:"requirements"`

	SendMessageType *processorNodeFieldsSendMessageType `json:"sendMessageType"`

	SequentialProcessing *bool `json:"sequentialProcessing"`
}

func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode) __premarshalJSON() (*__premarshalUpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode, error) {
	var retval __premarshalUpdateProcessorNodeGetNodeProcessorNodeUpdateProcessorNode

	retval.Description = v.nodeFieldsProcessorNode.Description
	retval.Name = v.nodeFieldsProcessorNode.Name
	retval.Config = v.processorNodeFields.Config
	retval.InlineProcessor = v.processorNodeFields.InlineProcessor
	retval.LoggingLevel = v.processorNodeFields.LoggingLevel
	retval.ManagedProcessor = v.processorNodeFields.ManagedProcessor
	retval.ReceiveMessageType = v.processorNodeFields.ReceiveMessageType
	retval.Requirements = v.processorNodeFields.Requirements
	retval.SendMessageType = v.processorNodeFields.SendMessageType
	retval.SequentialProcessing = v.processorNodeFields.SequentialProcessing
	return &retval, nil
}

// UpdateProcessorNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateProcessorNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateProcessorNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateProcessorNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateProcessorNodeResponse is returned by UpdateProcessorNode on success.
type UpdateProcessorNodeResponse struct {
	GetNode *UpdateProcessorNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateProcessorNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateProcessorNodeResponse) GetGetNode() *UpdateProcessorNodeGetNode { return v.GetNode }

func (v *UpdateProcessorNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateProcessorNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateProcessorNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateProcessorNodeGetNode)
			err = __unmarshalUpdateProcessorNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateProcessorNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateProcessorNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateProcessorNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateProcessorNodeResponse) __premarshalJSON() (*__premarshalUpdateProcessorNodeResponse, error) {
	var retval __premarshalUpdateProcessorNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateProcessorNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateProcessorNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateRemotetAppGetApp includes the requested fields of the GraphQL interface App.
//
// UpdateRemotetAppGetApp is implemented by the following types:
// UpdateRemotetAppGetAppCrossAccountApp
// UpdateRemotetAppGetAppCrossTenantReceivingApp
// UpdateRemotetAppGetAppCrossTenantSendingApp
// UpdateRemotetAppGetAppExternalApp
// UpdateRemotetAppGetAppManagedApp
type UpdateRemotetAppGetApp interface {
	implementsGraphQLInterfaceUpdateRemotetAppGetApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateRemotetAppGetAppCrossAccountApp) implementsGraphQLInterfaceUpdateRemotetAppGetApp() {}
func (v *UpdateRemotetAppGetAppCrossTenantReceivingApp) implementsGraphQLInterfaceUpdateRemotetAppGetApp() {
}
func (v *UpdateRemotetAppGetAppCrossTenantSendingApp) implementsGraphQLInterfaceUpdateRemotetAppGetApp() {
}
func (v *UpdateRemotetAppGetAppExternalApp) implementsGraphQLInterfaceUpdateRemotetAppGetApp() {}
func (v *UpdateRemotetAppGetAppManagedApp) implementsGraphQLInterfaceUpdateRemotetAppGetApp()  {}

func __unmarshalUpdateRemotetAppGetApp(b []byte, v *UpdateRemotetAppGetApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(UpdateRemotetAppGetAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(UpdateRemotetAppGetAppCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(UpdateRemotetAppGetAppCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(UpdateRemotetAppGetAppExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(UpdateRemotetAppGetAppManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateRemotetAppGetApp: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateRemotetAppGetApp(v *UpdateRemotetAppGetApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateRemotetAppGetAppCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRemotetAppGetAppCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRemotetAppGetAppCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRemotetAppGetAppCrossTenantReceivingApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRemotetAppGetAppCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRemotetAppGetAppCrossTenantSendingApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRemotetAppGetAppExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRemotetAppGetAppExternalApp
		}{typename, v}
		return json.Marshal(result)
	case *UpdateRemotetAppGetAppManagedApp:
		typename = "ManagedApp"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateRemotetAppGetAppManagedApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateRemotetAppGetApp: "%T"`, v)
	}
}

// UpdateRemotetAppGetAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type UpdateRemotetAppGetAppCrossAccountApp struct {
	Typename *string                                                    `json:"__typename"`
	Update   UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp `json:"Update"`
}

// GetTypename returns UpdateRemotetAppGetAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountApp) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateRemotetAppGetAppCrossAccountApp.Update, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountApp) GetUpdate() UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp {
	return v.Update
}

// UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp struct {
	appFieldsCrossAccountApp `json:"-"`
	crossAccountAppFields    `json:"-"`
}

// GetDescription returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.Description, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetDescription() *string {
	return v.appFieldsCrossAccountApp.Description
}

// GetName returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.Name, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetName() string {
	return v.appFieldsCrossAccountApp.Name
}

// GetAccount returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.Account, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetAccount() string {
	return v.crossAccountAppFields.Account
}

// GetAppsyncEndpoint returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetAppsyncEndpoint() string {
	return v.crossAccountAppFields.AppsyncEndpoint
}

// GetAuditRecordsEndpoint returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetAuditRecordsEndpoint() string {
	return v.crossAccountAppFields.AuditRecordsEndpoint
}

// GetConfig returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.Config, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetConfig() *string {
	return v.crossAccountAppFields.Config
}

// GetCredentials returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.Credentials, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetCredentials() crossAccountAppFieldsCredentialsCognitoCredentials {
	return v.crossAccountAppFields.Credentials
}

// GetIamPolicy returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.IamPolicy, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetIamPolicy() string {
	return v.crossAccountAppFields.IamPolicy
}

// GetTableAccess returns UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp.TableAccess, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) GetTableAccess() bool {
	return v.crossAccountAppFields.TableAccess
}

func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsCrossAccountApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.crossAccountAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Account string `json:"account"`

	AppsyncEndpoint string `json:"appsyncEndpoint"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials crossAccountAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	IamPolicy string `json:"iamPolicy"`

	TableAccess bool `json:"tableAccess"`
}

func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp) __premarshalJSON() (*__premarshalUpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp, error) {
	var retval __premarshalUpdateRemotetAppGetAppCrossAccountAppUpdateCrossAccountApp

	retval.Description = v.appFieldsCrossAccountApp.Description
	retval.Name = v.appFieldsCrossAccountApp.Name
	retval.Account = v.crossAccountAppFields.Account
	retval.AppsyncEndpoint = v.crossAccountAppFields.AppsyncEndpoint
	retval.AuditRecordsEndpoint = v.crossAccountAppFields.AuditRecordsEndpoint
	retval.Config = v.crossAccountAppFields.Config
	retval.Credentials = v.crossAccountAppFields.Credentials
	retval.IamPolicy = v.crossAccountAppFields.IamPolicy
	retval.TableAccess = v.crossAccountAppFields.TableAccess
	return &retval, nil
}

// UpdateRemotetAppGetAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type UpdateRemotetAppGetAppCrossTenantReceivingApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateRemotetAppGetAppCrossTenantReceivingApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossTenantReceivingApp) GetTypename() *string { return v.Typename }

// UpdateRemotetAppGetAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type UpdateRemotetAppGetAppCrossTenantSendingApp struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateRemotetAppGetAppCrossTenantSendingApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppCrossTenantSendingApp) GetTypename() *string { return v.Typename }

// UpdateRemotetAppGetAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type UpdateRemotetAppGetAppExternalApp struct {
	Typename *string                                            `json:"__typename"`
	Update   UpdateRemotetAppGetAppExternalAppUpdateExternalApp `json:"Update"`
}

// GetTypename returns UpdateRemotetAppGetAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalApp) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateRemotetAppGetAppExternalApp.Update, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalApp) GetUpdate() UpdateRemotetAppGetAppExternalAppUpdateExternalApp {
	return v.Update
}

// UpdateRemotetAppGetAppExternalAppUpdateExternalApp includes the requested fields of the GraphQL type ExternalApp.
type UpdateRemotetAppGetAppExternalAppUpdateExternalApp struct {
	appFieldsExternalApp `json:"-"`
	externalAppFields    `json:"-"`
}

// GetDescription returns UpdateRemotetAppGetAppExternalAppUpdateExternalApp.Description, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) GetDescription() *string {
	return v.appFieldsExternalApp.Description
}

// GetName returns UpdateRemotetAppGetAppExternalAppUpdateExternalApp.Name, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) GetName() string {
	return v.appFieldsExternalApp.Name
}

// GetAppsyncEndpoint returns UpdateRemotetAppGetAppExternalAppUpdateExternalApp.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) GetAppsyncEndpoint() string {
	return v.externalAppFields.AppsyncEndpoint
}

// GetAuditRecordsEndpoint returns UpdateRemotetAppGetAppExternalAppUpdateExternalApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) GetAuditRecordsEndpoint() string {
	return v.externalAppFields.AuditRecordsEndpoint
}

// GetConfig returns UpdateRemotetAppGetAppExternalAppUpdateExternalApp.Config, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) GetConfig() *string {
	return v.externalAppFields.Config
}

// GetCredentials returns UpdateRemotetAppGetAppExternalAppUpdateExternalApp.Credentials, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) GetCredentials() externalAppFieldsCredentialsCognitoCredentials {
	return v.externalAppFields.Credentials
}

// GetTableAccess returns UpdateRemotetAppGetAppExternalAppUpdateExternalApp.TableAccess, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) GetTableAccess() bool {
	return v.externalAppFields.TableAccess
}

func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRemotetAppGetAppExternalAppUpdateExternalApp
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRemotetAppGetAppExternalAppUpdateExternalApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsExternalApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.externalAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRemotetAppGetAppExternalAppUpdateExternalApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	AppsyncEndpoint string `json:"appsyncEndpoint"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials externalAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	TableAccess bool `json:"tableAccess"`
}

func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRemotetAppGetAppExternalAppUpdateExternalApp) __premarshalJSON() (*__premarshalUpdateRemotetAppGetAppExternalAppUpdateExternalApp, error) {
	var retval __premarshalUpdateRemotetAppGetAppExternalAppUpdateExternalApp

	retval.Description = v.appFieldsExternalApp.Description
	retval.Name = v.appFieldsExternalApp.Name
	retval.AppsyncEndpoint = v.externalAppFields.AppsyncEndpoint
	retval.AuditRecordsEndpoint = v.externalAppFields.AuditRecordsEndpoint
	retval.Config = v.externalAppFields.Config
	retval.Credentials = v.externalAppFields.Credentials
	retval.TableAccess = v.externalAppFields.TableAccess
	return &retval, nil
}

// UpdateRemotetAppGetAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type UpdateRemotetAppGetAppManagedApp struct {
	Typename *string                                          `json:"__typename"`
	Update   UpdateRemotetAppGetAppManagedAppUpdateManagedApp `json:"Update"`
}

// GetTypename returns UpdateRemotetAppGetAppManagedApp.Typename, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedApp) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateRemotetAppGetAppManagedApp.Update, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedApp) GetUpdate() UpdateRemotetAppGetAppManagedAppUpdateManagedApp {
	return v.Update
}

// UpdateRemotetAppGetAppManagedAppUpdateManagedApp includes the requested fields of the GraphQL type ManagedApp.
type UpdateRemotetAppGetAppManagedAppUpdateManagedApp struct {
	appFieldsManagedApp `json:"-"`
	managedAppFields    `json:"-"`
}

// GetDescription returns UpdateRemotetAppGetAppManagedAppUpdateManagedApp.Description, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) GetDescription() *string {
	return v.appFieldsManagedApp.Description
}

// GetName returns UpdateRemotetAppGetAppManagedAppUpdateManagedApp.Name, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) GetName() string {
	return v.appFieldsManagedApp.Name
}

// GetAuditRecordsEndpoint returns UpdateRemotetAppGetAppManagedAppUpdateManagedApp.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) GetAuditRecordsEndpoint() string {
	return v.managedAppFields.AuditRecordsEndpoint
}

// GetConfig returns UpdateRemotetAppGetAppManagedAppUpdateManagedApp.Config, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) GetConfig() *string {
	return v.managedAppFields.Config
}

// GetCredentials returns UpdateRemotetAppGetAppManagedAppUpdateManagedApp.Credentials, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) GetCredentials() managedAppFieldsCredentialsCognitoCredentials {
	return v.managedAppFields.Credentials
}

// GetTableAccess returns UpdateRemotetAppGetAppManagedAppUpdateManagedApp.TableAccess, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) GetTableAccess() bool {
	return v.managedAppFields.TableAccess
}

func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRemotetAppGetAppManagedAppUpdateManagedApp
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRemotetAppGetAppManagedAppUpdateManagedApp = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.appFieldsManagedApp)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.managedAppFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateRemotetAppGetAppManagedAppUpdateManagedApp struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	AuditRecordsEndpoint string `json:"auditRecordsEndpoint"`

	Config *string `json:"config"`

	Credentials managedAppFieldsCredentialsCognitoCredentials `json:"credentials"`

	TableAccess bool `json:"tableAccess"`
}

func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRemotetAppGetAppManagedAppUpdateManagedApp) __premarshalJSON() (*__premarshalUpdateRemotetAppGetAppManagedAppUpdateManagedApp, error) {
	var retval __premarshalUpdateRemotetAppGetAppManagedAppUpdateManagedApp

	retval.Description = v.appFieldsManagedApp.Description
	retval.Name = v.appFieldsManagedApp.Name
	retval.AuditRecordsEndpoint = v.managedAppFields.AuditRecordsEndpoint
	retval.Config = v.managedAppFields.Config
	retval.Credentials = v.managedAppFields.Credentials
	retval.TableAccess = v.managedAppFields.TableAccess
	return &retval, nil
}

// UpdateRemotetAppResponse is returned by UpdateRemotetApp on success.
type UpdateRemotetAppResponse struct {
	GetApp *UpdateRemotetAppGetApp `json:"-"`
}

// GetGetApp returns UpdateRemotetAppResponse.GetApp, and is useful for accessing the field via an interface.
func (v *UpdateRemotetAppResponse) GetGetApp() *UpdateRemotetAppGetApp { return v.GetApp }

func (v *UpdateRemotetAppResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateRemotetAppResponse
		GetApp json.RawMessage `json:"GetApp"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateRemotetAppResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetApp
		src := firstPass.GetApp
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateRemotetAppGetApp)
			err = __unmarshalUpdateRemotetAppGetApp(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateRemotetAppResponse.GetApp: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateRemotetAppResponse struct {
	GetApp json.RawMessage `json:"GetApp"`
}

func (v *UpdateRemotetAppResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateRemotetAppResponse) __premarshalJSON() (*__premarshalUpdateRemotetAppResponse, error) {
	var retval __premarshalUpdateRemotetAppResponse

	{

		dst := &retval.GetApp
		src := v.GetApp
		if src != nil {
			var err error
			*dst, err = __marshalUpdateRemotetAppGetApp(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateRemotetAppResponse.GetApp: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateTenantGetTenant includes the requested fields of the GraphQL type Tenant.
type UpdateTenantGetTenant struct {
	Update UpdateTenantGetTenantUpdateTenant `json:"Update"`
}

// GetUpdate returns UpdateTenantGetTenant.Update, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenant) GetUpdate() UpdateTenantGetTenantUpdateTenant { return v.Update }

// UpdateTenantGetTenantUpdateTenant includes the requested fields of the GraphQL type Tenant.
type UpdateTenantGetTenantUpdateTenant struct {
	tenantFields `json:"-"`
}

// GetActive returns UpdateTenantGetTenantUpdateTenant.Active, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetActive() bool { return v.tenantFields.Active }

// GetConfig returns UpdateTenantGetTenantUpdateTenant.Config, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetConfig() *string { return v.tenantFields.Config }

// GetDescription returns UpdateTenantGetTenantUpdateTenant.Description, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetDescription() *string {
	return v.tenantFields.Description
}

// GetName returns UpdateTenantGetTenantUpdateTenant.Name, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetName() string { return v.tenantFields.Name }

// GetRegion returns UpdateTenantGetTenantUpdateTenant.Region, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetRegion() string { return v.tenantFields.Region }

// GetTable returns UpdateTenantGetTenantUpdateTenant.Table, and is useful for accessing the field via an interface.
func (v *UpdateTenantGetTenantUpdateTenant) GetTable() string { return v.tenantFields.Table }

func (v *UpdateTenantGetTenantUpdateTenant) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateTenantGetTenantUpdateTenant
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateTenantGetTenantUpdateTenant = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.tenantFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateTenantGetTenantUpdateTenant struct {
	Active bool `json:"active"`

	Config *string `json:"config"`

	Description *string `json:"description"`

	Name string `json:"name"`

	Region string `json:"region"`

	Table string `json:"table"`
}

func (v *UpdateTenantGetTenantUpdateTenant) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateTenantGetTenantUpdateTenant) __premarshalJSON() (*__premarshalUpdateTenantGetTenantUpdateTenant, error) {
	var retval __premarshalUpdateTenantGetTenantUpdateTenant

	retval.Active = v.tenantFields.Active
	retval.Config = v.tenantFields.Config
	retval.Description = v.tenantFields.Description
	retval.Name = v.tenantFields.Name
	retval.Region = v.tenantFields.Region
	retval.Table = v.tenantFields.Table
	return &retval, nil
}

// UpdateTenantResponse is returned by UpdateTenant on success.
type UpdateTenantResponse struct {
	GetTenant *UpdateTenantGetTenant `json:"GetTenant"`
}

// GetGetTenant returns UpdateTenantResponse.GetTenant, and is useful for accessing the field via an interface.
func (v *UpdateTenantResponse) GetGetTenant() *UpdateTenantGetTenant { return v.GetTenant }

// UpdateTimerNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateTimerNodeGetNode is implemented by the following types:
// UpdateTimerNodeGetNodeAlertEmitterNode
// UpdateTimerNodeGetNodeAppChangeReceiverNode
// UpdateTimerNodeGetNodeAppChangeRouterNode
// UpdateTimerNodeGetNodeAuditEmitterNode
// UpdateTimerNodeGetNodeBitmapRouterNode
// UpdateTimerNodeGetNodeChangeEmitterNode
// UpdateTimerNodeGetNodeCrossTenantReceivingNode
// UpdateTimerNodeGetNodeCrossTenantSendingNode
// UpdateTimerNodeGetNodeDeadLetterEmitterNode
// UpdateTimerNodeGetNodeExternalNode
// UpdateTimerNodeGetNodeFilesDotComWebhookNode
// UpdateTimerNodeGetNodeLoadBalancerNode
// UpdateTimerNodeGetNodeLogEmitterNode
// UpdateTimerNodeGetNodeManagedNode
// UpdateTimerNodeGetNodeProcessorNode
// UpdateTimerNodeGetNodeTimerNode
// UpdateTimerNodeGetNodeWebhookNode
type UpdateTimerNodeGetNode interface {
	implementsGraphQLInterfaceUpdateTimerNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateTimerNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {}
func (v *UpdateTimerNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {
}
func (v *UpdateTimerNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {
}
func (v *UpdateTimerNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {}
func (v *UpdateTimerNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {}
func (v *UpdateTimerNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {
}
func (v *UpdateTimerNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {
}
func (v *UpdateTimerNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {
}
func (v *UpdateTimerNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {
}
func (v *UpdateTimerNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {}
func (v *UpdateTimerNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {
}
func (v *UpdateTimerNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode() {}
func (v *UpdateTimerNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode()   {}
func (v *UpdateTimerNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode()      {}
func (v *UpdateTimerNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode()    {}
func (v *UpdateTimerNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode()        {}
func (v *UpdateTimerNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateTimerNodeGetNode()      {}

func __unmarshalUpdateTimerNodeGetNode(b []byte, v *UpdateTimerNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateTimerNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateTimerNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateTimerNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateTimerNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateTimerNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateTimerNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateTimerNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateTimerNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateTimerNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateTimerNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateTimerNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateTimerNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateTimerNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateTimerNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateTimerNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateTimerNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateTimerNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateTimerNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateTimerNodeGetNode(v *UpdateTimerNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateTimerNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateTimerNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateTimerNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateTimerNodeGetNode: "%T"`, v)
	}
}

// UpdateTimerNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateTimerNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateTimerNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateTimerNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateTimerNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateTimerNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateTimerNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateTimerNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateTimerNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateTimerNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateTimerNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateTimerNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateTimerNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateTimerNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateTimerNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateTimerNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateTimerNodeGetNodeTimerNode struct {
	Typename *string                                        `json:"__typename"`
	Update   UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode `json:"Update"`
}

// GetTypename returns UpdateTimerNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateTimerNodeGetNodeTimerNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeTimerNode) GetUpdate() UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode {
	return v.Update
}

// UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode struct {
	nodeFieldsTimerNode `json:"-"`
	timerNodeFields     `json:"-"`
}

// GetDescription returns UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode) GetDescription() *string {
	return v.nodeFieldsTimerNode.Description
}

// GetName returns UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode) GetName() string {
	return v.nodeFieldsTimerNode.Name
}

// GetScheduleExpression returns UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode.ScheduleExpression, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode) GetScheduleExpression() string {
	return v.timerNodeFields.ScheduleExpression
}

// GetSendMessageType returns UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode) GetSendMessageType() *timerNodeFieldsSendMessageType {
	return v.timerNodeFields.SendMessageType
}

func (v *UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsTimerNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.timerNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateTimerNodeGetNodeTimerNodeUpdateTimerNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	ScheduleExpression string `json:"scheduleExpression"`

	SendMessageType *timerNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateTimerNodeGetNodeTimerNodeUpdateTimerNode) __premarshalJSON() (*__premarshalUpdateTimerNodeGetNodeTimerNodeUpdateTimerNode, error) {
	var retval __premarshalUpdateTimerNodeGetNodeTimerNodeUpdateTimerNode

	retval.Description = v.nodeFieldsTimerNode.Description
	retval.Name = v.nodeFieldsTimerNode.Name
	retval.ScheduleExpression = v.timerNodeFields.ScheduleExpression
	retval.SendMessageType = v.timerNodeFields.SendMessageType
	return &retval, nil
}

// UpdateTimerNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateTimerNodeGetNodeWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateTimerNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// UpdateTimerNodeResponse is returned by UpdateTimerNode on success.
type UpdateTimerNodeResponse struct {
	GetNode *UpdateTimerNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateTimerNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateTimerNodeResponse) GetGetNode() *UpdateTimerNodeGetNode { return v.GetNode }

func (v *UpdateTimerNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateTimerNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateTimerNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateTimerNodeGetNode)
			err = __unmarshalUpdateTimerNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateTimerNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateTimerNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateTimerNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateTimerNodeResponse) __premarshalJSON() (*__premarshalUpdateTimerNodeResponse, error) {
	var retval __premarshalUpdateTimerNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateTimerNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateTimerNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// UpdateWebhookNodeGetNode includes the requested fields of the GraphQL interface Node.
//
// UpdateWebhookNodeGetNode is implemented by the following types:
// UpdateWebhookNodeGetNodeAlertEmitterNode
// UpdateWebhookNodeGetNodeAppChangeReceiverNode
// UpdateWebhookNodeGetNodeAppChangeRouterNode
// UpdateWebhookNodeGetNodeAuditEmitterNode
// UpdateWebhookNodeGetNodeBitmapRouterNode
// UpdateWebhookNodeGetNodeChangeEmitterNode
// UpdateWebhookNodeGetNodeCrossTenantReceivingNode
// UpdateWebhookNodeGetNodeCrossTenantSendingNode
// UpdateWebhookNodeGetNodeDeadLetterEmitterNode
// UpdateWebhookNodeGetNodeExternalNode
// UpdateWebhookNodeGetNodeFilesDotComWebhookNode
// UpdateWebhookNodeGetNodeLoadBalancerNode
// UpdateWebhookNodeGetNodeLogEmitterNode
// UpdateWebhookNodeGetNodeManagedNode
// UpdateWebhookNodeGetNodeProcessorNode
// UpdateWebhookNodeGetNodeTimerNode
// UpdateWebhookNodeGetNodeWebhookNode
type UpdateWebhookNodeGetNode interface {
	implementsGraphQLInterfaceUpdateWebhookNodeGetNode()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *UpdateWebhookNodeGetNodeAlertEmitterNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeAppChangeReceiverNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeAppChangeRouterNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeAuditEmitterNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeBitmapRouterNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeChangeEmitterNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeCrossTenantReceivingNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeCrossTenantSendingNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeDeadLetterEmitterNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeExternalNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {}
func (v *UpdateWebhookNodeGetNodeFilesDotComWebhookNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeLoadBalancerNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeLogEmitterNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeManagedNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {}
func (v *UpdateWebhookNodeGetNodeProcessorNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {
}
func (v *UpdateWebhookNodeGetNodeTimerNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode()   {}
func (v *UpdateWebhookNodeGetNodeWebhookNode) implementsGraphQLInterfaceUpdateWebhookNodeGetNode() {}

func __unmarshalUpdateWebhookNodeGetNode(b []byte, v *UpdateWebhookNodeGetNode) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(UpdateWebhookNodeGetNodeAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(UpdateWebhookNodeGetNodeAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(UpdateWebhookNodeGetNodeAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(UpdateWebhookNodeGetNodeAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(UpdateWebhookNodeGetNodeBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(UpdateWebhookNodeGetNodeChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(UpdateWebhookNodeGetNodeCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(UpdateWebhookNodeGetNodeCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(UpdateWebhookNodeGetNodeDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(UpdateWebhookNodeGetNodeExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(UpdateWebhookNodeGetNodeFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(UpdateWebhookNodeGetNodeLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(UpdateWebhookNodeGetNodeLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(UpdateWebhookNodeGetNodeManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(UpdateWebhookNodeGetNodeProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(UpdateWebhookNodeGetNodeTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(UpdateWebhookNodeGetNodeWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for UpdateWebhookNodeGetNode: "%v"`, tn.TypeName)
	}
}

func __marshalUpdateWebhookNodeGetNode(v *UpdateWebhookNodeGetNode) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *UpdateWebhookNodeGetNodeAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *UpdateWebhookNodeGetNodeWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*UpdateWebhookNodeGetNodeWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for UpdateWebhookNodeGetNode: "%T"`, v)
	}
}

// UpdateWebhookNodeGetNodeAlertEmitterNode includes the requested fields of the GraphQL type AlertEmitterNode.
type UpdateWebhookNodeGetNodeAlertEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeAlertEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeAlertEmitterNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeAppChangeReceiverNode includes the requested fields of the GraphQL type AppChangeReceiverNode.
type UpdateWebhookNodeGetNodeAppChangeReceiverNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeAppChangeReceiverNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeAppChangeReceiverNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeAppChangeRouterNode includes the requested fields of the GraphQL type AppChangeRouterNode.
type UpdateWebhookNodeGetNodeAppChangeRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeAppChangeRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeAppChangeRouterNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeAuditEmitterNode includes the requested fields of the GraphQL type AuditEmitterNode.
type UpdateWebhookNodeGetNodeAuditEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeAuditEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeAuditEmitterNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeBitmapRouterNode includes the requested fields of the GraphQL type BitmapRouterNode.
type UpdateWebhookNodeGetNodeBitmapRouterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeBitmapRouterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeBitmapRouterNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeChangeEmitterNode includes the requested fields of the GraphQL type ChangeEmitterNode.
type UpdateWebhookNodeGetNodeChangeEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeChangeEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeChangeEmitterNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeCrossTenantReceivingNode includes the requested fields of the GraphQL type CrossTenantReceivingNode.
type UpdateWebhookNodeGetNodeCrossTenantReceivingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeCrossTenantReceivingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeCrossTenantReceivingNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeCrossTenantSendingNode includes the requested fields of the GraphQL type CrossTenantSendingNode.
type UpdateWebhookNodeGetNodeCrossTenantSendingNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeCrossTenantSendingNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeCrossTenantSendingNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeDeadLetterEmitterNode includes the requested fields of the GraphQL type DeadLetterEmitterNode.
type UpdateWebhookNodeGetNodeDeadLetterEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeDeadLetterEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeDeadLetterEmitterNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeExternalNode includes the requested fields of the GraphQL type ExternalNode.
type UpdateWebhookNodeGetNodeExternalNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeExternalNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeExternalNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeFilesDotComWebhookNode includes the requested fields of the GraphQL type FilesDotComWebhookNode.
type UpdateWebhookNodeGetNodeFilesDotComWebhookNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeFilesDotComWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeFilesDotComWebhookNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeLoadBalancerNode includes the requested fields of the GraphQL type LoadBalancerNode.
type UpdateWebhookNodeGetNodeLoadBalancerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeLoadBalancerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeLoadBalancerNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeLogEmitterNode includes the requested fields of the GraphQL type LogEmitterNode.
type UpdateWebhookNodeGetNodeLogEmitterNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeLogEmitterNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeLogEmitterNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeManagedNode includes the requested fields of the GraphQL type ManagedNode.
type UpdateWebhookNodeGetNodeManagedNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeManagedNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeManagedNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeProcessorNode includes the requested fields of the GraphQL type ProcessorNode.
type UpdateWebhookNodeGetNodeProcessorNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeProcessorNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeProcessorNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeTimerNode includes the requested fields of the GraphQL type TimerNode.
type UpdateWebhookNodeGetNodeTimerNode struct {
	Typename *string `json:"__typename"`
}

// GetTypename returns UpdateWebhookNodeGetNodeTimerNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeTimerNode) GetTypename() *string { return v.Typename }

// UpdateWebhookNodeGetNodeWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateWebhookNodeGetNodeWebhookNode struct {
	Typename *string                                              `json:"__typename"`
	Update   UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode `json:"Update"`
}

// GetTypename returns UpdateWebhookNodeGetNodeWebhookNode.Typename, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNode) GetTypename() *string { return v.Typename }

// GetUpdate returns UpdateWebhookNodeGetNodeWebhookNode.Update, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNode) GetUpdate() UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode {
	return v.Update
}

// UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode includes the requested fields of the GraphQL type WebhookNode.
type UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode struct {
	nodeFieldsWebhookNode `json:"-"`
	webhookNodeFields     `json:"-"`
}

// GetDescription returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetDescription() *string {
	return v.nodeFieldsWebhookNode.Description
}

// GetName returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetName() string {
	return v.nodeFieldsWebhookNode.Name
}

// GetConfig returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.Config, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetConfig() *string {
	return v.webhookNodeFields.Config
}

// GetEndpoint returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.Endpoint, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetEndpoint() string {
	return v.webhookNodeFields.Endpoint
}

// GetInlineApiAuthenticator returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.InlineApiAuthenticator, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetInlineApiAuthenticator() *string {
	return v.webhookNodeFields.InlineApiAuthenticator
}

// GetLoggingLevel returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.LoggingLevel, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetLoggingLevel() *LogLevel {
	return v.webhookNodeFields.LoggingLevel
}

// GetManagedApiAuthenticator returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.ManagedApiAuthenticator, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetManagedApiAuthenticator() *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction {
	return v.webhookNodeFields.ManagedApiAuthenticator
}

// GetRequirements returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.Requirements, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetRequirements() []string {
	return v.webhookNodeFields.Requirements
}

// GetSendMessageType returns UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode.SendMessageType, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) GetSendMessageType() *webhookNodeFieldsSendMessageType {
	return v.webhookNodeFields.SendMessageType
}

func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.nodeFieldsWebhookNode)
	if err != nil {
		return err
	}
	err = json.Unmarshal(
		b, &v.webhookNodeFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalUpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode struct {
	Description *string `json:"description"`

	Name string `json:"name"`

	Config *string `json:"config"`

	Endpoint string `json:"endpoint"`

	InlineApiAuthenticator *string `json:"inlineApiAuthenticator"`

	LoggingLevel *LogLevel `json:"loggingLevel"`

	ManagedApiAuthenticator *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction `json:"managedApiAuthenticator"`

	Requirements []string `json:"requirements"`

	SendMessageType *webhookNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode) __premarshalJSON() (*__premarshalUpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode, error) {
	var retval __premarshalUpdateWebhookNodeGetNodeWebhookNodeUpdateWebhookNode

	retval.Description = v.nodeFieldsWebhookNode.Description
	retval.Name = v.nodeFieldsWebhookNode.Name
	retval.Config = v.webhookNodeFields.Config
	retval.Endpoint = v.webhookNodeFields.Endpoint
	retval.InlineApiAuthenticator = v.webhookNodeFields.InlineApiAuthenticator
	retval.LoggingLevel = v.webhookNodeFields.LoggingLevel
	retval.ManagedApiAuthenticator = v.webhookNodeFields.ManagedApiAuthenticator
	retval.Requirements = v.webhookNodeFields.Requirements
	retval.SendMessageType = v.webhookNodeFields.SendMessageType
	return &retval, nil
}

// UpdateWebhookNodeResponse is returned by UpdateWebhookNode on success.
type UpdateWebhookNodeResponse struct {
	GetNode *UpdateWebhookNodeGetNode `json:"-"`
}

// GetGetNode returns UpdateWebhookNodeResponse.GetNode, and is useful for accessing the field via an interface.
func (v *UpdateWebhookNodeResponse) GetGetNode() *UpdateWebhookNodeGetNode { return v.GetNode }

func (v *UpdateWebhookNodeResponse) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*UpdateWebhookNodeResponse
		GetNode json.RawMessage `json:"GetNode"`
		graphql.NoUnmarshalJSON
	}
	firstPass.UpdateWebhookNodeResponse = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.GetNode
		src := firstPass.GetNode
		if len(src) != 0 && string(src) != "null" {
			*dst = new(UpdateWebhookNodeGetNode)
			err = __unmarshalUpdateWebhookNodeGetNode(
				src, *dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal UpdateWebhookNodeResponse.GetNode: %w", err)
			}
		}
	}
	return nil
}

type __premarshalUpdateWebhookNodeResponse struct {
	GetNode json.RawMessage `json:"GetNode"`
}

func (v *UpdateWebhookNodeResponse) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *UpdateWebhookNodeResponse) __premarshalJSON() (*__premarshalUpdateWebhookNodeResponse, error) {
	var retval __premarshalUpdateWebhookNodeResponse

	{

		dst := &retval.GetNode
		src := v.GetNode
		if src != nil {
			var err error
			*dst, err = __marshalUpdateWebhookNodeGetNode(
				src)
			if err != nil {
				return nil, fmt.Errorf(
					"Unable to marshal UpdateWebhookNodeResponse.GetNode: %w", err)
			}
		}
	}
	return &retval, nil
}

// __CreateApiAuthenticatorFunctionInput is used internally by genqlient
type __CreateApiAuthenticatorFunctionInput struct {
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	Name         string   `json:"name"`
	Tenant       string   `json:"tenant"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
}

// GetCode returns __CreateApiAuthenticatorFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetCode() string { return v.Code }

// GetDescription returns __CreateApiAuthenticatorFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetDescription() string { return v.Description }

// GetName returns __CreateApiAuthenticatorFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetName() string { return v.Name }

// GetTenant returns __CreateApiAuthenticatorFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateApiAuthenticatorFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateApiAuthenticatorFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateApiAuthenticatorFunctionInput) GetRequirements() []string { return v.Requirements }

// __CreateBitmapRouterNodeInput is used internally by genqlient
type __CreateBitmapRouterNodeInput struct {
	Name               string    `json:"name"`
	ReceiveMessageType string    `json:"receiveMessageType"`
	Tenant             string    `json:"tenant"`
	Config             *string   `json:"config"`
	Description        *string   `json:"description"`
	InlineBitmapper    *string   `json:"inlineBitmapper"`
	LoggingLevel       *LogLevel `json:"loggingLevel"`
	ManagedBitmapper   *string   `json:"managedBitmapper"`
	Requirements       []string  `json:"requirements"`
	RouteTable         *string   `json:"routeTable"`
}

// GetName returns __CreateBitmapRouterNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetName() string { return v.Name }

// GetReceiveMessageType returns __CreateBitmapRouterNodeInput.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetReceiveMessageType() string { return v.ReceiveMessageType }

// GetTenant returns __CreateBitmapRouterNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateBitmapRouterNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateBitmapRouterNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetDescription() *string { return v.Description }

// GetInlineBitmapper returns __CreateBitmapRouterNodeInput.InlineBitmapper, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetInlineBitmapper() *string { return v.InlineBitmapper }

// GetLoggingLevel returns __CreateBitmapRouterNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedBitmapper returns __CreateBitmapRouterNodeInput.ManagedBitmapper, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetManagedBitmapper() *string { return v.ManagedBitmapper }

// GetRequirements returns __CreateBitmapRouterNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetRequirements() []string { return v.Requirements }

// GetRouteTable returns __CreateBitmapRouterNodeInput.RouteTable, and is useful for accessing the field via an interface.
func (v *__CreateBitmapRouterNodeInput) GetRouteTable() *string { return v.RouteTable }

// __CreateBitmapperFunctionInput is used internally by genqlient
type __CreateBitmapperFunctionInput struct {
	ArgumentMessageType string   `json:"argumentMessageType"`
	Code                string   `json:"code"`
	Description         string   `json:"description"`
	Name                string   `json:"name"`
	Tenant              string   `json:"tenant"`
	Readme              *string  `json:"readme"`
	Requirements        []string `json:"requirements"`
}

// GetArgumentMessageType returns __CreateBitmapperFunctionInput.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetArgumentMessageType() string {
	return v.ArgumentMessageType
}

// GetCode returns __CreateBitmapperFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetCode() string { return v.Code }

// GetDescription returns __CreateBitmapperFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetDescription() string { return v.Description }

// GetName returns __CreateBitmapperFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetName() string { return v.Name }

// GetTenant returns __CreateBitmapperFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateBitmapperFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateBitmapperFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateBitmapperFunctionInput) GetRequirements() []string { return v.Requirements }

// __CreateCrossAccountAppInput is used internally by genqlient
type __CreateCrossAccountAppInput struct {
	Account     string  `json:"account"`
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
	TableAccess *bool   `json:"tableAccess"`
}

// GetAccount returns __CreateCrossAccountAppInput.Account, and is useful for accessing the field via an interface.
func (v *__CreateCrossAccountAppInput) GetAccount() string { return v.Account }

// GetName returns __CreateCrossAccountAppInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateCrossAccountAppInput) GetName() string { return v.Name }

// GetTenant returns __CreateCrossAccountAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateCrossAccountAppInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateCrossAccountAppInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateCrossAccountAppInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateCrossAccountAppInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateCrossAccountAppInput) GetDescription() *string { return v.Description }

// GetTableAccess returns __CreateCrossAccountAppInput.TableAccess, and is useful for accessing the field via an interface.
func (v *__CreateCrossAccountAppInput) GetTableAccess() *bool { return v.TableAccess }

// __CreateCrossTenantReceivingAppInput is used internally by genqlient
type __CreateCrossTenantReceivingAppInput struct {
	Name          string `json:"name"`
	SendingTenant string `json:"sendingTenant"`
	Tenant        string `json:"tenant"`
}

// GetName returns __CreateCrossTenantReceivingAppInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantReceivingAppInput) GetName() string { return v.Name }

// GetSendingTenant returns __CreateCrossTenantReceivingAppInput.SendingTenant, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantReceivingAppInput) GetSendingTenant() string { return v.SendingTenant }

// GetTenant returns __CreateCrossTenantReceivingAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantReceivingAppInput) GetTenant() string { return v.Tenant }

// __CreateCrossTenantSendingAppInput is used internally by genqlient
type __CreateCrossTenantSendingAppInput struct {
	Name            string `json:"name"`
	ReceivingApp    string `json:"receivingApp"`
	ReceivingTenant string `json:"receivingTenant"`
	Tenant          string `json:"tenant"`
}

// GetName returns __CreateCrossTenantSendingAppInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingAppInput) GetName() string { return v.Name }

// GetReceivingApp returns __CreateCrossTenantSendingAppInput.ReceivingApp, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingAppInput) GetReceivingApp() string { return v.ReceivingApp }

// GetReceivingTenant returns __CreateCrossTenantSendingAppInput.ReceivingTenant, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingAppInput) GetReceivingTenant() string { return v.ReceivingTenant }

// GetTenant returns __CreateCrossTenantSendingAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingAppInput) GetTenant() string { return v.Tenant }

// __CreateCrossTenantSendingNodeInput is used internally by genqlient
type __CreateCrossTenantSendingNodeInput struct {
	App                  string    `json:"app"`
	Name                 string    `json:"name"`
	ReceiveMessageType   string    `json:"receiveMessageType"`
	Tenant               string    `json:"tenant"`
	Config               *string   `json:"config"`
	Description          *string   `json:"description"`
	InlineProcessor      *string   `json:"inlineProcessor"`
	LoggingLevel         *LogLevel `json:"loggingLevel"`
	ManagedProcessor     *string   `json:"managedProcessor"`
	Requirements         []string  `json:"requirements"`
	SendMessageType      *string   `json:"sendMessageType"`
	SequentialProcessing *bool     `json:"sequentialProcessing"`
}

// GetApp returns __CreateCrossTenantSendingNodeInput.App, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetApp() string { return v.App }

// GetName returns __CreateCrossTenantSendingNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetName() string { return v.Name }

// GetReceiveMessageType returns __CreateCrossTenantSendingNodeInput.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetReceiveMessageType() string {
	return v.ReceiveMessageType
}

// GetTenant returns __CreateCrossTenantSendingNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateCrossTenantSendingNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateCrossTenantSendingNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetDescription() *string { return v.Description }

// GetInlineProcessor returns __CreateCrossTenantSendingNodeInput.InlineProcessor, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetInlineProcessor() *string { return v.InlineProcessor }

// GetLoggingLevel returns __CreateCrossTenantSendingNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedProcessor returns __CreateCrossTenantSendingNodeInput.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetManagedProcessor() *string {
	return v.ManagedProcessor
}

// GetRequirements returns __CreateCrossTenantSendingNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetRequirements() []string { return v.Requirements }

// GetSendMessageType returns __CreateCrossTenantSendingNodeInput.SendMessageType, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetSendMessageType() *string { return v.SendMessageType }

// GetSequentialProcessing returns __CreateCrossTenantSendingNodeInput.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *__CreateCrossTenantSendingNodeInput) GetSequentialProcessing() *bool {
	return v.SequentialProcessing
}

// __CreateExternalAppInput is used internally by genqlient
type __CreateExternalAppInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
	TableAccess *bool   `json:"tableAccess"`
}

// GetName returns __CreateExternalAppInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateExternalAppInput) GetName() string { return v.Name }

// GetTenant returns __CreateExternalAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateExternalAppInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateExternalAppInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateExternalAppInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateExternalAppInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateExternalAppInput) GetDescription() *string { return v.Description }

// GetTableAccess returns __CreateExternalAppInput.TableAccess, and is useful for accessing the field via an interface.
func (v *__CreateExternalAppInput) GetTableAccess() *bool { return v.TableAccess }

// __CreateExternalNodeInput is used internally by genqlient
type __CreateExternalNodeInput struct {
	App                string  `json:"app"`
	Name               string  `json:"name"`
	Tenant             string  `json:"tenant"`
	Config             *string `json:"config"`
	Description        *string `json:"description"`
	ReceiveMessageType *string `json:"receiveMessageType"`
	SendMessageType    *string `json:"sendMessageType"`
}

// GetApp returns __CreateExternalNodeInput.App, and is useful for accessing the field via an interface.
func (v *__CreateExternalNodeInput) GetApp() string { return v.App }

// GetName returns __CreateExternalNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateExternalNodeInput) GetName() string { return v.Name }

// GetTenant returns __CreateExternalNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateExternalNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateExternalNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateExternalNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateExternalNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateExternalNodeInput) GetDescription() *string { return v.Description }

// GetReceiveMessageType returns __CreateExternalNodeInput.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *__CreateExternalNodeInput) GetReceiveMessageType() *string { return v.ReceiveMessageType }

// GetSendMessageType returns __CreateExternalNodeInput.SendMessageType, and is useful for accessing the field via an interface.
func (v *__CreateExternalNodeInput) GetSendMessageType() *string { return v.SendMessageType }

// __CreateFilesDotComWebhookNodeInput is used internally by genqlient
type __CreateFilesDotComWebhookNodeInput struct {
	ApiKey      string  `json:"apiKey"`
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
}

// GetApiKey returns __CreateFilesDotComWebhookNodeInput.ApiKey, and is useful for accessing the field via an interface.
func (v *__CreateFilesDotComWebhookNodeInput) GetApiKey() string { return v.ApiKey }

// GetName returns __CreateFilesDotComWebhookNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateFilesDotComWebhookNodeInput) GetName() string { return v.Name }

// GetTenant returns __CreateFilesDotComWebhookNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateFilesDotComWebhookNodeInput) GetTenant() string { return v.Tenant }

// GetDescription returns __CreateFilesDotComWebhookNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateFilesDotComWebhookNodeInput) GetDescription() *string { return v.Description }

// __CreateKmsKeyInput is used internally by genqlient
type __CreateKmsKeyInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
}

// GetName returns __CreateKmsKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateKmsKeyInput) GetName() string { return v.Name }

// GetTenant returns __CreateKmsKeyInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateKmsKeyInput) GetTenant() string { return v.Tenant }

// GetDescription returns __CreateKmsKeyInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateKmsKeyInput) GetDescription() *string { return v.Description }

// __CreateLoadBalancerNodeInput is used internally by genqlient
type __CreateLoadBalancerNodeInput struct {
	Name               string  `json:"name"`
	ReceiveMessageType string  `json:"receiveMessageType"`
	Tenant             string  `json:"tenant"`
	Description        *string `json:"description"`
}

// GetName returns __CreateLoadBalancerNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateLoadBalancerNodeInput) GetName() string { return v.Name }

// GetReceiveMessageType returns __CreateLoadBalancerNodeInput.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *__CreateLoadBalancerNodeInput) GetReceiveMessageType() string { return v.ReceiveMessageType }

// GetTenant returns __CreateLoadBalancerNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateLoadBalancerNodeInput) GetTenant() string { return v.Tenant }

// GetDescription returns __CreateLoadBalancerNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateLoadBalancerNodeInput) GetDescription() *string { return v.Description }

// __CreateManagedAppInput is used internally by genqlient
type __CreateManagedAppInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
	TableAccess *bool   `json:"tableAccess"`
}

// GetName returns __CreateManagedAppInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateManagedAppInput) GetName() string { return v.Name }

// GetTenant returns __CreateManagedAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateManagedAppInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateManagedAppInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateManagedAppInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateManagedAppInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateManagedAppInput) GetDescription() *string { return v.Description }

// GetTableAccess returns __CreateManagedAppInput.TableAccess, and is useful for accessing the field via an interface.
func (v *__CreateManagedAppInput) GetTableAccess() *bool { return v.TableAccess }

// __CreateManagedNodeInput is used internally by genqlient
type __CreateManagedNodeInput struct {
	App             string       `json:"app"`
	ManagedNodeType string       `json:"managedNodeType"`
	Name            string       `json:"name"`
	Tenant          string       `json:"tenant"`
	Config          *string      `json:"config"`
	Description     *string      `json:"description"`
	LoggingLevel    *LogLevel    `json:"loggingLevel"`
	Mounts          []MountInput `json:"mounts"`
	Ports           []PortInput  `json:"ports"`
}

// GetApp returns __CreateManagedNodeInput.App, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetApp() string { return v.App }

// GetManagedNodeType returns __CreateManagedNodeInput.ManagedNodeType, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetManagedNodeType() string { return v.ManagedNodeType }

// GetName returns __CreateManagedNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetName() string { return v.Name }

// GetTenant returns __CreateManagedNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateManagedNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateManagedNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetDescription() *string { return v.Description }

// GetLoggingLevel returns __CreateManagedNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetMounts returns __CreateManagedNodeInput.Mounts, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetMounts() []MountInput { return v.Mounts }

// GetPorts returns __CreateManagedNodeInput.Ports, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeInput) GetPorts() []PortInput { return v.Ports }

// __CreateManagedNodeTypeInput is used internally by genqlient
type __CreateManagedNodeTypeInput struct {
	Description        string                  `json:"description"`
	ImageUri           string                  `json:"imageUri"`
	Name               string                  `json:"name"`
	Tenant             string                  `json:"tenant"`
	ConfigTemplate     *string                 `json:"configTemplate"`
	MountRequirements  []MountRequirementInput `json:"mountRequirements"`
	PortRequirements   []PortRequirementInput  `json:"portRequirements"`
	Readme             *string                 `json:"readme"`
	ReceiveMessageType *string                 `json:"receiveMessageType"`
	SendMessageType    *string                 `json:"sendMessageType"`
}

// GetDescription returns __CreateManagedNodeTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetDescription() string { return v.Description }

// GetImageUri returns __CreateManagedNodeTypeInput.ImageUri, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetImageUri() string { return v.ImageUri }

// GetName returns __CreateManagedNodeTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetName() string { return v.Name }

// GetTenant returns __CreateManagedNodeTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetTenant() string { return v.Tenant }

// GetConfigTemplate returns __CreateManagedNodeTypeInput.ConfigTemplate, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetConfigTemplate() *string { return v.ConfigTemplate }

// GetMountRequirements returns __CreateManagedNodeTypeInput.MountRequirements, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetMountRequirements() []MountRequirementInput {
	return v.MountRequirements
}

// GetPortRequirements returns __CreateManagedNodeTypeInput.PortRequirements, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetPortRequirements() []PortRequirementInput {
	return v.PortRequirements
}

// GetReadme returns __CreateManagedNodeTypeInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetReadme() *string { return v.Readme }

// GetReceiveMessageType returns __CreateManagedNodeTypeInput.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetReceiveMessageType() *string { return v.ReceiveMessageType }

// GetSendMessageType returns __CreateManagedNodeTypeInput.SendMessageType, and is useful for accessing the field via an interface.
func (v *__CreateManagedNodeTypeInput) GetSendMessageType() *string { return v.SendMessageType }

// __CreateMessageTypeInput is used internally by genqlient
type __CreateMessageTypeInput struct {
	Auditor           string   `json:"auditor"`
	BitmapperTemplate string   `json:"bitmapperTemplate"`
	Description       string   `json:"description"`
	Name              string   `json:"name"`
	ProcessorTemplate string   `json:"processorTemplate"`
	SampleMessage     string   `json:"sampleMessage"`
	Tenant            string   `json:"tenant"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
}

// GetAuditor returns __CreateMessageTypeInput.Auditor, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetAuditor() string { return v.Auditor }

// GetBitmapperTemplate returns __CreateMessageTypeInput.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetBitmapperTemplate() string { return v.BitmapperTemplate }

// GetDescription returns __CreateMessageTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetDescription() string { return v.Description }

// GetName returns __CreateMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetName() string { return v.Name }

// GetProcessorTemplate returns __CreateMessageTypeInput.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetProcessorTemplate() string { return v.ProcessorTemplate }

// GetSampleMessage returns __CreateMessageTypeInput.SampleMessage, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetSampleMessage() string { return v.SampleMessage }

// GetTenant returns __CreateMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateMessageTypeInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateMessageTypeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateMessageTypeInput) GetRequirements() []string { return v.Requirements }

// __CreateProcessorFunctionInput is used internally by genqlient
type __CreateProcessorFunctionInput struct {
	ArgumentMessageType string   `json:"argumentMessageType"`
	Code                string   `json:"code"`
	Description         string   `json:"description"`
	Name                string   `json:"name"`
	Tenant              string   `json:"tenant"`
	Readme              *string  `json:"readme"`
	Requirements        []string `json:"requirements"`
	ReturnMessageType   *string  `json:"returnMessageType"`
}

// GetArgumentMessageType returns __CreateProcessorFunctionInput.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetArgumentMessageType() string {
	return v.ArgumentMessageType
}

// GetCode returns __CreateProcessorFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetCode() string { return v.Code }

// GetDescription returns __CreateProcessorFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetDescription() string { return v.Description }

// GetName returns __CreateProcessorFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetName() string { return v.Name }

// GetTenant returns __CreateProcessorFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetTenant() string { return v.Tenant }

// GetReadme returns __CreateProcessorFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __CreateProcessorFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetRequirements() []string { return v.Requirements }

// GetReturnMessageType returns __CreateProcessorFunctionInput.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *__CreateProcessorFunctionInput) GetReturnMessageType() *string { return v.ReturnMessageType }

// __CreateProcessorNodeInput is used internally by genqlient
type __CreateProcessorNodeInput struct {
	Name                 string    `json:"name"`
	ReceiveMessageType   string    `json:"receiveMessageType"`
	Tenant               string    `json:"tenant"`
	Config               *string   `json:"config"`
	Description          *string   `json:"description"`
	InlineProcessor      *string   `json:"inlineProcessor"`
	LoggingLevel         *LogLevel `json:"loggingLevel"`
	ManagedProcessor     *string   `json:"managedProcessor"`
	Requirements         []string  `json:"requirements"`
	SendMessageType      *string   `json:"sendMessageType"`
	SequentialProcessing *bool     `json:"sequentialProcessing"`
}

// GetName returns __CreateProcessorNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetName() string { return v.Name }

// GetReceiveMessageType returns __CreateProcessorNodeInput.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetReceiveMessageType() string { return v.ReceiveMessageType }

// GetTenant returns __CreateProcessorNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateProcessorNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateProcessorNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetDescription() *string { return v.Description }

// GetInlineProcessor returns __CreateProcessorNodeInput.InlineProcessor, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetInlineProcessor() *string { return v.InlineProcessor }

// GetLoggingLevel returns __CreateProcessorNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedProcessor returns __CreateProcessorNodeInput.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetManagedProcessor() *string { return v.ManagedProcessor }

// GetRequirements returns __CreateProcessorNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetRequirements() []string { return v.Requirements }

// GetSendMessageType returns __CreateProcessorNodeInput.SendMessageType, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetSendMessageType() *string { return v.SendMessageType }

// GetSequentialProcessing returns __CreateProcessorNodeInput.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *__CreateProcessorNodeInput) GetSequentialProcessing() *bool { return v.SequentialProcessing }

// __CreateTimerNodeInput is used internally by genqlient
type __CreateTimerNodeInput struct {
	Name               string  `json:"name"`
	ScheduleExpression string  `json:"scheduleExpression"`
	Tenant             string  `json:"tenant"`
	Description        *string `json:"description"`
}

// GetName returns __CreateTimerNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateTimerNodeInput) GetName() string { return v.Name }

// GetScheduleExpression returns __CreateTimerNodeInput.ScheduleExpression, and is useful for accessing the field via an interface.
func (v *__CreateTimerNodeInput) GetScheduleExpression() string { return v.ScheduleExpression }

// GetTenant returns __CreateTimerNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateTimerNodeInput) GetTenant() string { return v.Tenant }

// GetDescription returns __CreateTimerNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateTimerNodeInput) GetDescription() *string { return v.Description }

// __CreateWebhookNodeInput is used internally by genqlient
type __CreateWebhookNodeInput struct {
	Name                    string    `json:"name"`
	Tenant                  string    `json:"tenant"`
	Config                  *string   `json:"config"`
	Description             *string   `json:"description"`
	InlineApiAuthenticator  *string   `json:"inlineApiAuthenticator"`
	LoggingLevel            *LogLevel `json:"loggingLevel"`
	ManagedApiAuthenticator *string   `json:"managedApiAuthenticator"`
	Requirements            []string  `json:"requirements"`
	SendMessageType         *string   `json:"sendMessageType"`
}

// GetName returns __CreateWebhookNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetName() string { return v.Name }

// GetTenant returns __CreateWebhookNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __CreateWebhookNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __CreateWebhookNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetDescription() *string { return v.Description }

// GetInlineApiAuthenticator returns __CreateWebhookNodeInput.InlineApiAuthenticator, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetInlineApiAuthenticator() *string {
	return v.InlineApiAuthenticator
}

// GetLoggingLevel returns __CreateWebhookNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedApiAuthenticator returns __CreateWebhookNodeInput.ManagedApiAuthenticator, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetManagedApiAuthenticator() *string {
	return v.ManagedApiAuthenticator
}

// GetRequirements returns __CreateWebhookNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetRequirements() []string { return v.Requirements }

// GetSendMessageType returns __CreateWebhookNodeInput.SendMessageType, and is useful for accessing the field via an interface.
func (v *__CreateWebhookNodeInput) GetSendMessageType() *string { return v.SendMessageType }

// __DeleteAppInput is used internally by genqlient
type __DeleteAppInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteAppInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteAppInput) GetName() string { return v.Name }

// GetTenant returns __DeleteAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteAppInput) GetTenant() string { return v.Tenant }

// __DeleteFunctionInput is used internally by genqlient
type __DeleteFunctionInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteFunctionInput) GetName() string { return v.Name }

// GetTenant returns __DeleteFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteFunctionInput) GetTenant() string { return v.Tenant }

// __DeleteKmsKeyInput is used internally by genqlient
type __DeleteKmsKeyInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteKmsKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteKmsKeyInput) GetName() string { return v.Name }

// GetTenant returns __DeleteKmsKeyInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteKmsKeyInput) GetTenant() string { return v.Tenant }

// __DeleteManagedNodeTypeInput is used internally by genqlient
type __DeleteManagedNodeTypeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteManagedNodeTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteManagedNodeTypeInput) GetName() string { return v.Name }

// GetTenant returns __DeleteManagedNodeTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteManagedNodeTypeInput) GetTenant() string { return v.Tenant }

// __DeleteMessageTypeInput is used internally by genqlient
type __DeleteMessageTypeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteMessageTypeInput) GetName() string { return v.Name }

// GetTenant returns __DeleteMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteMessageTypeInput) GetTenant() string { return v.Tenant }

// __DeleteNodeInput is used internally by genqlient
type __DeleteNodeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __DeleteNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__DeleteNodeInput) GetName() string { return v.Name }

// GetTenant returns __DeleteNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__DeleteNodeInput) GetTenant() string { return v.Tenant }

// __ReadAppInput is used internally by genqlient
type __ReadAppInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadAppInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadAppInput) GetName() string { return v.Name }

// GetTenant returns __ReadAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadAppInput) GetTenant() string { return v.Tenant }

// __ReadFunctionInput is used internally by genqlient
type __ReadFunctionInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadFunctionInput) GetName() string { return v.Name }

// GetTenant returns __ReadFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadFunctionInput) GetTenant() string { return v.Tenant }

// __ReadKmsKeyInput is used internally by genqlient
type __ReadKmsKeyInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadKmsKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadKmsKeyInput) GetName() string { return v.Name }

// GetTenant returns __ReadKmsKeyInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadKmsKeyInput) GetTenant() string { return v.Tenant }

// __ReadManagedAppIsoInput is used internally by genqlient
type __ReadManagedAppIsoInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadManagedAppIsoInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadManagedAppIsoInput) GetName() string { return v.Name }

// GetTenant returns __ReadManagedAppIsoInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadManagedAppIsoInput) GetTenant() string { return v.Tenant }

// __ReadManagedAppUserdataInput is used internally by genqlient
type __ReadManagedAppUserdataInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadManagedAppUserdataInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadManagedAppUserdataInput) GetName() string { return v.Name }

// GetTenant returns __ReadManagedAppUserdataInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadManagedAppUserdataInput) GetTenant() string { return v.Tenant }

// __ReadManagedNodeTypeInput is used internally by genqlient
type __ReadManagedNodeTypeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadManagedNodeTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadManagedNodeTypeInput) GetName() string { return v.Name }

// GetTenant returns __ReadManagedNodeTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadManagedNodeTypeInput) GetTenant() string { return v.Tenant }

// __ReadMessageTypeInput is used internally by genqlient
type __ReadMessageTypeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadMessageTypeInput) GetName() string { return v.Name }

// GetTenant returns __ReadMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadMessageTypeInput) GetTenant() string { return v.Tenant }

// __ReadNodeInput is used internally by genqlient
type __ReadNodeInput struct {
	Name   string `json:"name"`
	Tenant string `json:"tenant"`
}

// GetName returns __ReadNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__ReadNodeInput) GetName() string { return v.Name }

// GetTenant returns __ReadNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadNodeInput) GetTenant() string { return v.Tenant }

// __ReadTenantAwsCredentialsInput is used internally by genqlient
type __ReadTenantAwsCredentialsInput struct {
	Tenant   string `json:"tenant"`
	Duration *int   `json:"duration"`
}

// GetTenant returns __ReadTenantAwsCredentialsInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadTenantAwsCredentialsInput) GetTenant() string { return v.Tenant }

// GetDuration returns __ReadTenantAwsCredentialsInput.Duration, and is useful for accessing the field via an interface.
func (v *__ReadTenantAwsCredentialsInput) GetDuration() *int { return v.Duration }

// __ReadTenantInput is used internally by genqlient
type __ReadTenantInput struct {
	Tenant string `json:"tenant"`
}

// GetTenant returns __ReadTenantInput.Tenant, and is useful for accessing the field via an interface.
func (v *__ReadTenantInput) GetTenant() string { return v.Tenant }

// __UpdateBitmpaRouterNodeInput is used internally by genqlient
type __UpdateBitmpaRouterNodeInput struct {
	Name             string    `json:"name"`
	Tenant           string    `json:"tenant"`
	Config           *string   `json:"config"`
	Description      *string   `json:"description"`
	InlineBitmapper  *string   `json:"inlineBitmapper"`
	LoggingLevel     *LogLevel `json:"loggingLevel"`
	ManagedBitmapper *string   `json:"managedBitmapper"`
	Requirements     []string  `json:"requirements"`
	RouteTable       *string   `json:"routeTable"`
}

// GetName returns __UpdateBitmpaRouterNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateBitmpaRouterNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateBitmpaRouterNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateBitmpaRouterNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetDescription() *string { return v.Description }

// GetInlineBitmapper returns __UpdateBitmpaRouterNodeInput.InlineBitmapper, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetInlineBitmapper() *string { return v.InlineBitmapper }

// GetLoggingLevel returns __UpdateBitmpaRouterNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedBitmapper returns __UpdateBitmpaRouterNodeInput.ManagedBitmapper, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetManagedBitmapper() *string { return v.ManagedBitmapper }

// GetRequirements returns __UpdateBitmpaRouterNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetRequirements() []string { return v.Requirements }

// GetRouteTable returns __UpdateBitmpaRouterNodeInput.RouteTable, and is useful for accessing the field via an interface.
func (v *__UpdateBitmpaRouterNodeInput) GetRouteTable() *string { return v.RouteTable }

// __UpdateCrossTenantAppInput is used internally by genqlient
type __UpdateCrossTenantAppInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
}

// GetName returns __UpdateCrossTenantAppInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantAppInput) GetName() string { return v.Name }

// GetTenant returns __UpdateCrossTenantAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantAppInput) GetTenant() string { return v.Tenant }

// GetDescription returns __UpdateCrossTenantAppInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantAppInput) GetDescription() *string { return v.Description }

// __UpdateCrossTenantReceivingNodeInput is used internally by genqlient
type __UpdateCrossTenantReceivingNodeInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
}

// GetName returns __UpdateCrossTenantReceivingNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantReceivingNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateCrossTenantReceivingNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantReceivingNodeInput) GetTenant() string { return v.Tenant }

// GetDescription returns __UpdateCrossTenantReceivingNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantReceivingNodeInput) GetDescription() *string { return v.Description }

// __UpdateCrossTenantSendingNodeInput is used internally by genqlient
type __UpdateCrossTenantSendingNodeInput struct {
	Name                 string    `json:"name"`
	Tenant               string    `json:"tenant"`
	Config               *string   `json:"config"`
	Description          *string   `json:"description"`
	InlineProcessor      *string   `json:"inlineProcessor"`
	LoggingLevel         *LogLevel `json:"loggingLevel"`
	ManagedProcessor     *string   `json:"managedProcessor"`
	Requirements         []string  `json:"requirements"`
	SequentialProcessing *bool     `json:"sequentialProcessing"`
}

// GetName returns __UpdateCrossTenantSendingNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateCrossTenantSendingNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateCrossTenantSendingNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateCrossTenantSendingNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetDescription() *string { return v.Description }

// GetInlineProcessor returns __UpdateCrossTenantSendingNodeInput.InlineProcessor, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetInlineProcessor() *string { return v.InlineProcessor }

// GetLoggingLevel returns __UpdateCrossTenantSendingNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedProcessor returns __UpdateCrossTenantSendingNodeInput.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetManagedProcessor() *string {
	return v.ManagedProcessor
}

// GetRequirements returns __UpdateCrossTenantSendingNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetRequirements() []string { return v.Requirements }

// GetSequentialProcessing returns __UpdateCrossTenantSendingNodeInput.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *__UpdateCrossTenantSendingNodeInput) GetSequentialProcessing() *bool {
	return v.SequentialProcessing
}

// __UpdateExternalNodeInput is used internally by genqlient
type __UpdateExternalNodeInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
}

// GetName returns __UpdateExternalNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateExternalNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateExternalNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateExternalNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateExternalNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateExternalNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateExternalNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateExternalNodeInput) GetDescription() *string { return v.Description }

// __UpdateFilesDotComWebhookNodeInput is used internally by genqlient
type __UpdateFilesDotComWebhookNodeInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	ApiKey      *string `json:"apiKey"`
	Description *string `json:"description"`
}

// GetName returns __UpdateFilesDotComWebhookNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateFilesDotComWebhookNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateFilesDotComWebhookNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateFilesDotComWebhookNodeInput) GetTenant() string { return v.Tenant }

// GetApiKey returns __UpdateFilesDotComWebhookNodeInput.ApiKey, and is useful for accessing the field via an interface.
func (v *__UpdateFilesDotComWebhookNodeInput) GetApiKey() *string { return v.ApiKey }

// GetDescription returns __UpdateFilesDotComWebhookNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateFilesDotComWebhookNodeInput) GetDescription() *string { return v.Description }

// __UpdateFunctionInput is used internally by genqlient
type __UpdateFunctionInput struct {
	Name         string   `json:"name"`
	Tenant       string   `json:"tenant"`
	Code         *string  `json:"code"`
	Description  *string  `json:"description"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
}

// GetName returns __UpdateFunctionInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetName() string { return v.Name }

// GetTenant returns __UpdateFunctionInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetTenant() string { return v.Tenant }

// GetCode returns __UpdateFunctionInput.Code, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetCode() *string { return v.Code }

// GetDescription returns __UpdateFunctionInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetDescription() *string { return v.Description }

// GetReadme returns __UpdateFunctionInput.Readme, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __UpdateFunctionInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateFunctionInput) GetRequirements() []string { return v.Requirements }

// __UpdateKmsKeyInput is used internally by genqlient
type __UpdateKmsKeyInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
}

// GetName returns __UpdateKmsKeyInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateKmsKeyInput) GetName() string { return v.Name }

// GetTenant returns __UpdateKmsKeyInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateKmsKeyInput) GetTenant() string { return v.Tenant }

// GetDescription returns __UpdateKmsKeyInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateKmsKeyInput) GetDescription() *string { return v.Description }

// __UpdateLoadBalancerNodeInput is used internally by genqlient
type __UpdateLoadBalancerNodeInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
}

// GetName returns __UpdateLoadBalancerNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateLoadBalancerNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateLoadBalancerNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateLoadBalancerNodeInput) GetTenant() string { return v.Tenant }

// GetDescription returns __UpdateLoadBalancerNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateLoadBalancerNodeInput) GetDescription() *string { return v.Description }

// __UpdateManagedNodeInput is used internally by genqlient
type __UpdateManagedNodeInput struct {
	Name         string       `json:"name"`
	Tenant       string       `json:"tenant"`
	Config       *string      `json:"config"`
	Description  *string      `json:"description"`
	LoggingLevel *LogLevel    `json:"loggingLevel"`
	Mounts       []MountInput `json:"mounts"`
	Ports        []PortInput  `json:"ports"`
}

// GetName returns __UpdateManagedNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateManagedNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateManagedNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateManagedNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeInput) GetDescription() *string { return v.Description }

// GetLoggingLevel returns __UpdateManagedNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetMounts returns __UpdateManagedNodeInput.Mounts, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeInput) GetMounts() []MountInput { return v.Mounts }

// GetPorts returns __UpdateManagedNodeInput.Ports, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeInput) GetPorts() []PortInput { return v.Ports }

// __UpdateManagedNodeTypeInput is used internally by genqlient
type __UpdateManagedNodeTypeInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
	ImageUri    *string `json:"imageUri"`
	Readme      *string `json:"readme"`
}

// GetName returns __UpdateManagedNodeTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeTypeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateManagedNodeTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeTypeInput) GetTenant() string { return v.Tenant }

// GetDescription returns __UpdateManagedNodeTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeTypeInput) GetDescription() *string { return v.Description }

// GetImageUri returns __UpdateManagedNodeTypeInput.ImageUri, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeTypeInput) GetImageUri() *string { return v.ImageUri }

// GetReadme returns __UpdateManagedNodeTypeInput.Readme, and is useful for accessing the field via an interface.
func (v *__UpdateManagedNodeTypeInput) GetReadme() *string { return v.Readme }

// __UpdateMessageTypeInput is used internally by genqlient
type __UpdateMessageTypeInput struct {
	Name              string   `json:"name"`
	Tenant            string   `json:"tenant"`
	Auditor           *string  `json:"auditor"`
	BitmapperTemplate *string  `json:"bitmapperTemplate"`
	Description       *string  `json:"description"`
	ProcessorTemplate *string  `json:"processorTemplate"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
	SampleMessage     *string  `json:"sampleMessage"`
}

// GetName returns __UpdateMessageTypeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateMessageTypeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetTenant() string { return v.Tenant }

// GetAuditor returns __UpdateMessageTypeInput.Auditor, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetAuditor() *string { return v.Auditor }

// GetBitmapperTemplate returns __UpdateMessageTypeInput.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetBitmapperTemplate() *string { return v.BitmapperTemplate }

// GetDescription returns __UpdateMessageTypeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetDescription() *string { return v.Description }

// GetProcessorTemplate returns __UpdateMessageTypeInput.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetProcessorTemplate() *string { return v.ProcessorTemplate }

// GetReadme returns __UpdateMessageTypeInput.Readme, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetReadme() *string { return v.Readme }

// GetRequirements returns __UpdateMessageTypeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetRequirements() []string { return v.Requirements }

// GetSampleMessage returns __UpdateMessageTypeInput.SampleMessage, and is useful for accessing the field via an interface.
func (v *__UpdateMessageTypeInput) GetSampleMessage() *string { return v.SampleMessage }

// __UpdateProcessorNodeInput is used internally by genqlient
type __UpdateProcessorNodeInput struct {
	Name                 string    `json:"name"`
	Tenant               string    `json:"tenant"`
	Config               *string   `json:"config"`
	Description          *string   `json:"description"`
	InlineProcessor      *string   `json:"inlineProcessor"`
	LoggingLevel         *LogLevel `json:"loggingLevel"`
	ManagedProcessor     *string   `json:"managedProcessor"`
	Requirements         []string  `json:"requirements"`
	SequentialProcessing *bool     `json:"sequentialProcessing"`
}

// GetName returns __UpdateProcessorNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateProcessorNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateProcessorNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateProcessorNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetDescription() *string { return v.Description }

// GetInlineProcessor returns __UpdateProcessorNodeInput.InlineProcessor, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetInlineProcessor() *string { return v.InlineProcessor }

// GetLoggingLevel returns __UpdateProcessorNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedProcessor returns __UpdateProcessorNodeInput.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetManagedProcessor() *string { return v.ManagedProcessor }

// GetRequirements returns __UpdateProcessorNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetRequirements() []string { return v.Requirements }

// GetSequentialProcessing returns __UpdateProcessorNodeInput.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *__UpdateProcessorNodeInput) GetSequentialProcessing() *bool { return v.SequentialProcessing }

// __UpdateRemotetAppInput is used internally by genqlient
type __UpdateRemotetAppInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
	TableAccess *bool   `json:"tableAccess"`
}

// GetName returns __UpdateRemotetAppInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateRemotetAppInput) GetName() string { return v.Name }

// GetTenant returns __UpdateRemotetAppInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateRemotetAppInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateRemotetAppInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateRemotetAppInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateRemotetAppInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateRemotetAppInput) GetDescription() *string { return v.Description }

// GetTableAccess returns __UpdateRemotetAppInput.TableAccess, and is useful for accessing the field via an interface.
func (v *__UpdateRemotetAppInput) GetTableAccess() *bool { return v.TableAccess }

// __UpdateTenantInput is used internally by genqlient
type __UpdateTenantInput struct {
	Tenant      string  `json:"tenant"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
}

// GetTenant returns __UpdateTenantInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateTenantInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateTenantInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateTenantInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateTenantInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateTenantInput) GetDescription() *string { return v.Description }

// __UpdateTimerNodeInput is used internally by genqlient
type __UpdateTimerNodeInput struct {
	Name        string  `json:"name"`
	Tenant      string  `json:"tenant"`
	Description *string `json:"description"`
}

// GetName returns __UpdateTimerNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateTimerNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateTimerNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateTimerNodeInput) GetTenant() string { return v.Tenant }

// GetDescription returns __UpdateTimerNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateTimerNodeInput) GetDescription() *string { return v.Description }

// __UpdateWebhookNodeInput is used internally by genqlient
type __UpdateWebhookNodeInput struct {
	Name                    string    `json:"name"`
	Tenant                  string    `json:"tenant"`
	Config                  *string   `json:"config"`
	Description             *string   `json:"description"`
	InlineApiAuthenticator  *string   `json:"inlineApiAuthenticator"`
	LoggingLevel            *LogLevel `json:"loggingLevel"`
	ManagedApiAuthenticator *string   `json:"managedApiAuthenticator"`
	Requirements            []string  `json:"requirements"`
}

// GetName returns __UpdateWebhookNodeInput.Name, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetName() string { return v.Name }

// GetTenant returns __UpdateWebhookNodeInput.Tenant, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetTenant() string { return v.Tenant }

// GetConfig returns __UpdateWebhookNodeInput.Config, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetConfig() *string { return v.Config }

// GetDescription returns __UpdateWebhookNodeInput.Description, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetDescription() *string { return v.Description }

// GetInlineApiAuthenticator returns __UpdateWebhookNodeInput.InlineApiAuthenticator, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetInlineApiAuthenticator() *string {
	return v.InlineApiAuthenticator
}

// GetLoggingLevel returns __UpdateWebhookNodeInput.LoggingLevel, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedApiAuthenticator returns __UpdateWebhookNodeInput.ManagedApiAuthenticator, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetManagedApiAuthenticator() *string {
	return v.ManagedApiAuthenticator
}

// GetRequirements returns __UpdateWebhookNodeInput.Requirements, and is useful for accessing the field via an interface.
func (v *__UpdateWebhookNodeInput) GetRequirements() []string { return v.Requirements }

// alertEmitterNodeFields includes the GraphQL fields of AlertEmitterNode requested by the fragment alertEmitterNodeFields.
type alertEmitterNodeFields struct {
	SendMessageType *alertEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

// GetSendMessageType returns alertEmitterNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *alertEmitterNodeFields) GetSendMessageType() *alertEmitterNodeFieldsSendMessageType {
	return v.SendMessageType
}

// alertEmitterNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type alertEmitterNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns alertEmitterNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *alertEmitterNodeFieldsSendMessageType) GetName() string { return v.Name }

// appChangeReceiverNodeFields includes the GraphQL fields of AppChangeReceiverNode requested by the fragment appChangeReceiverNodeFields.
type appChangeReceiverNodeFields struct {
	App                appChangeReceiverNodeFieldsApp                 `json:"-"`
	ReceiveMessageType *appChangeReceiverNodeFieldsReceiveMessageType `json:"receiveMessageType"`
}

// GetApp returns appChangeReceiverNodeFields.App, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFields) GetApp() appChangeReceiverNodeFieldsApp { return v.App }

// GetReceiveMessageType returns appChangeReceiverNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFields) GetReceiveMessageType() *appChangeReceiverNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

func (v *appChangeReceiverNodeFields) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*appChangeReceiverNodeFields
		App json.RawMessage `json:"app"`
		graphql.NoUnmarshalJSON
	}
	firstPass.appChangeReceiverNodeFields = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.App
		src := firstPass.App
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalappChangeReceiverNodeFieldsApp(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal appChangeReceiverNodeFields.App: %w", err)
			}
		}
	}
	return nil
}

type __premarshalappChangeReceiverNodeFields struct {
	App json.RawMessage `json:"app"`

	ReceiveMessageType *appChangeReceiverNodeFieldsReceiveMessageType `json:"receiveMessageType"`
}

func (v *appChangeReceiverNodeFields) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *appChangeReceiverNodeFields) __premarshalJSON() (*__premarshalappChangeReceiverNodeFields, error) {
	var retval __premarshalappChangeReceiverNodeFields

	{

		dst := &retval.App
		src := v.App
		var err error
		*dst, err = __marshalappChangeReceiverNodeFieldsApp(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal appChangeReceiverNodeFields.App: %w", err)
		}
	}
	retval.ReceiveMessageType = v.ReceiveMessageType
	return &retval, nil
}

// appChangeReceiverNodeFieldsApp includes the requested fields of the GraphQL interface App.
//
// appChangeReceiverNodeFieldsApp is implemented by the following types:
// appChangeReceiverNodeFieldsAppCrossAccountApp
// appChangeReceiverNodeFieldsAppCrossTenantReceivingApp
// appChangeReceiverNodeFieldsAppCrossTenantSendingApp
// appChangeReceiverNodeFieldsAppExternalApp
// appChangeReceiverNodeFieldsAppManagedApp
type appChangeReceiverNodeFieldsApp interface {
	implementsGraphQLInterfaceappChangeReceiverNodeFieldsApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
}

func (v *appChangeReceiverNodeFieldsAppCrossAccountApp) implementsGraphQLInterfaceappChangeReceiverNodeFieldsApp() {
}
func (v *appChangeReceiverNodeFieldsAppCrossTenantReceivingApp) implementsGraphQLInterfaceappChangeReceiverNodeFieldsApp() {
}
func (v *appChangeReceiverNodeFieldsAppCrossTenantSendingApp) implementsGraphQLInterfaceappChangeReceiverNodeFieldsApp() {
}
func (v *appChangeReceiverNodeFieldsAppExternalApp) implementsGraphQLInterfaceappChangeReceiverNodeFieldsApp() {
}
func (v *appChangeReceiverNodeFieldsAppManagedApp) implementsGraphQLInterfaceappChangeReceiverNodeFieldsApp() {
}

func __unmarshalappChangeReceiverNodeFieldsApp(b []byte, v *appChangeReceiverNodeFieldsApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(appChangeReceiverNodeFieldsAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(appChangeReceiverNodeFieldsAppCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(appChangeReceiverNodeFieldsAppCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(appChangeReceiverNodeFieldsAppExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(appChangeReceiverNodeFieldsAppManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for appChangeReceiverNodeFieldsApp: "%v"`, tn.TypeName)
	}
}

func __marshalappChangeReceiverNodeFieldsApp(v *appChangeReceiverNodeFieldsApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *appChangeReceiverNodeFieldsAppCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appChangeReceiverNodeFieldsAppCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *appChangeReceiverNodeFieldsAppCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appChangeReceiverNodeFieldsAppCrossTenantReceivingApp
		}{typename, v}
		return json.Marshal(result)
	case *appChangeReceiverNodeFieldsAppCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appChangeReceiverNodeFieldsAppCrossTenantSendingApp
		}{typename, v}
		return json.Marshal(result)
	case *appChangeReceiverNodeFieldsAppExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appChangeReceiverNodeFieldsAppExternalApp
		}{typename, v}
		return json.Marshal(result)
	case *appChangeReceiverNodeFieldsAppManagedApp:
		typename = "ManagedApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appChangeReceiverNodeFieldsAppManagedApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for appChangeReceiverNodeFieldsApp: "%T"`, v)
	}
}

// appChangeReceiverNodeFieldsAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type appChangeReceiverNodeFieldsAppCrossAccountApp struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
}

// GetTypename returns appChangeReceiverNodeFieldsAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppCrossAccountApp) GetTypename() *string { return v.Typename }

// GetName returns appChangeReceiverNodeFieldsAppCrossAccountApp.Name, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppCrossAccountApp) GetName() string { return v.Name }

// appChangeReceiverNodeFieldsAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type appChangeReceiverNodeFieldsAppCrossTenantReceivingApp struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
}

// GetTypename returns appChangeReceiverNodeFieldsAppCrossTenantReceivingApp.Typename, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppCrossTenantReceivingApp) GetTypename() *string {
	return v.Typename
}

// GetName returns appChangeReceiverNodeFieldsAppCrossTenantReceivingApp.Name, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppCrossTenantReceivingApp) GetName() string { return v.Name }

// appChangeReceiverNodeFieldsAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type appChangeReceiverNodeFieldsAppCrossTenantSendingApp struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
}

// GetTypename returns appChangeReceiverNodeFieldsAppCrossTenantSendingApp.Typename, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppCrossTenantSendingApp) GetTypename() *string {
	return v.Typename
}

// GetName returns appChangeReceiverNodeFieldsAppCrossTenantSendingApp.Name, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppCrossTenantSendingApp) GetName() string { return v.Name }

// appChangeReceiverNodeFieldsAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type appChangeReceiverNodeFieldsAppExternalApp struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
}

// GetTypename returns appChangeReceiverNodeFieldsAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppExternalApp) GetTypename() *string { return v.Typename }

// GetName returns appChangeReceiverNodeFieldsAppExternalApp.Name, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppExternalApp) GetName() string { return v.Name }

// appChangeReceiverNodeFieldsAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type appChangeReceiverNodeFieldsAppManagedApp struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
}

// GetTypename returns appChangeReceiverNodeFieldsAppManagedApp.Typename, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppManagedApp) GetTypename() *string { return v.Typename }

// GetName returns appChangeReceiverNodeFieldsAppManagedApp.Name, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsAppManagedApp) GetName() string { return v.Name }

// appChangeReceiverNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type appChangeReceiverNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns appChangeReceiverNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *appChangeReceiverNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// appChangeRouterNodeFields includes the GraphQL fields of AppChangeRouterNode requested by the fragment appChangeRouterNodeFields.
type appChangeRouterNodeFields struct {
	ReceiveMessageType *appChangeRouterNodeFieldsReceiveMessageType `json:"receiveMessageType"`
	SendMessageType    *appChangeRouterNodeFieldsSendMessageType    `json:"sendMessageType"`
}

// GetReceiveMessageType returns appChangeRouterNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *appChangeRouterNodeFields) GetReceiveMessageType() *appChangeRouterNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetSendMessageType returns appChangeRouterNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *appChangeRouterNodeFields) GetSendMessageType() *appChangeRouterNodeFieldsSendMessageType {
	return v.SendMessageType
}

// appChangeRouterNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type appChangeRouterNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns appChangeRouterNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *appChangeRouterNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// appChangeRouterNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type appChangeRouterNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns appChangeRouterNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *appChangeRouterNodeFieldsSendMessageType) GetName() string { return v.Name }

// appFields includes the GraphQL fields of App requested by the fragment appFields.
//
// appFields is implemented by the following types:
// appFieldsCrossAccountApp
// appFieldsCrossTenantReceivingApp
// appFieldsCrossTenantSendingApp
// appFieldsExternalApp
// appFieldsManagedApp
type appFields interface {
	implementsGraphQLInterfaceappFields()
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() *string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
}

func (v *appFieldsCrossAccountApp) implementsGraphQLInterfaceappFields()         {}
func (v *appFieldsCrossTenantReceivingApp) implementsGraphQLInterfaceappFields() {}
func (v *appFieldsCrossTenantSendingApp) implementsGraphQLInterfaceappFields()   {}
func (v *appFieldsExternalApp) implementsGraphQLInterfaceappFields()             {}
func (v *appFieldsManagedApp) implementsGraphQLInterfaceappFields()              {}

func __unmarshalappFields(b []byte, v *appFields) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(appFieldsCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingApp":
		*v = new(appFieldsCrossTenantReceivingApp)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingApp":
		*v = new(appFieldsCrossTenantSendingApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(appFieldsExternalApp)
		return json.Unmarshal(b, *v)
	case "ManagedApp":
		*v = new(appFieldsManagedApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing App.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for appFields: "%v"`, tn.TypeName)
	}
}

func __marshalappFields(v *appFields) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *appFieldsCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appFieldsCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *appFieldsCrossTenantReceivingApp:
		typename = "CrossTenantReceivingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appFieldsCrossTenantReceivingApp
		}{typename, v}
		return json.Marshal(result)
	case *appFieldsCrossTenantSendingApp:
		typename = "CrossTenantSendingApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appFieldsCrossTenantSendingApp
		}{typename, v}
		return json.Marshal(result)
	case *appFieldsExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appFieldsExternalApp
		}{typename, v}
		return json.Marshal(result)
	case *appFieldsManagedApp:
		typename = "ManagedApp"

		result := struct {
			TypeName string `json:"__typename"`
			*appFieldsManagedApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for appFields: "%T"`, v)
	}
}

// appFields includes the GraphQL fields of CrossAccountApp requested by the fragment appFields.
type appFieldsCrossAccountApp struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns appFieldsCrossAccountApp.Description, and is useful for accessing the field via an interface.
func (v *appFieldsCrossAccountApp) GetDescription() *string { return v.Description }

// GetName returns appFieldsCrossAccountApp.Name, and is useful for accessing the field via an interface.
func (v *appFieldsCrossAccountApp) GetName() string { return v.Name }

// appFields includes the GraphQL fields of CrossTenantReceivingApp requested by the fragment appFields.
type appFieldsCrossTenantReceivingApp struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns appFieldsCrossTenantReceivingApp.Description, and is useful for accessing the field via an interface.
func (v *appFieldsCrossTenantReceivingApp) GetDescription() *string { return v.Description }

// GetName returns appFieldsCrossTenantReceivingApp.Name, and is useful for accessing the field via an interface.
func (v *appFieldsCrossTenantReceivingApp) GetName() string { return v.Name }

// appFields includes the GraphQL fields of CrossTenantSendingApp requested by the fragment appFields.
type appFieldsCrossTenantSendingApp struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns appFieldsCrossTenantSendingApp.Description, and is useful for accessing the field via an interface.
func (v *appFieldsCrossTenantSendingApp) GetDescription() *string { return v.Description }

// GetName returns appFieldsCrossTenantSendingApp.Name, and is useful for accessing the field via an interface.
func (v *appFieldsCrossTenantSendingApp) GetName() string { return v.Name }

// appFields includes the GraphQL fields of ExternalApp requested by the fragment appFields.
type appFieldsExternalApp struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns appFieldsExternalApp.Description, and is useful for accessing the field via an interface.
func (v *appFieldsExternalApp) GetDescription() *string { return v.Description }

// GetName returns appFieldsExternalApp.Name, and is useful for accessing the field via an interface.
func (v *appFieldsExternalApp) GetName() string { return v.Name }

// appFields includes the GraphQL fields of ManagedApp requested by the fragment appFields.
type appFieldsManagedApp struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns appFieldsManagedApp.Description, and is useful for accessing the field via an interface.
func (v *appFieldsManagedApp) GetDescription() *string { return v.Description }

// GetName returns appFieldsManagedApp.Name, and is useful for accessing the field via an interface.
func (v *appFieldsManagedApp) GetName() string { return v.Name }

// auditEmitterNodeFields includes the GraphQL fields of AuditEmitterNode requested by the fragment auditEmitterNodeFields.
type auditEmitterNodeFields struct {
	SendMessageType *auditEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

// GetSendMessageType returns auditEmitterNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *auditEmitterNodeFields) GetSendMessageType() *auditEmitterNodeFieldsSendMessageType {
	return v.SendMessageType
}

// auditEmitterNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type auditEmitterNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns auditEmitterNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *auditEmitterNodeFieldsSendMessageType) GetName() string { return v.Name }

// bitmapRouterNodeFields includes the GraphQL fields of BitmapRouterNode requested by the fragment bitmapRouterNodeFields.
type bitmapRouterNodeFields struct {
	InlineBitmapper    *string                                                  `json:"inlineBitmapper"`
	LoggingLevel       *LogLevel                                                `json:"loggingLevel"`
	ManagedBitmapper   *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction `json:"managedBitmapper"`
	ReceiveMessageType *bitmapRouterNodeFieldsReceiveMessageType                `json:"receiveMessageType"`
	Requirements       []string                                                 `json:"requirements"`
	SendMessageType    *bitmapRouterNodeFieldsSendMessageType                   `json:"sendMessageType"`
}

// GetInlineBitmapper returns bitmapRouterNodeFields.InlineBitmapper, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFields) GetInlineBitmapper() *string { return v.InlineBitmapper }

// GetLoggingLevel returns bitmapRouterNodeFields.LoggingLevel, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFields) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedBitmapper returns bitmapRouterNodeFields.ManagedBitmapper, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFields) GetManagedBitmapper() *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction {
	return v.ManagedBitmapper
}

// GetReceiveMessageType returns bitmapRouterNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFields) GetReceiveMessageType() *bitmapRouterNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetRequirements returns bitmapRouterNodeFields.Requirements, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFields) GetRequirements() []string { return v.Requirements }

// GetSendMessageType returns bitmapRouterNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFields) GetSendMessageType() *bitmapRouterNodeFieldsSendMessageType {
	return v.SendMessageType
}

// bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction includes the requested fields of the GraphQL type BitmapperFunction.
type bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction struct {
	Name string `json:"name"`
}

// GetName returns bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFieldsManagedBitmapperBitmapperFunction) GetName() string { return v.Name }

// bitmapRouterNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type bitmapRouterNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns bitmapRouterNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// bitmapRouterNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type bitmapRouterNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns bitmapRouterNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *bitmapRouterNodeFieldsSendMessageType) GetName() string { return v.Name }

// bitmapperFunctionFields includes the GraphQL fields of BitmapperFunction requested by the fragment bitmapperFunctionFields.
type bitmapperFunctionFields struct {
	ArgumentMessageType bitmapperFunctionFieldsArgumentMessageType `json:"argumentMessageType"`
}

// GetArgumentMessageType returns bitmapperFunctionFields.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *bitmapperFunctionFields) GetArgumentMessageType() bitmapperFunctionFieldsArgumentMessageType {
	return v.ArgumentMessageType
}

// bitmapperFunctionFieldsArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type bitmapperFunctionFieldsArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns bitmapperFunctionFieldsArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *bitmapperFunctionFieldsArgumentMessageType) GetName() string { return v.Name }

// changeEmitterNodeFields includes the GraphQL fields of ChangeEmitterNode requested by the fragment changeEmitterNodeFields.
type changeEmitterNodeFields struct {
	SendMessageType *changeEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

// GetSendMessageType returns changeEmitterNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *changeEmitterNodeFields) GetSendMessageType() *changeEmitterNodeFieldsSendMessageType {
	return v.SendMessageType
}

// changeEmitterNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type changeEmitterNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns changeEmitterNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *changeEmitterNodeFieldsSendMessageType) GetName() string { return v.Name }

// cognitoCredentialsFields includes the GraphQL fields of CognitoCredentials requested by the fragment cognitoCredentialsFields.
type cognitoCredentialsFields struct {
	ClientId   string `json:"clientId"`
	Password   string `json:"password"`
	UserPoolId string `json:"userPoolId"`
	Username   string `json:"username"`
}

// GetClientId returns cognitoCredentialsFields.ClientId, and is useful for accessing the field via an interface.
func (v *cognitoCredentialsFields) GetClientId() string { return v.ClientId }

// GetPassword returns cognitoCredentialsFields.Password, and is useful for accessing the field via an interface.
func (v *cognitoCredentialsFields) GetPassword() string { return v.Password }

// GetUserPoolId returns cognitoCredentialsFields.UserPoolId, and is useful for accessing the field via an interface.
func (v *cognitoCredentialsFields) GetUserPoolId() string { return v.UserPoolId }

// GetUsername returns cognitoCredentialsFields.Username, and is useful for accessing the field via an interface.
func (v *cognitoCredentialsFields) GetUsername() string { return v.Username }

// crossAccountAppFields includes the GraphQL fields of CrossAccountApp requested by the fragment crossAccountAppFields.
type crossAccountAppFields struct {
	Account              string                                             `json:"account"`
	AppsyncEndpoint      string                                             `json:"appsyncEndpoint"`
	AuditRecordsEndpoint string                                             `json:"auditRecordsEndpoint"`
	Config               *string                                            `json:"config"`
	Credentials          crossAccountAppFieldsCredentialsCognitoCredentials `json:"credentials"`
	IamPolicy            string                                             `json:"iamPolicy"`
	TableAccess          bool                                               `json:"tableAccess"`
}

// GetAccount returns crossAccountAppFields.Account, and is useful for accessing the field via an interface.
func (v *crossAccountAppFields) GetAccount() string { return v.Account }

// GetAppsyncEndpoint returns crossAccountAppFields.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *crossAccountAppFields) GetAppsyncEndpoint() string { return v.AppsyncEndpoint }

// GetAuditRecordsEndpoint returns crossAccountAppFields.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *crossAccountAppFields) GetAuditRecordsEndpoint() string { return v.AuditRecordsEndpoint }

// GetConfig returns crossAccountAppFields.Config, and is useful for accessing the field via an interface.
func (v *crossAccountAppFields) GetConfig() *string { return v.Config }

// GetCredentials returns crossAccountAppFields.Credentials, and is useful for accessing the field via an interface.
func (v *crossAccountAppFields) GetCredentials() crossAccountAppFieldsCredentialsCognitoCredentials {
	return v.Credentials
}

// GetIamPolicy returns crossAccountAppFields.IamPolicy, and is useful for accessing the field via an interface.
func (v *crossAccountAppFields) GetIamPolicy() string { return v.IamPolicy }

// GetTableAccess returns crossAccountAppFields.TableAccess, and is useful for accessing the field via an interface.
func (v *crossAccountAppFields) GetTableAccess() bool { return v.TableAccess }

// crossAccountAppFieldsCredentialsCognitoCredentials includes the requested fields of the GraphQL type CognitoCredentials.
type crossAccountAppFieldsCredentialsCognitoCredentials struct {
	cognitoCredentialsFields `json:"-"`
}

// GetClientId returns crossAccountAppFieldsCredentialsCognitoCredentials.ClientId, and is useful for accessing the field via an interface.
func (v *crossAccountAppFieldsCredentialsCognitoCredentials) GetClientId() string {
	return v.cognitoCredentialsFields.ClientId
}

// GetPassword returns crossAccountAppFieldsCredentialsCognitoCredentials.Password, and is useful for accessing the field via an interface.
func (v *crossAccountAppFieldsCredentialsCognitoCredentials) GetPassword() string {
	return v.cognitoCredentialsFields.Password
}

// GetUserPoolId returns crossAccountAppFieldsCredentialsCognitoCredentials.UserPoolId, and is useful for accessing the field via an interface.
func (v *crossAccountAppFieldsCredentialsCognitoCredentials) GetUserPoolId() string {
	return v.cognitoCredentialsFields.UserPoolId
}

// GetUsername returns crossAccountAppFieldsCredentialsCognitoCredentials.Username, and is useful for accessing the field via an interface.
func (v *crossAccountAppFieldsCredentialsCognitoCredentials) GetUsername() string {
	return v.cognitoCredentialsFields.Username
}

func (v *crossAccountAppFieldsCredentialsCognitoCredentials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*crossAccountAppFieldsCredentialsCognitoCredentials
		graphql.NoUnmarshalJSON
	}
	firstPass.crossAccountAppFieldsCredentialsCognitoCredentials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.cognitoCredentialsFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalcrossAccountAppFieldsCredentialsCognitoCredentials struct {
	ClientId string `json:"clientId"`

	Password string `json:"password"`

	UserPoolId string `json:"userPoolId"`

	Username string `json:"username"`
}

func (v *crossAccountAppFieldsCredentialsCognitoCredentials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *crossAccountAppFieldsCredentialsCognitoCredentials) __premarshalJSON() (*__premarshalcrossAccountAppFieldsCredentialsCognitoCredentials, error) {
	var retval __premarshalcrossAccountAppFieldsCredentialsCognitoCredentials

	retval.ClientId = v.cognitoCredentialsFields.ClientId
	retval.Password = v.cognitoCredentialsFields.Password
	retval.UserPoolId = v.cognitoCredentialsFields.UserPoolId
	retval.Username = v.cognitoCredentialsFields.Username
	return &retval, nil
}

// crossTenantReceivingAppFields includes the GraphQL fields of CrossTenantReceivingApp requested by the fragment crossTenantReceivingAppFields.
type crossTenantReceivingAppFields struct {
	SendingApp    *string `json:"sendingApp"`
	SendingTenant string  `json:"sendingTenant"`
}

// GetSendingApp returns crossTenantReceivingAppFields.SendingApp, and is useful for accessing the field via an interface.
func (v *crossTenantReceivingAppFields) GetSendingApp() *string { return v.SendingApp }

// GetSendingTenant returns crossTenantReceivingAppFields.SendingTenant, and is useful for accessing the field via an interface.
func (v *crossTenantReceivingAppFields) GetSendingTenant() string { return v.SendingTenant }

// crossTenantReceivingNodeFields includes the GraphQL fields of CrossTenantReceivingNode requested by the fragment crossTenantReceivingNodeFields.
type crossTenantReceivingNodeFields struct {
	App             crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp `json:"app"`
	SendMessageType *crossTenantReceivingNodeFieldsSendMessageType           `json:"sendMessageType"`
}

// GetApp returns crossTenantReceivingNodeFields.App, and is useful for accessing the field via an interface.
func (v *crossTenantReceivingNodeFields) GetApp() crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp {
	return v.App
}

// GetSendMessageType returns crossTenantReceivingNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *crossTenantReceivingNodeFields) GetSendMessageType() *crossTenantReceivingNodeFieldsSendMessageType {
	return v.SendMessageType
}

// crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp includes the requested fields of the GraphQL type CrossTenantReceivingApp.
type crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp struct {
	Name string `json:"name"`
}

// GetName returns crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp.Name, and is useful for accessing the field via an interface.
func (v *crossTenantReceivingNodeFieldsAppCrossTenantReceivingApp) GetName() string { return v.Name }

// crossTenantReceivingNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type crossTenantReceivingNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns crossTenantReceivingNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *crossTenantReceivingNodeFieldsSendMessageType) GetName() string { return v.Name }

// crossTenantSendingAppFields includes the GraphQL fields of CrossTenantSendingApp requested by the fragment crossTenantSendingAppFields.
type crossTenantSendingAppFields struct {
	ReceivingApp    string `json:"receivingApp"`
	ReceivingTenant string `json:"receivingTenant"`
}

// GetReceivingApp returns crossTenantSendingAppFields.ReceivingApp, and is useful for accessing the field via an interface.
func (v *crossTenantSendingAppFields) GetReceivingApp() string { return v.ReceivingApp }

// GetReceivingTenant returns crossTenantSendingAppFields.ReceivingTenant, and is useful for accessing the field via an interface.
func (v *crossTenantSendingAppFields) GetReceivingTenant() string { return v.ReceivingTenant }

// crossTenantSendingNodeFields includes the GraphQL fields of CrossTenantSendingNode requested by the fragment crossTenantSendingNodeFields.
type crossTenantSendingNodeFields struct {
	App                  crossTenantSendingNodeFieldsAppCrossTenantSendingApp           `json:"app"`
	InlineProcessor      *string                                                        `json:"inlineProcessor"`
	LoggingLevel         *LogLevel                                                      `json:"loggingLevel"`
	ManagedProcessor     *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`
	ReceiveMessageType   *crossTenantSendingNodeFieldsReceiveMessageType                `json:"receiveMessageType"`
	Requirements         []string                                                       `json:"requirements"`
	SendMessageType      *crossTenantSendingNodeFieldsSendMessageType                   `json:"sendMessageType"`
	SequentialProcessing *bool                                                          `json:"sequentialProcessing"`
}

// GetApp returns crossTenantSendingNodeFields.App, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetApp() crossTenantSendingNodeFieldsAppCrossTenantSendingApp {
	return v.App
}

// GetInlineProcessor returns crossTenantSendingNodeFields.InlineProcessor, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetInlineProcessor() *string { return v.InlineProcessor }

// GetLoggingLevel returns crossTenantSendingNodeFields.LoggingLevel, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedProcessor returns crossTenantSendingNodeFields.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetManagedProcessor() *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction {
	return v.ManagedProcessor
}

// GetReceiveMessageType returns crossTenantSendingNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetReceiveMessageType() *crossTenantSendingNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetRequirements returns crossTenantSendingNodeFields.Requirements, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetRequirements() []string { return v.Requirements }

// GetSendMessageType returns crossTenantSendingNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetSendMessageType() *crossTenantSendingNodeFieldsSendMessageType {
	return v.SendMessageType
}

// GetSequentialProcessing returns crossTenantSendingNodeFields.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFields) GetSequentialProcessing() *bool { return v.SequentialProcessing }

// crossTenantSendingNodeFieldsAppCrossTenantSendingApp includes the requested fields of the GraphQL type CrossTenantSendingApp.
type crossTenantSendingNodeFieldsAppCrossTenantSendingApp struct {
	Name string `json:"name"`
}

// GetName returns crossTenantSendingNodeFieldsAppCrossTenantSendingApp.Name, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFieldsAppCrossTenantSendingApp) GetName() string { return v.Name }

// crossTenantSendingNodeFieldsManagedProcessorProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type crossTenantSendingNodeFieldsManagedProcessorProcessorFunction struct {
	Name string `json:"name"`
}

// GetName returns crossTenantSendingNodeFieldsManagedProcessorProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFieldsManagedProcessorProcessorFunction) GetName() string {
	return v.Name
}

// crossTenantSendingNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type crossTenantSendingNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns crossTenantSendingNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// crossTenantSendingNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type crossTenantSendingNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns crossTenantSendingNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *crossTenantSendingNodeFieldsSendMessageType) GetName() string { return v.Name }

// deadLetterEmitterNodeFields includes the GraphQL fields of DeadLetterEmitterNode requested by the fragment deadLetterEmitterNodeFields.
type deadLetterEmitterNodeFields struct {
	SendMessageType *deadLetterEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

// GetSendMessageType returns deadLetterEmitterNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *deadLetterEmitterNodeFields) GetSendMessageType() *deadLetterEmitterNodeFieldsSendMessageType {
	return v.SendMessageType
}

// deadLetterEmitterNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type deadLetterEmitterNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns deadLetterEmitterNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *deadLetterEmitterNodeFieldsSendMessageType) GetName() string { return v.Name }

// externalAppFields includes the GraphQL fields of ExternalApp requested by the fragment externalAppFields.
type externalAppFields struct {
	AppsyncEndpoint      string                                         `json:"appsyncEndpoint"`
	AuditRecordsEndpoint string                                         `json:"auditRecordsEndpoint"`
	Config               *string                                        `json:"config"`
	Credentials          externalAppFieldsCredentialsCognitoCredentials `json:"credentials"`
	TableAccess          bool                                           `json:"tableAccess"`
}

// GetAppsyncEndpoint returns externalAppFields.AppsyncEndpoint, and is useful for accessing the field via an interface.
func (v *externalAppFields) GetAppsyncEndpoint() string { return v.AppsyncEndpoint }

// GetAuditRecordsEndpoint returns externalAppFields.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *externalAppFields) GetAuditRecordsEndpoint() string { return v.AuditRecordsEndpoint }

// GetConfig returns externalAppFields.Config, and is useful for accessing the field via an interface.
func (v *externalAppFields) GetConfig() *string { return v.Config }

// GetCredentials returns externalAppFields.Credentials, and is useful for accessing the field via an interface.
func (v *externalAppFields) GetCredentials() externalAppFieldsCredentialsCognitoCredentials {
	return v.Credentials
}

// GetTableAccess returns externalAppFields.TableAccess, and is useful for accessing the field via an interface.
func (v *externalAppFields) GetTableAccess() bool { return v.TableAccess }

// externalAppFieldsCredentialsCognitoCredentials includes the requested fields of the GraphQL type CognitoCredentials.
type externalAppFieldsCredentialsCognitoCredentials struct {
	cognitoCredentialsFields `json:"-"`
}

// GetClientId returns externalAppFieldsCredentialsCognitoCredentials.ClientId, and is useful for accessing the field via an interface.
func (v *externalAppFieldsCredentialsCognitoCredentials) GetClientId() string {
	return v.cognitoCredentialsFields.ClientId
}

// GetPassword returns externalAppFieldsCredentialsCognitoCredentials.Password, and is useful for accessing the field via an interface.
func (v *externalAppFieldsCredentialsCognitoCredentials) GetPassword() string {
	return v.cognitoCredentialsFields.Password
}

// GetUserPoolId returns externalAppFieldsCredentialsCognitoCredentials.UserPoolId, and is useful for accessing the field via an interface.
func (v *externalAppFieldsCredentialsCognitoCredentials) GetUserPoolId() string {
	return v.cognitoCredentialsFields.UserPoolId
}

// GetUsername returns externalAppFieldsCredentialsCognitoCredentials.Username, and is useful for accessing the field via an interface.
func (v *externalAppFieldsCredentialsCognitoCredentials) GetUsername() string {
	return v.cognitoCredentialsFields.Username
}

func (v *externalAppFieldsCredentialsCognitoCredentials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*externalAppFieldsCredentialsCognitoCredentials
		graphql.NoUnmarshalJSON
	}
	firstPass.externalAppFieldsCredentialsCognitoCredentials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.cognitoCredentialsFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalexternalAppFieldsCredentialsCognitoCredentials struct {
	ClientId string `json:"clientId"`

	Password string `json:"password"`

	UserPoolId string `json:"userPoolId"`

	Username string `json:"username"`
}

func (v *externalAppFieldsCredentialsCognitoCredentials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *externalAppFieldsCredentialsCognitoCredentials) __premarshalJSON() (*__premarshalexternalAppFieldsCredentialsCognitoCredentials, error) {
	var retval __premarshalexternalAppFieldsCredentialsCognitoCredentials

	retval.ClientId = v.cognitoCredentialsFields.ClientId
	retval.Password = v.cognitoCredentialsFields.Password
	retval.UserPoolId = v.cognitoCredentialsFields.UserPoolId
	retval.Username = v.cognitoCredentialsFields.Username
	return &retval, nil
}

// externalNodeFields includes the GraphQL fields of ExternalNode requested by the fragment externalNodeFields.
type externalNodeFields struct {
	App                externalNodeFieldsAppRemoteApp        `json:"-"`
	Config             *string                               `json:"config"`
	ReceiveMessageType *externalNodeFieldsReceiveMessageType `json:"receiveMessageType"`
	SendMessageType    *externalNodeFieldsSendMessageType    `json:"sendMessageType"`
}

// GetApp returns externalNodeFields.App, and is useful for accessing the field via an interface.
func (v *externalNodeFields) GetApp() externalNodeFieldsAppRemoteApp { return v.App }

// GetConfig returns externalNodeFields.Config, and is useful for accessing the field via an interface.
func (v *externalNodeFields) GetConfig() *string { return v.Config }

// GetReceiveMessageType returns externalNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *externalNodeFields) GetReceiveMessageType() *externalNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetSendMessageType returns externalNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *externalNodeFields) GetSendMessageType() *externalNodeFieldsSendMessageType {
	return v.SendMessageType
}

func (v *externalNodeFields) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*externalNodeFields
		App json.RawMessage `json:"app"`
		graphql.NoUnmarshalJSON
	}
	firstPass.externalNodeFields = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	{
		dst := &v.App
		src := firstPass.App
		if len(src) != 0 && string(src) != "null" {
			err = __unmarshalexternalNodeFieldsAppRemoteApp(
				src, dst)
			if err != nil {
				return fmt.Errorf(
					"Unable to unmarshal externalNodeFields.App: %w", err)
			}
		}
	}
	return nil
}

type __premarshalexternalNodeFields struct {
	App json.RawMessage `json:"app"`

	Config *string `json:"config"`

	ReceiveMessageType *externalNodeFieldsReceiveMessageType `json:"receiveMessageType"`

	SendMessageType *externalNodeFieldsSendMessageType `json:"sendMessageType"`
}

func (v *externalNodeFields) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *externalNodeFields) __premarshalJSON() (*__premarshalexternalNodeFields, error) {
	var retval __premarshalexternalNodeFields

	{

		dst := &retval.App
		src := v.App
		var err error
		*dst, err = __marshalexternalNodeFieldsAppRemoteApp(
			&src)
		if err != nil {
			return nil, fmt.Errorf(
				"Unable to marshal externalNodeFields.App: %w", err)
		}
	}
	retval.Config = v.Config
	retval.ReceiveMessageType = v.ReceiveMessageType
	retval.SendMessageType = v.SendMessageType
	return &retval, nil
}

// externalNodeFieldsAppCrossAccountApp includes the requested fields of the GraphQL type CrossAccountApp.
type externalNodeFieldsAppCrossAccountApp struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
}

// GetTypename returns externalNodeFieldsAppCrossAccountApp.Typename, and is useful for accessing the field via an interface.
func (v *externalNodeFieldsAppCrossAccountApp) GetTypename() *string { return v.Typename }

// GetName returns externalNodeFieldsAppCrossAccountApp.Name, and is useful for accessing the field via an interface.
func (v *externalNodeFieldsAppCrossAccountApp) GetName() string { return v.Name }

// externalNodeFieldsAppExternalApp includes the requested fields of the GraphQL type ExternalApp.
type externalNodeFieldsAppExternalApp struct {
	Typename *string `json:"__typename"`
	Name     string  `json:"name"`
}

// GetTypename returns externalNodeFieldsAppExternalApp.Typename, and is useful for accessing the field via an interface.
func (v *externalNodeFieldsAppExternalApp) GetTypename() *string { return v.Typename }

// GetName returns externalNodeFieldsAppExternalApp.Name, and is useful for accessing the field via an interface.
func (v *externalNodeFieldsAppExternalApp) GetName() string { return v.Name }

// externalNodeFieldsAppRemoteApp includes the requested fields of the GraphQL interface RemoteApp.
//
// externalNodeFieldsAppRemoteApp is implemented by the following types:
// externalNodeFieldsAppCrossAccountApp
// externalNodeFieldsAppExternalApp
type externalNodeFieldsAppRemoteApp interface {
	implementsGraphQLInterfaceexternalNodeFieldsAppRemoteApp()
	// GetTypename returns the receiver's concrete GraphQL type-name (see interface doc for possible values).
	GetTypename() *string
}

func (v *externalNodeFieldsAppCrossAccountApp) implementsGraphQLInterfaceexternalNodeFieldsAppRemoteApp() {
}
func (v *externalNodeFieldsAppExternalApp) implementsGraphQLInterfaceexternalNodeFieldsAppRemoteApp() {
}

func __unmarshalexternalNodeFieldsAppRemoteApp(b []byte, v *externalNodeFieldsAppRemoteApp) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "CrossAccountApp":
		*v = new(externalNodeFieldsAppCrossAccountApp)
		return json.Unmarshal(b, *v)
	case "ExternalApp":
		*v = new(externalNodeFieldsAppExternalApp)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing RemoteApp.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for externalNodeFieldsAppRemoteApp: "%v"`, tn.TypeName)
	}
}

func __marshalexternalNodeFieldsAppRemoteApp(v *externalNodeFieldsAppRemoteApp) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *externalNodeFieldsAppCrossAccountApp:
		typename = "CrossAccountApp"

		result := struct {
			TypeName string `json:"__typename"`
			*externalNodeFieldsAppCrossAccountApp
		}{typename, v}
		return json.Marshal(result)
	case *externalNodeFieldsAppExternalApp:
		typename = "ExternalApp"

		result := struct {
			TypeName string `json:"__typename"`
			*externalNodeFieldsAppExternalApp
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for externalNodeFieldsAppRemoteApp: "%T"`, v)
	}
}

// externalNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type externalNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns externalNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *externalNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// externalNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type externalNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns externalNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *externalNodeFieldsSendMessageType) GetName() string { return v.Name }

// filesDotComWebhookNodeFields includes the GraphQL fields of FilesDotComWebhookNode requested by the fragment filesDotComWebhookNodeFields.
type filesDotComWebhookNodeFields struct {
	Endpoint        string                                       `json:"endpoint"`
	SendMessageType *filesDotComWebhookNodeFieldsSendMessageType `json:"sendMessageType"`
}

// GetEndpoint returns filesDotComWebhookNodeFields.Endpoint, and is useful for accessing the field via an interface.
func (v *filesDotComWebhookNodeFields) GetEndpoint() string { return v.Endpoint }

// GetSendMessageType returns filesDotComWebhookNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *filesDotComWebhookNodeFields) GetSendMessageType() *filesDotComWebhookNodeFieldsSendMessageType {
	return v.SendMessageType
}

// filesDotComWebhookNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type filesDotComWebhookNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns filesDotComWebhookNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *filesDotComWebhookNodeFieldsSendMessageType) GetName() string { return v.Name }

// functionFields includes the GraphQL fields of Function requested by the fragment functionFields.
//
// functionFields is implemented by the following types:
// functionFieldsApiAuthenticatorFunction
// functionFieldsBitmapperFunction
// functionFieldsProcessorFunction
type functionFields interface {
	implementsGraphQLInterfacefunctionFields()
	// GetCode returns the interface-field "code" from its implementation.
	GetCode() string
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() string
	// GetInUse returns the interface-field "inUse" from its implementation.
	GetInUse() bool
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
	// GetReadme returns the interface-field "readme" from its implementation.
	GetReadme() *string
	// GetRequirements returns the interface-field "requirements" from its implementation.
	GetRequirements() []string
	// GetSystem returns the interface-field "system" from its implementation.
	GetSystem() *bool
}

func (v *functionFieldsApiAuthenticatorFunction) implementsGraphQLInterfacefunctionFields() {}
func (v *functionFieldsBitmapperFunction) implementsGraphQLInterfacefunctionFields()        {}
func (v *functionFieldsProcessorFunction) implementsGraphQLInterfacefunctionFields()        {}

func __unmarshalfunctionFields(b []byte, v *functionFields) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "ApiAuthenticatorFunction":
		*v = new(functionFieldsApiAuthenticatorFunction)
		return json.Unmarshal(b, *v)
	case "BitmapperFunction":
		*v = new(functionFieldsBitmapperFunction)
		return json.Unmarshal(b, *v)
	case "ProcessorFunction":
		*v = new(functionFieldsProcessorFunction)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Function.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for functionFields: "%v"`, tn.TypeName)
	}
}

func __marshalfunctionFields(v *functionFields) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *functionFieldsApiAuthenticatorFunction:
		typename = "ApiAuthenticatorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*functionFieldsApiAuthenticatorFunction
		}{typename, v}
		return json.Marshal(result)
	case *functionFieldsBitmapperFunction:
		typename = "BitmapperFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*functionFieldsBitmapperFunction
		}{typename, v}
		return json.Marshal(result)
	case *functionFieldsProcessorFunction:
		typename = "ProcessorFunction"

		result := struct {
			TypeName string `json:"__typename"`
			*functionFieldsProcessorFunction
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for functionFields: "%T"`, v)
	}
}

// functionFields includes the GraphQL fields of ApiAuthenticatorFunction requested by the fragment functionFields.
type functionFieldsApiAuthenticatorFunction struct {
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	InUse        bool     `json:"inUse"`
	Name         string   `json:"name"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
	System       *bool    `json:"system"`
}

// GetCode returns functionFieldsApiAuthenticatorFunction.Code, and is useful for accessing the field via an interface.
func (v *functionFieldsApiAuthenticatorFunction) GetCode() string { return v.Code }

// GetDescription returns functionFieldsApiAuthenticatorFunction.Description, and is useful for accessing the field via an interface.
func (v *functionFieldsApiAuthenticatorFunction) GetDescription() string { return v.Description }

// GetInUse returns functionFieldsApiAuthenticatorFunction.InUse, and is useful for accessing the field via an interface.
func (v *functionFieldsApiAuthenticatorFunction) GetInUse() bool { return v.InUse }

// GetName returns functionFieldsApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *functionFieldsApiAuthenticatorFunction) GetName() string { return v.Name }

// GetReadme returns functionFieldsApiAuthenticatorFunction.Readme, and is useful for accessing the field via an interface.
func (v *functionFieldsApiAuthenticatorFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns functionFieldsApiAuthenticatorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *functionFieldsApiAuthenticatorFunction) GetRequirements() []string { return v.Requirements }

// GetSystem returns functionFieldsApiAuthenticatorFunction.System, and is useful for accessing the field via an interface.
func (v *functionFieldsApiAuthenticatorFunction) GetSystem() *bool { return v.System }

// functionFields includes the GraphQL fields of BitmapperFunction requested by the fragment functionFields.
type functionFieldsBitmapperFunction struct {
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	InUse        bool     `json:"inUse"`
	Name         string   `json:"name"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
	System       *bool    `json:"system"`
}

// GetCode returns functionFieldsBitmapperFunction.Code, and is useful for accessing the field via an interface.
func (v *functionFieldsBitmapperFunction) GetCode() string { return v.Code }

// GetDescription returns functionFieldsBitmapperFunction.Description, and is useful for accessing the field via an interface.
func (v *functionFieldsBitmapperFunction) GetDescription() string { return v.Description }

// GetInUse returns functionFieldsBitmapperFunction.InUse, and is useful for accessing the field via an interface.
func (v *functionFieldsBitmapperFunction) GetInUse() bool { return v.InUse }

// GetName returns functionFieldsBitmapperFunction.Name, and is useful for accessing the field via an interface.
func (v *functionFieldsBitmapperFunction) GetName() string { return v.Name }

// GetReadme returns functionFieldsBitmapperFunction.Readme, and is useful for accessing the field via an interface.
func (v *functionFieldsBitmapperFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns functionFieldsBitmapperFunction.Requirements, and is useful for accessing the field via an interface.
func (v *functionFieldsBitmapperFunction) GetRequirements() []string { return v.Requirements }

// GetSystem returns functionFieldsBitmapperFunction.System, and is useful for accessing the field via an interface.
func (v *functionFieldsBitmapperFunction) GetSystem() *bool { return v.System }

// functionFields includes the GraphQL fields of ProcessorFunction requested by the fragment functionFields.
type functionFieldsProcessorFunction struct {
	Code         string   `json:"code"`
	Description  string   `json:"description"`
	InUse        bool     `json:"inUse"`
	Name         string   `json:"name"`
	Readme       *string  `json:"readme"`
	Requirements []string `json:"requirements"`
	System       *bool    `json:"system"`
}

// GetCode returns functionFieldsProcessorFunction.Code, and is useful for accessing the field via an interface.
func (v *functionFieldsProcessorFunction) GetCode() string { return v.Code }

// GetDescription returns functionFieldsProcessorFunction.Description, and is useful for accessing the field via an interface.
func (v *functionFieldsProcessorFunction) GetDescription() string { return v.Description }

// GetInUse returns functionFieldsProcessorFunction.InUse, and is useful for accessing the field via an interface.
func (v *functionFieldsProcessorFunction) GetInUse() bool { return v.InUse }

// GetName returns functionFieldsProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *functionFieldsProcessorFunction) GetName() string { return v.Name }

// GetReadme returns functionFieldsProcessorFunction.Readme, and is useful for accessing the field via an interface.
func (v *functionFieldsProcessorFunction) GetReadme() *string { return v.Readme }

// GetRequirements returns functionFieldsProcessorFunction.Requirements, and is useful for accessing the field via an interface.
func (v *functionFieldsProcessorFunction) GetRequirements() []string { return v.Requirements }

// GetSystem returns functionFieldsProcessorFunction.System, and is useful for accessing the field via an interface.
func (v *functionFieldsProcessorFunction) GetSystem() *bool { return v.System }

// kmsKeyFields includes the GraphQL fields of KmsKey requested by the fragment kmsKeyFields.
type kmsKeyFields struct {
	Arn         string  `json:"arn"`
	Description *string `json:"description"`
	InUse       bool    `json:"inUse"`
	Name        string  `json:"name"`
}

// GetArn returns kmsKeyFields.Arn, and is useful for accessing the field via an interface.
func (v *kmsKeyFields) GetArn() string { return v.Arn }

// GetDescription returns kmsKeyFields.Description, and is useful for accessing the field via an interface.
func (v *kmsKeyFields) GetDescription() *string { return v.Description }

// GetInUse returns kmsKeyFields.InUse, and is useful for accessing the field via an interface.
func (v *kmsKeyFields) GetInUse() bool { return v.InUse }

// GetName returns kmsKeyFields.Name, and is useful for accessing the field via an interface.
func (v *kmsKeyFields) GetName() string { return v.Name }

// loadBalancerNodeFields includes the GraphQL fields of LoadBalancerNode requested by the fragment loadBalancerNodeFields.
type loadBalancerNodeFields struct {
	ReceiveMessageType *loadBalancerNodeFieldsReceiveMessageType `json:"receiveMessageType"`
	SendMessageType    *loadBalancerNodeFieldsSendMessageType    `json:"sendMessageType"`
}

// GetReceiveMessageType returns loadBalancerNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *loadBalancerNodeFields) GetReceiveMessageType() *loadBalancerNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetSendMessageType returns loadBalancerNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *loadBalancerNodeFields) GetSendMessageType() *loadBalancerNodeFieldsSendMessageType {
	return v.SendMessageType
}

// loadBalancerNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type loadBalancerNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns loadBalancerNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *loadBalancerNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// loadBalancerNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type loadBalancerNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns loadBalancerNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *loadBalancerNodeFieldsSendMessageType) GetName() string { return v.Name }

// logEmitterNodeFields includes the GraphQL fields of LogEmitterNode requested by the fragment logEmitterNodeFields.
type logEmitterNodeFields struct {
	SendMessageType *logEmitterNodeFieldsSendMessageType `json:"sendMessageType"`
}

// GetSendMessageType returns logEmitterNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *logEmitterNodeFields) GetSendMessageType() *logEmitterNodeFieldsSendMessageType {
	return v.SendMessageType
}

// logEmitterNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type logEmitterNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns logEmitterNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *logEmitterNodeFieldsSendMessageType) GetName() string { return v.Name }

// managedAppFields includes the GraphQL fields of ManagedApp requested by the fragment managedAppFields.
type managedAppFields struct {
	AuditRecordsEndpoint string                                        `json:"auditRecordsEndpoint"`
	Config               *string                                       `json:"config"`
	Credentials          managedAppFieldsCredentialsCognitoCredentials `json:"credentials"`
	TableAccess          bool                                          `json:"tableAccess"`
}

// GetAuditRecordsEndpoint returns managedAppFields.AuditRecordsEndpoint, and is useful for accessing the field via an interface.
func (v *managedAppFields) GetAuditRecordsEndpoint() string { return v.AuditRecordsEndpoint }

// GetConfig returns managedAppFields.Config, and is useful for accessing the field via an interface.
func (v *managedAppFields) GetConfig() *string { return v.Config }

// GetCredentials returns managedAppFields.Credentials, and is useful for accessing the field via an interface.
func (v *managedAppFields) GetCredentials() managedAppFieldsCredentialsCognitoCredentials {
	return v.Credentials
}

// GetTableAccess returns managedAppFields.TableAccess, and is useful for accessing the field via an interface.
func (v *managedAppFields) GetTableAccess() bool { return v.TableAccess }

// managedAppFieldsCredentialsCognitoCredentials includes the requested fields of the GraphQL type CognitoCredentials.
type managedAppFieldsCredentialsCognitoCredentials struct {
	cognitoCredentialsFields `json:"-"`
}

// GetClientId returns managedAppFieldsCredentialsCognitoCredentials.ClientId, and is useful for accessing the field via an interface.
func (v *managedAppFieldsCredentialsCognitoCredentials) GetClientId() string {
	return v.cognitoCredentialsFields.ClientId
}

// GetPassword returns managedAppFieldsCredentialsCognitoCredentials.Password, and is useful for accessing the field via an interface.
func (v *managedAppFieldsCredentialsCognitoCredentials) GetPassword() string {
	return v.cognitoCredentialsFields.Password
}

// GetUserPoolId returns managedAppFieldsCredentialsCognitoCredentials.UserPoolId, and is useful for accessing the field via an interface.
func (v *managedAppFieldsCredentialsCognitoCredentials) GetUserPoolId() string {
	return v.cognitoCredentialsFields.UserPoolId
}

// GetUsername returns managedAppFieldsCredentialsCognitoCredentials.Username, and is useful for accessing the field via an interface.
func (v *managedAppFieldsCredentialsCognitoCredentials) GetUsername() string {
	return v.cognitoCredentialsFields.Username
}

func (v *managedAppFieldsCredentialsCognitoCredentials) UnmarshalJSON(b []byte) error {

	if string(b) == "null" {
		return nil
	}

	var firstPass struct {
		*managedAppFieldsCredentialsCognitoCredentials
		graphql.NoUnmarshalJSON
	}
	firstPass.managedAppFieldsCredentialsCognitoCredentials = v

	err := json.Unmarshal(b, &firstPass)
	if err != nil {
		return err
	}

	err = json.Unmarshal(
		b, &v.cognitoCredentialsFields)
	if err != nil {
		return err
	}
	return nil
}

type __premarshalmanagedAppFieldsCredentialsCognitoCredentials struct {
	ClientId string `json:"clientId"`

	Password string `json:"password"`

	UserPoolId string `json:"userPoolId"`

	Username string `json:"username"`
}

func (v *managedAppFieldsCredentialsCognitoCredentials) MarshalJSON() ([]byte, error) {
	premarshaled, err := v.__premarshalJSON()
	if err != nil {
		return nil, err
	}
	return json.Marshal(premarshaled)
}

func (v *managedAppFieldsCredentialsCognitoCredentials) __premarshalJSON() (*__premarshalmanagedAppFieldsCredentialsCognitoCredentials, error) {
	var retval __premarshalmanagedAppFieldsCredentialsCognitoCredentials

	retval.ClientId = v.cognitoCredentialsFields.ClientId
	retval.Password = v.cognitoCredentialsFields.Password
	retval.UserPoolId = v.cognitoCredentialsFields.UserPoolId
	retval.Username = v.cognitoCredentialsFields.Username
	return &retval, nil
}

// managedNodeFields includes the GraphQL fields of ManagedNode requested by the fragment managedNodeFields.
type managedNodeFields struct {
	App                managedNodeFieldsAppManagedApp       `json:"app"`
	Config             *string                              `json:"config"`
	LoggingLevel       *LogLevel                            `json:"loggingLevel"`
	ManagedNodeType    managedNodeFieldsManagedNodeType     `json:"managedNodeType"`
	Mounts             []managedNodeFieldsMountsMount       `json:"mounts"`
	Ports              []managedNodeFieldsPortsPort         `json:"ports"`
	ReceiveMessageType *managedNodeFieldsReceiveMessageType `json:"receiveMessageType"`
	SendMessageType    *managedNodeFieldsSendMessageType    `json:"sendMessageType"`
}

// GetApp returns managedNodeFields.App, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetApp() managedNodeFieldsAppManagedApp { return v.App }

// GetConfig returns managedNodeFields.Config, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetConfig() *string { return v.Config }

// GetLoggingLevel returns managedNodeFields.LoggingLevel, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedNodeType returns managedNodeFields.ManagedNodeType, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetManagedNodeType() managedNodeFieldsManagedNodeType {
	return v.ManagedNodeType
}

// GetMounts returns managedNodeFields.Mounts, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetMounts() []managedNodeFieldsMountsMount { return v.Mounts }

// GetPorts returns managedNodeFields.Ports, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetPorts() []managedNodeFieldsPortsPort { return v.Ports }

// GetReceiveMessageType returns managedNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetReceiveMessageType() *managedNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetSendMessageType returns managedNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *managedNodeFields) GetSendMessageType() *managedNodeFieldsSendMessageType {
	return v.SendMessageType
}

// managedNodeFieldsAppManagedApp includes the requested fields of the GraphQL type ManagedApp.
type managedNodeFieldsAppManagedApp struct {
	Name string `json:"name"`
}

// GetName returns managedNodeFieldsAppManagedApp.Name, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsAppManagedApp) GetName() string { return v.Name }

// managedNodeFieldsManagedNodeType includes the requested fields of the GraphQL type ManagedNodeType.
type managedNodeFieldsManagedNodeType struct {
	Name string `json:"name"`
}

// GetName returns managedNodeFieldsManagedNodeType.Name, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsManagedNodeType) GetName() string { return v.Name }

// managedNodeFieldsMountsMount includes the requested fields of the GraphQL type Mount.
type managedNodeFieldsMountsMount struct {
	Description string  `json:"description"`
	Source      *string `json:"source"`
	Target      string  `json:"target"`
}

// GetDescription returns managedNodeFieldsMountsMount.Description, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsMountsMount) GetDescription() string { return v.Description }

// GetSource returns managedNodeFieldsMountsMount.Source, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsMountsMount) GetSource() *string { return v.Source }

// GetTarget returns managedNodeFieldsMountsMount.Target, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsMountsMount) GetTarget() string { return v.Target }

// managedNodeFieldsPortsPort includes the requested fields of the GraphQL type Port.
type managedNodeFieldsPortsPort struct {
	ContainerPort int      `json:"containerPort"`
	Description   string   `json:"description"`
	HostAddress   *string  `json:"hostAddress"`
	Protocol      Protocol `json:"protocol"`
}

// GetContainerPort returns managedNodeFieldsPortsPort.ContainerPort, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsPortsPort) GetContainerPort() int { return v.ContainerPort }

// GetDescription returns managedNodeFieldsPortsPort.Description, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsPortsPort) GetDescription() string { return v.Description }

// GetHostAddress returns managedNodeFieldsPortsPort.HostAddress, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsPortsPort) GetHostAddress() *string { return v.HostAddress }

// GetProtocol returns managedNodeFieldsPortsPort.Protocol, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsPortsPort) GetProtocol() Protocol { return v.Protocol }

// managedNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type managedNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns managedNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// managedNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type managedNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns managedNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *managedNodeFieldsSendMessageType) GetName() string { return v.Name }

// managedNodeTypeFields includes the GraphQL fields of ManagedNodeType requested by the fragment managedNodeTypeFields.
type managedNodeTypeFields struct {
	ConfigTemplate     *string                                                  `json:"configTemplate"`
	Description        string                                                   `json:"description"`
	ImageUri           string                                                   `json:"imageUri"`
	InUse              bool                                                     `json:"inUse"`
	MountRequirements  []managedNodeTypeFieldsMountRequirementsMountRequirement `json:"mountRequirements"`
	Name               string                                                   `json:"name"`
	PortRequirements   []managedNodeTypeFieldsPortRequirementsPortRequirement   `json:"portRequirements"`
	Readme             *string                                                  `json:"readme"`
	ReceiveMessageType *managedNodeTypeFieldsReceiveMessageType                 `json:"receiveMessageType"`
	SendMessageType    *managedNodeTypeFieldsSendMessageType                    `json:"sendMessageType"`
	System             *bool                                                    `json:"system"`
}

// GetConfigTemplate returns managedNodeTypeFields.ConfigTemplate, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetConfigTemplate() *string { return v.ConfigTemplate }

// GetDescription returns managedNodeTypeFields.Description, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetDescription() string { return v.Description }

// GetImageUri returns managedNodeTypeFields.ImageUri, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetImageUri() string { return v.ImageUri }

// GetInUse returns managedNodeTypeFields.InUse, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetInUse() bool { return v.InUse }

// GetMountRequirements returns managedNodeTypeFields.MountRequirements, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetMountRequirements() []managedNodeTypeFieldsMountRequirementsMountRequirement {
	return v.MountRequirements
}

// GetName returns managedNodeTypeFields.Name, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetName() string { return v.Name }

// GetPortRequirements returns managedNodeTypeFields.PortRequirements, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetPortRequirements() []managedNodeTypeFieldsPortRequirementsPortRequirement {
	return v.PortRequirements
}

// GetReadme returns managedNodeTypeFields.Readme, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetReadme() *string { return v.Readme }

// GetReceiveMessageType returns managedNodeTypeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetReceiveMessageType() *managedNodeTypeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetSendMessageType returns managedNodeTypeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetSendMessageType() *managedNodeTypeFieldsSendMessageType {
	return v.SendMessageType
}

// GetSystem returns managedNodeTypeFields.System, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFields) GetSystem() *bool { return v.System }

// managedNodeTypeFieldsMountRequirementsMountRequirement includes the requested fields of the GraphQL type MountRequirement.
type managedNodeTypeFieldsMountRequirementsMountRequirement struct {
	Description string  `json:"description"`
	Source      *string `json:"source"`
	Target      string  `json:"target"`
}

// GetDescription returns managedNodeTypeFieldsMountRequirementsMountRequirement.Description, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsMountRequirementsMountRequirement) GetDescription() string {
	return v.Description
}

// GetSource returns managedNodeTypeFieldsMountRequirementsMountRequirement.Source, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsMountRequirementsMountRequirement) GetSource() *string { return v.Source }

// GetTarget returns managedNodeTypeFieldsMountRequirementsMountRequirement.Target, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsMountRequirementsMountRequirement) GetTarget() string { return v.Target }

// managedNodeTypeFieldsPortRequirementsPortRequirement includes the requested fields of the GraphQL type PortRequirement.
type managedNodeTypeFieldsPortRequirementsPortRequirement struct {
	ContainerPort int      `json:"containerPort"`
	Description   string   `json:"description"`
	Protocol      Protocol `json:"protocol"`
}

// GetContainerPort returns managedNodeTypeFieldsPortRequirementsPortRequirement.ContainerPort, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsPortRequirementsPortRequirement) GetContainerPort() int {
	return v.ContainerPort
}

// GetDescription returns managedNodeTypeFieldsPortRequirementsPortRequirement.Description, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsPortRequirementsPortRequirement) GetDescription() string {
	return v.Description
}

// GetProtocol returns managedNodeTypeFieldsPortRequirementsPortRequirement.Protocol, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsPortRequirementsPortRequirement) GetProtocol() Protocol {
	return v.Protocol
}

// managedNodeTypeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type managedNodeTypeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns managedNodeTypeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsReceiveMessageType) GetName() string { return v.Name }

// managedNodeTypeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type managedNodeTypeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns managedNodeTypeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *managedNodeTypeFieldsSendMessageType) GetName() string { return v.Name }

// messageTypeFields includes the GraphQL fields of MessageType requested by the fragment messageTypeFields.
type messageTypeFields struct {
	Auditor           string   `json:"auditor"`
	BitmapperTemplate string   `json:"bitmapperTemplate"`
	Description       string   `json:"description"`
	InUse             bool     `json:"inUse"`
	Name              string   `json:"name"`
	ProcessorTemplate string   `json:"processorTemplate"`
	Readme            *string  `json:"readme"`
	Requirements      []string `json:"requirements"`
	SampleMessage     string   `json:"sampleMessage"`
	System            *bool    `json:"system"`
}

// GetAuditor returns messageTypeFields.Auditor, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetAuditor() string { return v.Auditor }

// GetBitmapperTemplate returns messageTypeFields.BitmapperTemplate, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetBitmapperTemplate() string { return v.BitmapperTemplate }

// GetDescription returns messageTypeFields.Description, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetDescription() string { return v.Description }

// GetInUse returns messageTypeFields.InUse, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetInUse() bool { return v.InUse }

// GetName returns messageTypeFields.Name, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetName() string { return v.Name }

// GetProcessorTemplate returns messageTypeFields.ProcessorTemplate, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetProcessorTemplate() string { return v.ProcessorTemplate }

// GetReadme returns messageTypeFields.Readme, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetReadme() *string { return v.Readme }

// GetRequirements returns messageTypeFields.Requirements, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetRequirements() []string { return v.Requirements }

// GetSampleMessage returns messageTypeFields.SampleMessage, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetSampleMessage() string { return v.SampleMessage }

// GetSystem returns messageTypeFields.System, and is useful for accessing the field via an interface.
func (v *messageTypeFields) GetSystem() *bool { return v.System }

// nodeFields includes the GraphQL fields of Node requested by the fragment nodeFields.
//
// nodeFields is implemented by the following types:
// nodeFieldsAlertEmitterNode
// nodeFieldsAppChangeReceiverNode
// nodeFieldsAppChangeRouterNode
// nodeFieldsAuditEmitterNode
// nodeFieldsBitmapRouterNode
// nodeFieldsChangeEmitterNode
// nodeFieldsCrossTenantReceivingNode
// nodeFieldsCrossTenantSendingNode
// nodeFieldsDeadLetterEmitterNode
// nodeFieldsExternalNode
// nodeFieldsFilesDotComWebhookNode
// nodeFieldsLoadBalancerNode
// nodeFieldsLogEmitterNode
// nodeFieldsManagedNode
// nodeFieldsProcessorNode
// nodeFieldsTimerNode
// nodeFieldsWebhookNode
type nodeFields interface {
	implementsGraphQLInterfacenodeFields()
	// GetDescription returns the interface-field "description" from its implementation.
	GetDescription() *string
	// GetName returns the interface-field "name" from its implementation.
	GetName() string
}

func (v *nodeFieldsAlertEmitterNode) implementsGraphQLInterfacenodeFields()         {}
func (v *nodeFieldsAppChangeReceiverNode) implementsGraphQLInterfacenodeFields()    {}
func (v *nodeFieldsAppChangeRouterNode) implementsGraphQLInterfacenodeFields()      {}
func (v *nodeFieldsAuditEmitterNode) implementsGraphQLInterfacenodeFields()         {}
func (v *nodeFieldsBitmapRouterNode) implementsGraphQLInterfacenodeFields()         {}
func (v *nodeFieldsChangeEmitterNode) implementsGraphQLInterfacenodeFields()        {}
func (v *nodeFieldsCrossTenantReceivingNode) implementsGraphQLInterfacenodeFields() {}
func (v *nodeFieldsCrossTenantSendingNode) implementsGraphQLInterfacenodeFields()   {}
func (v *nodeFieldsDeadLetterEmitterNode) implementsGraphQLInterfacenodeFields()    {}
func (v *nodeFieldsExternalNode) implementsGraphQLInterfacenodeFields()             {}
func (v *nodeFieldsFilesDotComWebhookNode) implementsGraphQLInterfacenodeFields()   {}
func (v *nodeFieldsLoadBalancerNode) implementsGraphQLInterfacenodeFields()         {}
func (v *nodeFieldsLogEmitterNode) implementsGraphQLInterfacenodeFields()           {}
func (v *nodeFieldsManagedNode) implementsGraphQLInterfacenodeFields()              {}
func (v *nodeFieldsProcessorNode) implementsGraphQLInterfacenodeFields()            {}
func (v *nodeFieldsTimerNode) implementsGraphQLInterfacenodeFields()                {}
func (v *nodeFieldsWebhookNode) implementsGraphQLInterfacenodeFields()              {}

func __unmarshalnodeFields(b []byte, v *nodeFields) error {
	if string(b) == "null" {
		return nil
	}

	var tn struct {
		TypeName string `json:"__typename"`
	}
	err := json.Unmarshal(b, &tn)
	if err != nil {
		return err
	}

	switch tn.TypeName {
	case "AlertEmitterNode":
		*v = new(nodeFieldsAlertEmitterNode)
		return json.Unmarshal(b, *v)
	case "AppChangeReceiverNode":
		*v = new(nodeFieldsAppChangeReceiverNode)
		return json.Unmarshal(b, *v)
	case "AppChangeRouterNode":
		*v = new(nodeFieldsAppChangeRouterNode)
		return json.Unmarshal(b, *v)
	case "AuditEmitterNode":
		*v = new(nodeFieldsAuditEmitterNode)
		return json.Unmarshal(b, *v)
	case "BitmapRouterNode":
		*v = new(nodeFieldsBitmapRouterNode)
		return json.Unmarshal(b, *v)
	case "ChangeEmitterNode":
		*v = new(nodeFieldsChangeEmitterNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantReceivingNode":
		*v = new(nodeFieldsCrossTenantReceivingNode)
		return json.Unmarshal(b, *v)
	case "CrossTenantSendingNode":
		*v = new(nodeFieldsCrossTenantSendingNode)
		return json.Unmarshal(b, *v)
	case "DeadLetterEmitterNode":
		*v = new(nodeFieldsDeadLetterEmitterNode)
		return json.Unmarshal(b, *v)
	case "ExternalNode":
		*v = new(nodeFieldsExternalNode)
		return json.Unmarshal(b, *v)
	case "FilesDotComWebhookNode":
		*v = new(nodeFieldsFilesDotComWebhookNode)
		return json.Unmarshal(b, *v)
	case "LoadBalancerNode":
		*v = new(nodeFieldsLoadBalancerNode)
		return json.Unmarshal(b, *v)
	case "LogEmitterNode":
		*v = new(nodeFieldsLogEmitterNode)
		return json.Unmarshal(b, *v)
	case "ManagedNode":
		*v = new(nodeFieldsManagedNode)
		return json.Unmarshal(b, *v)
	case "ProcessorNode":
		*v = new(nodeFieldsProcessorNode)
		return json.Unmarshal(b, *v)
	case "TimerNode":
		*v = new(nodeFieldsTimerNode)
		return json.Unmarshal(b, *v)
	case "WebhookNode":
		*v = new(nodeFieldsWebhookNode)
		return json.Unmarshal(b, *v)
	case "":
		return fmt.Errorf(
			"response was missing Node.__typename")
	default:
		return fmt.Errorf(
			`unexpected concrete type for nodeFields: "%v"`, tn.TypeName)
	}
}

func __marshalnodeFields(v *nodeFields) ([]byte, error) {

	var typename string
	switch v := (*v).(type) {
	case *nodeFieldsAlertEmitterNode:
		typename = "AlertEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsAlertEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsAppChangeReceiverNode:
		typename = "AppChangeReceiverNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsAppChangeReceiverNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsAppChangeRouterNode:
		typename = "AppChangeRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsAppChangeRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsAuditEmitterNode:
		typename = "AuditEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsAuditEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsBitmapRouterNode:
		typename = "BitmapRouterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsBitmapRouterNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsChangeEmitterNode:
		typename = "ChangeEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsChangeEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsCrossTenantReceivingNode:
		typename = "CrossTenantReceivingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsCrossTenantReceivingNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsCrossTenantSendingNode:
		typename = "CrossTenantSendingNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsCrossTenantSendingNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsDeadLetterEmitterNode:
		typename = "DeadLetterEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsDeadLetterEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsExternalNode:
		typename = "ExternalNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsExternalNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsFilesDotComWebhookNode:
		typename = "FilesDotComWebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsFilesDotComWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsLoadBalancerNode:
		typename = "LoadBalancerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsLoadBalancerNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsLogEmitterNode:
		typename = "LogEmitterNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsLogEmitterNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsManagedNode:
		typename = "ManagedNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsManagedNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsProcessorNode:
		typename = "ProcessorNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsProcessorNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsTimerNode:
		typename = "TimerNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsTimerNode
		}{typename, v}
		return json.Marshal(result)
	case *nodeFieldsWebhookNode:
		typename = "WebhookNode"

		result := struct {
			TypeName string `json:"__typename"`
			*nodeFieldsWebhookNode
		}{typename, v}
		return json.Marshal(result)
	case nil:
		return []byte("null"), nil
	default:
		return nil, fmt.Errorf(
			`unexpected concrete type for nodeFields: "%T"`, v)
	}
}

// nodeFields includes the GraphQL fields of AlertEmitterNode requested by the fragment nodeFields.
type nodeFieldsAlertEmitterNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsAlertEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsAlertEmitterNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsAlertEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsAlertEmitterNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of AppChangeReceiverNode requested by the fragment nodeFields.
type nodeFieldsAppChangeReceiverNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsAppChangeReceiverNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsAppChangeReceiverNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsAppChangeReceiverNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsAppChangeReceiverNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of AppChangeRouterNode requested by the fragment nodeFields.
type nodeFieldsAppChangeRouterNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsAppChangeRouterNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsAppChangeRouterNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsAppChangeRouterNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsAppChangeRouterNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of AuditEmitterNode requested by the fragment nodeFields.
type nodeFieldsAuditEmitterNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsAuditEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsAuditEmitterNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsAuditEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsAuditEmitterNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of BitmapRouterNode requested by the fragment nodeFields.
type nodeFieldsBitmapRouterNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsBitmapRouterNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsBitmapRouterNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsBitmapRouterNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsBitmapRouterNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of ChangeEmitterNode requested by the fragment nodeFields.
type nodeFieldsChangeEmitterNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsChangeEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsChangeEmitterNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsChangeEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsChangeEmitterNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of CrossTenantReceivingNode requested by the fragment nodeFields.
type nodeFieldsCrossTenantReceivingNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsCrossTenantReceivingNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsCrossTenantReceivingNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsCrossTenantReceivingNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsCrossTenantReceivingNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of CrossTenantSendingNode requested by the fragment nodeFields.
type nodeFieldsCrossTenantSendingNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsCrossTenantSendingNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsCrossTenantSendingNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsCrossTenantSendingNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsCrossTenantSendingNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of DeadLetterEmitterNode requested by the fragment nodeFields.
type nodeFieldsDeadLetterEmitterNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsDeadLetterEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsDeadLetterEmitterNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsDeadLetterEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsDeadLetterEmitterNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of ExternalNode requested by the fragment nodeFields.
type nodeFieldsExternalNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsExternalNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsExternalNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsExternalNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsExternalNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of FilesDotComWebhookNode requested by the fragment nodeFields.
type nodeFieldsFilesDotComWebhookNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsFilesDotComWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsFilesDotComWebhookNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsFilesDotComWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsFilesDotComWebhookNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of LoadBalancerNode requested by the fragment nodeFields.
type nodeFieldsLoadBalancerNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsLoadBalancerNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsLoadBalancerNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsLoadBalancerNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsLoadBalancerNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of LogEmitterNode requested by the fragment nodeFields.
type nodeFieldsLogEmitterNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsLogEmitterNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsLogEmitterNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsLogEmitterNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsLogEmitterNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of ManagedNode requested by the fragment nodeFields.
type nodeFieldsManagedNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsManagedNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsManagedNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsManagedNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsManagedNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of ProcessorNode requested by the fragment nodeFields.
type nodeFieldsProcessorNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsProcessorNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsProcessorNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsProcessorNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsProcessorNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of TimerNode requested by the fragment nodeFields.
type nodeFieldsTimerNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsTimerNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsTimerNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsTimerNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsTimerNode) GetName() string { return v.Name }

// nodeFields includes the GraphQL fields of WebhookNode requested by the fragment nodeFields.
type nodeFieldsWebhookNode struct {
	Description *string `json:"description"`
	Name        string  `json:"name"`
}

// GetDescription returns nodeFieldsWebhookNode.Description, and is useful for accessing the field via an interface.
func (v *nodeFieldsWebhookNode) GetDescription() *string { return v.Description }

// GetName returns nodeFieldsWebhookNode.Name, and is useful for accessing the field via an interface.
func (v *nodeFieldsWebhookNode) GetName() string { return v.Name }

// processorFunctionFields includes the GraphQL fields of ProcessorFunction requested by the fragment processorFunctionFields.
type processorFunctionFields struct {
	ArgumentMessageType processorFunctionFieldsArgumentMessageType `json:"argumentMessageType"`
	ReturnMessageType   *processorFunctionFieldsReturnMessageType  `json:"returnMessageType"`
}

// GetArgumentMessageType returns processorFunctionFields.ArgumentMessageType, and is useful for accessing the field via an interface.
func (v *processorFunctionFields) GetArgumentMessageType() processorFunctionFieldsArgumentMessageType {
	return v.ArgumentMessageType
}

// GetReturnMessageType returns processorFunctionFields.ReturnMessageType, and is useful for accessing the field via an interface.
func (v *processorFunctionFields) GetReturnMessageType() *processorFunctionFieldsReturnMessageType {
	return v.ReturnMessageType
}

// processorFunctionFieldsArgumentMessageType includes the requested fields of the GraphQL type MessageType.
type processorFunctionFieldsArgumentMessageType struct {
	Name string `json:"name"`
}

// GetName returns processorFunctionFieldsArgumentMessageType.Name, and is useful for accessing the field via an interface.
func (v *processorFunctionFieldsArgumentMessageType) GetName() string { return v.Name }

// processorFunctionFieldsReturnMessageType includes the requested fields of the GraphQL type MessageType.
type processorFunctionFieldsReturnMessageType struct {
	Name string `json:"name"`
}

// GetName returns processorFunctionFieldsReturnMessageType.Name, and is useful for accessing the field via an interface.
func (v *processorFunctionFieldsReturnMessageType) GetName() string { return v.Name }

// processorNodeFields includes the GraphQL fields of ProcessorNode requested by the fragment processorNodeFields.
type processorNodeFields struct {
	Config               *string                                               `json:"config"`
	InlineProcessor      *string                                               `json:"inlineProcessor"`
	LoggingLevel         *LogLevel                                             `json:"loggingLevel"`
	ManagedProcessor     *processorNodeFieldsManagedProcessorProcessorFunction `json:"managedProcessor"`
	ReceiveMessageType   *processorNodeFieldsReceiveMessageType                `json:"receiveMessageType"`
	Requirements         []string                                              `json:"requirements"`
	SendMessageType      *processorNodeFieldsSendMessageType                   `json:"sendMessageType"`
	SequentialProcessing *bool                                                 `json:"sequentialProcessing"`
}

// GetConfig returns processorNodeFields.Config, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetConfig() *string { return v.Config }

// GetInlineProcessor returns processorNodeFields.InlineProcessor, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetInlineProcessor() *string { return v.InlineProcessor }

// GetLoggingLevel returns processorNodeFields.LoggingLevel, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedProcessor returns processorNodeFields.ManagedProcessor, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetManagedProcessor() *processorNodeFieldsManagedProcessorProcessorFunction {
	return v.ManagedProcessor
}

// GetReceiveMessageType returns processorNodeFields.ReceiveMessageType, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetReceiveMessageType() *processorNodeFieldsReceiveMessageType {
	return v.ReceiveMessageType
}

// GetRequirements returns processorNodeFields.Requirements, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetRequirements() []string { return v.Requirements }

// GetSendMessageType returns processorNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetSendMessageType() *processorNodeFieldsSendMessageType {
	return v.SendMessageType
}

// GetSequentialProcessing returns processorNodeFields.SequentialProcessing, and is useful for accessing the field via an interface.
func (v *processorNodeFields) GetSequentialProcessing() *bool { return v.SequentialProcessing }

// processorNodeFieldsManagedProcessorProcessorFunction includes the requested fields of the GraphQL type ProcessorFunction.
type processorNodeFieldsManagedProcessorProcessorFunction struct {
	Name string `json:"name"`
}

// GetName returns processorNodeFieldsManagedProcessorProcessorFunction.Name, and is useful for accessing the field via an interface.
func (v *processorNodeFieldsManagedProcessorProcessorFunction) GetName() string { return v.Name }

// processorNodeFieldsReceiveMessageType includes the requested fields of the GraphQL type MessageType.
type processorNodeFieldsReceiveMessageType struct {
	Name string `json:"name"`
}

// GetName returns processorNodeFieldsReceiveMessageType.Name, and is useful for accessing the field via an interface.
func (v *processorNodeFieldsReceiveMessageType) GetName() string { return v.Name }

// processorNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type processorNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns processorNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *processorNodeFieldsSendMessageType) GetName() string { return v.Name }

// tenantFields includes the GraphQL fields of Tenant requested by the fragment tenantFields.
type tenantFields struct {
	Active      bool    `json:"active"`
	Config      *string `json:"config"`
	Description *string `json:"description"`
	Name        string  `json:"name"`
	Region      string  `json:"region"`
	Table       string  `json:"table"`
}

// GetActive returns tenantFields.Active, and is useful for accessing the field via an interface.
func (v *tenantFields) GetActive() bool { return v.Active }

// GetConfig returns tenantFields.Config, and is useful for accessing the field via an interface.
func (v *tenantFields) GetConfig() *string { return v.Config }

// GetDescription returns tenantFields.Description, and is useful for accessing the field via an interface.
func (v *tenantFields) GetDescription() *string { return v.Description }

// GetName returns tenantFields.Name, and is useful for accessing the field via an interface.
func (v *tenantFields) GetName() string { return v.Name }

// GetRegion returns tenantFields.Region, and is useful for accessing the field via an interface.
func (v *tenantFields) GetRegion() string { return v.Region }

// GetTable returns tenantFields.Table, and is useful for accessing the field via an interface.
func (v *tenantFields) GetTable() string { return v.Table }

// timerNodeFields includes the GraphQL fields of TimerNode requested by the fragment timerNodeFields.
type timerNodeFields struct {
	ScheduleExpression string                          `json:"scheduleExpression"`
	SendMessageType    *timerNodeFieldsSendMessageType `json:"sendMessageType"`
}

// GetScheduleExpression returns timerNodeFields.ScheduleExpression, and is useful for accessing the field via an interface.
func (v *timerNodeFields) GetScheduleExpression() string { return v.ScheduleExpression }

// GetSendMessageType returns timerNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *timerNodeFields) GetSendMessageType() *timerNodeFieldsSendMessageType {
	return v.SendMessageType
}

// timerNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type timerNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns timerNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *timerNodeFieldsSendMessageType) GetName() string { return v.Name }

// webhookNodeFields includes the GraphQL fields of WebhookNode requested by the fragment webhookNodeFields.
type webhookNodeFields struct {
	Config                  *string                                                           `json:"config"`
	Endpoint                string                                                            `json:"endpoint"`
	InlineApiAuthenticator  *string                                                           `json:"inlineApiAuthenticator"`
	LoggingLevel            *LogLevel                                                         `json:"loggingLevel"`
	ManagedApiAuthenticator *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction `json:"managedApiAuthenticator"`
	Requirements            []string                                                          `json:"requirements"`
	SendMessageType         *webhookNodeFieldsSendMessageType                                 `json:"sendMessageType"`
}

// GetConfig returns webhookNodeFields.Config, and is useful for accessing the field via an interface.
func (v *webhookNodeFields) GetConfig() *string { return v.Config }

// GetEndpoint returns webhookNodeFields.Endpoint, and is useful for accessing the field via an interface.
func (v *webhookNodeFields) GetEndpoint() string { return v.Endpoint }

// GetInlineApiAuthenticator returns webhookNodeFields.InlineApiAuthenticator, and is useful for accessing the field via an interface.
func (v *webhookNodeFields) GetInlineApiAuthenticator() *string { return v.InlineApiAuthenticator }

// GetLoggingLevel returns webhookNodeFields.LoggingLevel, and is useful for accessing the field via an interface.
func (v *webhookNodeFields) GetLoggingLevel() *LogLevel { return v.LoggingLevel }

// GetManagedApiAuthenticator returns webhookNodeFields.ManagedApiAuthenticator, and is useful for accessing the field via an interface.
func (v *webhookNodeFields) GetManagedApiAuthenticator() *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction {
	return v.ManagedApiAuthenticator
}

// GetRequirements returns webhookNodeFields.Requirements, and is useful for accessing the field via an interface.
func (v *webhookNodeFields) GetRequirements() []string { return v.Requirements }

// GetSendMessageType returns webhookNodeFields.SendMessageType, and is useful for accessing the field via an interface.
func (v *webhookNodeFields) GetSendMessageType() *webhookNodeFieldsSendMessageType {
	return v.SendMessageType
}

// webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction includes the requested fields of the GraphQL type ApiAuthenticatorFunction.
type webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction struct {
	Name string `json:"name"`
}

// GetName returns webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction.Name, and is useful for accessing the field via an interface.
func (v *webhookNodeFieldsManagedApiAuthenticatorApiAuthenticatorFunction) GetName() string {
	return v.Name
}

// webhookNodeFieldsSendMessageType includes the requested fields of the GraphQL type MessageType.
type webhookNodeFieldsSendMessageType struct {
	Name string `json:"name"`
}

// GetName returns webhookNodeFieldsSendMessageType.Name, and is useful for accessing the field via an interface.
func (v *webhookNodeFieldsSendMessageType) GetName() string { return v.Name }

func CreateApiAuthenticatorFunction(
	ctx context.Context,
	client graphql.Client,
	code string,
	description string,
	name string,
	tenant string,
	readme *string,
	requirements []string,
) (*CreateApiAuthenticatorFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "CreateApiAuthenticatorFunction",
		Query: `
mutation CreateApiAuthenticatorFunction ($code: String!, $description: String!, $name: String!, $tenant: String!, $readme: String, $requirements: [String!]) {
	CreateApiAuthenticatorFunction(code: $code, description: $description, name: $name, tenant: $tenant, readme: $readme, requirements: $requirements) {
		... functionFields
	}
}
fragment functionFields on Function {
	code
	description
	inUse
	name
	readme
	requirements
	system
}
`,
		Variables: &__CreateApiAuthenticatorFunctionInput{
			Code:         code,
			Description:  description,
			Name:         name,
			Tenant:       tenant,
			Readme:       readme,
			Requirements: requirements,
		},
	}
	var err error

	var data CreateApiAuthenticatorFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateBitmapRouterNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	receiveMessageType string,
	tenant string,
	config *string,
	description *string,
	inlineBitmapper *string,
	loggingLevel *LogLevel,
	managedBitmapper *string,
	requirements []string,
	routeTable *string,
) (*CreateBitmapRouterNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateBitmapRouterNode",
		Query: `
mutation CreateBitmapRouterNode ($name: String!, $receiveMessageType: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineBitmapper: String, $loggingLevel: LogLevel, $managedBitmapper: String, $requirements: [String!], $routeTable: AWSJSON) {
	CreateBitmapRouterNode(name: $name, receiveMessageType: $receiveMessageType, tenant: $tenant, config: $config, description: $description, inlineBitmapper: $inlineBitmapper, loggingLevel: $loggingLevel, managedBitmapper: $managedBitmapper, requirements: $requirements, routeTable: $routeTable) {
		... nodeFields
		... bitmapRouterNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment bitmapRouterNodeFields on BitmapRouterNode {
	inlineBitmapper
	loggingLevel
	managedBitmapper {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
}
`,
		Variables: &__CreateBitmapRouterNodeInput{
			Name:               name,
			ReceiveMessageType: receiveMessageType,
			Tenant:             tenant,
			Config:             config,
			Description:        description,
			InlineBitmapper:    inlineBitmapper,
			LoggingLevel:       loggingLevel,
			ManagedBitmapper:   managedBitmapper,
			Requirements:       requirements,
			RouteTable:         routeTable,
		},
	}
	var err error

	var data CreateBitmapRouterNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateBitmapperFunction(
	ctx context.Context,
	client graphql.Client,
	argumentMessageType string,
	code string,
	description string,
	name string,
	tenant string,
	readme *string,
	requirements []string,
) (*CreateBitmapperFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "CreateBitmapperFunction",
		Query: `
mutation CreateBitmapperFunction ($argumentMessageType: String!, $code: String!, $description: String!, $name: String!, $tenant: String!, $readme: String, $requirements: [String!]) {
	CreateBitmapperFunction(argumentMessageType: $argumentMessageType, code: $code, description: $description, name: $name, tenant: $tenant, readme: $readme, requirements: $requirements) {
		... functionFields
		... bitmapperFunctionFields
	}
}
fragment functionFields on Function {
	code
	description
	inUse
	name
	readme
	requirements
	system
}
fragment bitmapperFunctionFields on BitmapperFunction {
	argumentMessageType {
		name
	}
}
`,
		Variables: &__CreateBitmapperFunctionInput{
			ArgumentMessageType: argumentMessageType,
			Code:                code,
			Description:         description,
			Name:                name,
			Tenant:              tenant,
			Readme:              readme,
			Requirements:        requirements,
		},
	}
	var err error

	var data CreateBitmapperFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateCrossAccountApp(
	ctx context.Context,
	client graphql.Client,
	account string,
	name string,
	tenant string,
	config *string,
	description *string,
	tableAccess *bool,
) (*CreateCrossAccountAppResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCrossAccountApp",
		Query: `
mutation CreateCrossAccountApp ($account: String!, $name: String!, $tenant: String!, $config: AWSJSON, $description: String, $tableAccess: Boolean) {
	CreateCrossAccountApp(account: $account, name: $name, tenant: $tenant, config: $config, description: $description, tableAccess: $tableAccess) {
		... appFields
		... crossAccountAppFields
	}
}
fragment appFields on App {
	description
	name
}
fragment crossAccountAppFields on CrossAccountApp {
	account
	appsyncEndpoint
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	iamPolicy
	tableAccess
}
fragment cognitoCredentialsFields on CognitoCredentials {
	clientId
	password
	userPoolId
	username
}
`,
		Variables: &__CreateCrossAccountAppInput{
			Account:     account,
			Name:        name,
			Tenant:      tenant,
			Config:      config,
			Description: description,
			TableAccess: tableAccess,
		},
	}
	var err error

	var data CreateCrossAccountAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateCrossTenantReceivingApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	sendingTenant string,
	tenant string,
) (*CreateCrossTenantReceivingAppResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCrossTenantReceivingApp",
		Query: `
mutation CreateCrossTenantReceivingApp ($name: String!, $sendingTenant: String!, $tenant: String!) {
	CreateCrossTenantReceivingApp(name: $name, sendingTenant: $sendingTenant, tenant: $tenant) {
		... appFields
		... crossTenantReceivingAppFields
	}
}
fragment appFields on App {
	description
	name
}
fragment crossTenantReceivingAppFields on CrossTenantReceivingApp {
	sendingApp
	sendingTenant
}
`,
		Variables: &__CreateCrossTenantReceivingAppInput{
			Name:          name,
			SendingTenant: sendingTenant,
			Tenant:        tenant,
		},
	}
	var err error

	var data CreateCrossTenantReceivingAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateCrossTenantSendingApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	receivingApp string,
	receivingTenant string,
	tenant string,
) (*CreateCrossTenantSendingAppResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCrossTenantSendingApp",
		Query: `
mutation CreateCrossTenantSendingApp ($name: String!, $receivingApp: String!, $receivingTenant: String!, $tenant: String!) {
	CreateCrossTenantSendingApp(name: $name, receivingApp: $receivingApp, receivingTenant: $receivingTenant, tenant: $tenant) {
		... appFields
		... crossTenantSendingAppFields
	}
}
fragment appFields on App {
	description
	name
}
fragment crossTenantSendingAppFields on CrossTenantSendingApp {
	receivingApp
	receivingTenant
}
`,
		Variables: &__CreateCrossTenantSendingAppInput{
			Name:            name,
			ReceivingApp:    receivingApp,
			ReceivingTenant: receivingTenant,
			Tenant:          tenant,
		},
	}
	var err error

	var data CreateCrossTenantSendingAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateCrossTenantSendingNode(
	ctx context.Context,
	client graphql.Client,
	app string,
	name string,
	receiveMessageType string,
	tenant string,
	config *string,
	description *string,
	inlineProcessor *string,
	loggingLevel *LogLevel,
	managedProcessor *string,
	requirements []string,
	sendMessageType *string,
	sequentialProcessing *bool,
) (*CreateCrossTenantSendingNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateCrossTenantSendingNode",
		Query: `
mutation CreateCrossTenantSendingNode ($app: String!, $name: String!, $receiveMessageType: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineProcessor: String, $loggingLevel: LogLevel, $managedProcessor: String, $requirements: [String!], $sendMessageType: String, $sequentialProcessing: Boolean) {
	CreateCrossTenantSendingNode(app: $app, name: $name, receiveMessageType: $receiveMessageType, tenant: $tenant, config: $config, description: $description, inlineProcessor: $inlineProcessor, loggingLevel: $loggingLevel, managedProcessor: $managedProcessor, requirements: $requirements, sendMessageType: $sendMessageType, sequentialProcessing: $sequentialProcessing) {
		... nodeFields
		... crossTenantSendingNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment crossTenantSendingNodeFields on CrossTenantSendingNode {
	app {
		name
	}
	inlineProcessor
	loggingLevel
	managedProcessor {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
	sequentialProcessing
}
`,
		Variables: &__CreateCrossTenantSendingNodeInput{
			App:                  app,
			Name:                 name,
			ReceiveMessageType:   receiveMessageType,
			Tenant:               tenant,
			Config:               config,
			Description:          description,
			InlineProcessor:      inlineProcessor,
			LoggingLevel:         loggingLevel,
			ManagedProcessor:     managedProcessor,
			Requirements:         requirements,
			SendMessageType:      sendMessageType,
			SequentialProcessing: sequentialProcessing,
		},
	}
	var err error

	var data CreateCrossTenantSendingNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateExternalApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	tableAccess *bool,
) (*CreateExternalAppResponse, error) {
	req := &graphql.Request{
		OpName: "CreateExternalApp",
		Query: `
mutation CreateExternalApp ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $tableAccess: Boolean) {
	CreateExternalApp(name: $name, tenant: $tenant, config: $config, description: $description, tableAccess: $tableAccess) {
		... appFields
		... externalAppFields
	}
}
fragment appFields on App {
	description
	name
}
fragment externalAppFields on ExternalApp {
	appsyncEndpoint
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	tableAccess
}
fragment cognitoCredentialsFields on CognitoCredentials {
	clientId
	password
	userPoolId
	username
}
`,
		Variables: &__CreateExternalAppInput{
			Name:        name,
			Tenant:      tenant,
			Config:      config,
			Description: description,
			TableAccess: tableAccess,
		},
	}
	var err error

	var data CreateExternalAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateExternalNode(
	ctx context.Context,
	client graphql.Client,
	app string,
	name string,
	tenant string,
	config *string,
	description *string,
	receiveMessageType *string,
	sendMessageType *string,
) (*CreateExternalNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateExternalNode",
		Query: `
mutation CreateExternalNode ($app: String!, $name: String!, $tenant: String!, $config: AWSJSON, $description: String, $receiveMessageType: String, $sendMessageType: String) {
	CreateExternalNode(app: $app, name: $name, tenant: $tenant, config: $config, description: $description, receiveMessageType: $receiveMessageType, sendMessageType: $sendMessageType) {
		... nodeFields
		... externalNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment externalNodeFields on ExternalNode {
	app {
		__typename
		... on CrossAccountApp {
			name
		}
		... on ExternalApp {
			name
		}
	}
	config
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
`,
		Variables: &__CreateExternalNodeInput{
			App:                app,
			Name:               name,
			Tenant:             tenant,
			Config:             config,
			Description:        description,
			ReceiveMessageType: receiveMessageType,
			SendMessageType:    sendMessageType,
		},
	}
	var err error

	var data CreateExternalNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateFilesDotComWebhookNode(
	ctx context.Context,
	client graphql.Client,
	apiKey string,
	name string,
	tenant string,
	description *string,
) (*CreateFilesDotComWebhookNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateFilesDotComWebhookNode",
		Query: `
mutation CreateFilesDotComWebhookNode ($apiKey: String!, $name: String!, $tenant: String!, $description: String) {
	CreateFilesDotComWebhookNode(apiKey: $apiKey, name: $name, tenant: $tenant, description: $description) {
		... nodeFields
		... filesDotComWebhookNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment filesDotComWebhookNodeFields on FilesDotComWebhookNode {
	endpoint
	sendMessageType {
		name
	}
}
`,
		Variables: &__CreateFilesDotComWebhookNodeInput{
			ApiKey:      apiKey,
			Name:        name,
			Tenant:      tenant,
			Description: description,
		},
	}
	var err error

	var data CreateFilesDotComWebhookNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateKmsKey(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	description *string,
) (*CreateKmsKeyResponse, error) {
	req := &graphql.Request{
		OpName: "CreateKmsKey",
		Query: `
mutation CreateKmsKey ($name: String!, $tenant: String!, $description: String) {
	CreateKmsKey(name: $name, tenant: $tenant, description: $description) {
		... kmsKeyFields
	}
}
fragment kmsKeyFields on KmsKey {
	arn
	description
	inUse
	name
}
`,
		Variables: &__CreateKmsKeyInput{
			Name:        name,
			Tenant:      tenant,
			Description: description,
		},
	}
	var err error

	var data CreateKmsKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateLoadBalancerNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	receiveMessageType string,
	tenant string,
	description *string,
) (*CreateLoadBalancerNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateLoadBalancerNode",
		Query: `
mutation CreateLoadBalancerNode ($name: String!, $receiveMessageType: String!, $tenant: String!, $description: String) {
	CreateLoadBalancerNode(name: $name, receiveMessageType: $receiveMessageType, tenant: $tenant, description: $description) {
		... nodeFields
		... loadBalancerNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment loadBalancerNodeFields on LoadBalancerNode {
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
`,
		Variables: &__CreateLoadBalancerNodeInput{
			Name:               name,
			ReceiveMessageType: receiveMessageType,
			Tenant:             tenant,
			Description:        description,
		},
	}
	var err error

	var data CreateLoadBalancerNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateManagedApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	tableAccess *bool,
) (*CreateManagedAppResponse, error) {
	req := &graphql.Request{
		OpName: "CreateManagedApp",
		Query: `
mutation CreateManagedApp ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $tableAccess: Boolean) {
	CreateManagedApp(name: $name, tenant: $tenant, config: $config, description: $description, tableAccess: $tableAccess) {
		... appFields
		... managedAppFields
	}
}
fragment appFields on App {
	description
	name
}
fragment managedAppFields on ManagedApp {
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	tableAccess
}
fragment cognitoCredentialsFields on CognitoCredentials {
	clientId
	password
	userPoolId
	username
}
`,
		Variables: &__CreateManagedAppInput{
			Name:        name,
			Tenant:      tenant,
			Config:      config,
			Description: description,
			TableAccess: tableAccess,
		},
	}
	var err error

	var data CreateManagedAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateManagedNode(
	ctx context.Context,
	client graphql.Client,
	app string,
	managedNodeType string,
	name string,
	tenant string,
	config *string,
	description *string,
	loggingLevel *LogLevel,
	mounts []MountInput,
	ports []PortInput,
) (*CreateManagedNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateManagedNode",
		Query: `
mutation CreateManagedNode ($app: String!, $managedNodeType: String!, $name: String!, $tenant: String!, $config: AWSJSON, $description: String, $loggingLevel: LogLevel, $mounts: [MountInput!], $ports: [PortInput!]) {
	CreateManagedNode(app: $app, managedNodeType: $managedNodeType, name: $name, tenant: $tenant, config: $config, description: $description, loggingLevel: $loggingLevel, mounts: $mounts, ports: $ports) {
		... nodeFields
		... managedNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment managedNodeFields on ManagedNode {
	app {
		name
	}
	config
	loggingLevel
	managedNodeType {
		name
	}
	mounts {
		description
		source
		target
	}
	ports {
		containerPort
		description
		hostAddress
		protocol
	}
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
`,
		Variables: &__CreateManagedNodeInput{
			App:             app,
			ManagedNodeType: managedNodeType,
			Name:            name,
			Tenant:          tenant,
			Config:          config,
			Description:     description,
			LoggingLevel:    loggingLevel,
			Mounts:          mounts,
			Ports:           ports,
		},
	}
	var err error

	var data CreateManagedNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateManagedNodeType(
	ctx context.Context,
	client graphql.Client,
	description string,
	imageUri string,
	name string,
	tenant string,
	configTemplate *string,
	mountRequirements []MountRequirementInput,
	portRequirements []PortRequirementInput,
	readme *string,
	receiveMessageType *string,
	sendMessageType *string,
) (*CreateManagedNodeTypeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateManagedNodeType",
		Query: `
mutation CreateManagedNodeType ($description: String!, $imageUri: String!, $name: String!, $tenant: String!, $configTemplate: AWSJSON, $mountRequirements: [MountRequirementInput!], $portRequirements: [PortRequirementInput!], $readme: String, $receiveMessageType: String, $sendMessageType: String) {
	CreateManagedNodeType(description: $description, imageUri: $imageUri, name: $name, tenant: $tenant, configTemplate: $configTemplate, mountRequirements: $mountRequirements, portRequirements: $portRequirements, readme: $readme, receiveMessageType: $receiveMessageType, sendMessageType: $sendMessageType) {
		... managedNodeTypeFields
	}
}
fragment managedNodeTypeFields on ManagedNodeType {
	configTemplate
	description
	imageUri
	inUse
	mountRequirements {
		description
		source
		target
	}
	name
	portRequirements {
		containerPort
		description
		protocol
	}
	readme
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
	system
}
`,
		Variables: &__CreateManagedNodeTypeInput{
			Description:        description,
			ImageUri:           imageUri,
			Name:               name,
			Tenant:             tenant,
			ConfigTemplate:     configTemplate,
			MountRequirements:  mountRequirements,
			PortRequirements:   portRequirements,
			Readme:             readme,
			ReceiveMessageType: receiveMessageType,
			SendMessageType:    sendMessageType,
		},
	}
	var err error

	var data CreateManagedNodeTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateMessageType(
	ctx context.Context,
	client graphql.Client,
	auditor string,
	bitmapperTemplate string,
	description string,
	name string,
	processorTemplate string,
	sampleMessage string,
	tenant string,
	readme *string,
	requirements []string,
) (*CreateMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateMessageType",
		Query: `
mutation CreateMessageType ($auditor: String!, $bitmapperTemplate: String!, $description: String!, $name: String!, $processorTemplate: String!, $sampleMessage: String!, $tenant: String!, $readme: String, $requirements: [String!]) {
	CreateMessageType(auditor: $auditor, bitmapperTemplate: $bitmapperTemplate, description: $description, name: $name, processorTemplate: $processorTemplate, sampleMessage: $sampleMessage, tenant: $tenant, readme: $readme, requirements: $requirements) {
		... messageTypeFields
	}
}
fragment messageTypeFields on MessageType {
	auditor
	bitmapperTemplate
	description
	inUse
	name
	processorTemplate
	readme
	requirements
	sampleMessage
	system
}
`,
		Variables: &__CreateMessageTypeInput{
			Auditor:           auditor,
			BitmapperTemplate: bitmapperTemplate,
			Description:       description,
			Name:              name,
			ProcessorTemplate: processorTemplate,
			SampleMessage:     sampleMessage,
			Tenant:            tenant,
			Readme:            readme,
			Requirements:      requirements,
		},
	}
	var err error

	var data CreateMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateProcessorFunction(
	ctx context.Context,
	client graphql.Client,
	argumentMessageType string,
	code string,
	description string,
	name string,
	tenant string,
	readme *string,
	requirements []string,
	returnMessageType *string,
) (*CreateProcessorFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "CreateProcessorFunction",
		Query: `
mutation CreateProcessorFunction ($argumentMessageType: String!, $code: String!, $description: String!, $name: String!, $tenant: String!, $readme: String, $requirements: [String!], $returnMessageType: String) {
	CreateProcessorFunction(argumentMessageType: $argumentMessageType, code: $code, description: $description, name: $name, tenant: $tenant, readme: $readme, requirements: $requirements, returnMessageType: $returnMessageType) {
		... functionFields
		... processorFunctionFields
	}
}
fragment functionFields on Function {
	code
	description
	inUse
	name
	readme
	requirements
	system
}
fragment processorFunctionFields on ProcessorFunction {
	argumentMessageType {
		name
	}
	returnMessageType {
		name
	}
}
`,
		Variables: &__CreateProcessorFunctionInput{
			ArgumentMessageType: argumentMessageType,
			Code:                code,
			Description:         description,
			Name:                name,
			Tenant:              tenant,
			Readme:              readme,
			Requirements:        requirements,
			ReturnMessageType:   returnMessageType,
		},
	}
	var err error

	var data CreateProcessorFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateProcessorNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	receiveMessageType string,
	tenant string,
	config *string,
	description *string,
	inlineProcessor *string,
	loggingLevel *LogLevel,
	managedProcessor *string,
	requirements []string,
	sendMessageType *string,
	sequentialProcessing *bool,
) (*CreateProcessorNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateProcessorNode",
		Query: `
mutation CreateProcessorNode ($name: String!, $receiveMessageType: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineProcessor: String, $loggingLevel: LogLevel, $managedProcessor: String, $requirements: [String!], $sendMessageType: String, $sequentialProcessing: Boolean) {
	CreateProcessorNode(name: $name, receiveMessageType: $receiveMessageType, tenant: $tenant, config: $config, description: $description, inlineProcessor: $inlineProcessor, loggingLevel: $loggingLevel, managedProcessor: $managedProcessor, requirements: $requirements, sendMessageType: $sendMessageType, sequentialProcessing: $sequentialProcessing) {
		... nodeFields
		... processorNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment processorNodeFields on ProcessorNode {
	config
	inlineProcessor
	loggingLevel
	managedProcessor {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
	sequentialProcessing
}
`,
		Variables: &__CreateProcessorNodeInput{
			Name:                 name,
			ReceiveMessageType:   receiveMessageType,
			Tenant:               tenant,
			Config:               config,
			Description:          description,
			InlineProcessor:      inlineProcessor,
			LoggingLevel:         loggingLevel,
			ManagedProcessor:     managedProcessor,
			Requirements:         requirements,
			SendMessageType:      sendMessageType,
			SequentialProcessing: sequentialProcessing,
		},
	}
	var err error

	var data CreateProcessorNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateTimerNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	scheduleExpression string,
	tenant string,
	description *string,
) (*CreateTimerNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateTimerNode",
		Query: `
mutation CreateTimerNode ($name: String!, $scheduleExpression: String!, $tenant: String!, $description: String) {
	CreateTimerNode(name: $name, scheduleExpression: $scheduleExpression, tenant: $tenant, description: $description) {
		... nodeFields
		... timerNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment timerNodeFields on TimerNode {
	scheduleExpression
	sendMessageType {
		name
	}
}
`,
		Variables: &__CreateTimerNodeInput{
			Name:               name,
			ScheduleExpression: scheduleExpression,
			Tenant:             tenant,
			Description:        description,
		},
	}
	var err error

	var data CreateTimerNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func CreateWebhookNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	inlineApiAuthenticator *string,
	loggingLevel *LogLevel,
	managedApiAuthenticator *string,
	requirements []string,
	sendMessageType *string,
) (*CreateWebhookNodeResponse, error) {
	req := &graphql.Request{
		OpName: "CreateWebhookNode",
		Query: `
mutation CreateWebhookNode ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineApiAuthenticator: String, $loggingLevel: LogLevel, $managedApiAuthenticator: String, $requirements: [String!], $sendMessageType: String) {
	CreateWebhookNode(name: $name, tenant: $tenant, config: $config, description: $description, inlineApiAuthenticator: $inlineApiAuthenticator, loggingLevel: $loggingLevel, managedApiAuthenticator: $managedApiAuthenticator, requirements: $requirements, sendMessageType: $sendMessageType) {
		... nodeFields
		... webhookNodeFields
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment webhookNodeFields on WebhookNode {
	config
	endpoint
	inlineApiAuthenticator
	loggingLevel
	managedApiAuthenticator {
		name
	}
	requirements
	sendMessageType {
		name
	}
}
`,
		Variables: &__CreateWebhookNodeInput{
			Name:                    name,
			Tenant:                  tenant,
			Config:                  config,
			Description:             description,
			InlineApiAuthenticator:  inlineApiAuthenticator,
			LoggingLevel:            loggingLevel,
			ManagedApiAuthenticator: managedApiAuthenticator,
			Requirements:            requirements,
			SendMessageType:         sendMessageType,
		},
	}
	var err error

	var data CreateWebhookNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteAppResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteApp",
		Query: `
query DeleteApp ($name: String!, $tenant: String!) {
	GetApp(name: $name, tenant: $tenant) {
		__typename
		Delete(drainEdges: true)
	}
}
`,
		Variables: &__DeleteAppInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteFunction(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteFunction",
		Query: `
query DeleteFunction ($name: String!, $tenant: String!) {
	GetFunction(name: $name, tenant: $tenant) {
		__typename
		Delete
	}
}
`,
		Variables: &__DeleteFunctionInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteKmsKey(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteKmsKeyResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteKmsKey",
		Query: `
query DeleteKmsKey ($name: String!, $tenant: String!) {
	GetKmsKey(name: $name, tenant: $tenant) {
		Delete
	}
}
`,
		Variables: &__DeleteKmsKeyInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteKmsKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteManagedNodeType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteManagedNodeTypeResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteManagedNodeType",
		Query: `
query DeleteManagedNodeType ($name: String!, $tenant: String!) {
	GetManagedNodeType(name: $name, tenant: $tenant) {
		Delete
	}
}
`,
		Variables: &__DeleteManagedNodeTypeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteManagedNodeTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteMessageType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteMessageType",
		Query: `
query DeleteMessageType ($name: String!, $tenant: String!) {
	GetMessageType(name: $name, tenant: $tenant) {
		Delete
	}
}
`,
		Variables: &__DeleteMessageTypeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func DeleteNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*DeleteNodeResponse, error) {
	req := &graphql.Request{
		OpName: "DeleteNode",
		Query: `
query DeleteNode ($name: String!, $tenant: String!) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on BitmapRouterNode {
			Delete(drainEdges: true)
		}
		... on CrossTenantReceivingNode {
			Delete(drainEdges: true)
		}
		... on CrossTenantSendingNode {
			Delete(drainEdges: true)
		}
		... on ExternalNode {
			Delete(drainEdges: true)
		}
		... on FilesDotComWebhookNode {
			Delete(drainEdges: true)
		}
		... on LoadBalancerNode {
			Delete(drainEdges: true)
		}
		... on ManagedNode {
			Delete(drainEdges: true)
		}
		... on ProcessorNode {
			Delete(drainEdges: true)
		}
		... on TimerNode {
			Delete(drainEdges: true)
		}
		... on WebhookNode {
			Delete(drainEdges: true)
		}
	}
}
`,
		Variables: &__DeleteNodeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data DeleteNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadAppResponse, error) {
	req := &graphql.Request{
		OpName: "ReadApp",
		Query: `
query ReadApp ($name: String!, $tenant: String!) {
	GetApp(name: $name, tenant: $tenant) {
		__typename
		... appFields
		... on CrossAccountApp {
			... crossAccountAppFields
		}
		... on CrossTenantReceivingApp {
			... crossTenantReceivingAppFields
		}
		... on CrossTenantSendingApp {
			... crossTenantSendingAppFields
		}
		... on ExternalApp {
			... externalAppFields
		}
		... on ManagedApp {
			... managedAppFields
		}
	}
}
fragment appFields on App {
	description
	name
}
fragment crossAccountAppFields on CrossAccountApp {
	account
	appsyncEndpoint
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	iamPolicy
	tableAccess
}
fragment crossTenantReceivingAppFields on CrossTenantReceivingApp {
	sendingApp
	sendingTenant
}
fragment crossTenantSendingAppFields on CrossTenantSendingApp {
	receivingApp
	receivingTenant
}
fragment externalAppFields on ExternalApp {
	appsyncEndpoint
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	tableAccess
}
fragment managedAppFields on ManagedApp {
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	tableAccess
}
fragment cognitoCredentialsFields on CognitoCredentials {
	clientId
	password
	userPoolId
	username
}
`,
		Variables: &__ReadAppInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadFunction(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "ReadFunction",
		Query: `
query ReadFunction ($name: String!, $tenant: String!) {
	GetFunction(name: $name, tenant: $tenant) {
		__typename
		... functionFields
		... on BitmapperFunction {
			... bitmapperFunctionFields
		}
		... on ProcessorFunction {
			... processorFunctionFields
		}
	}
}
fragment functionFields on Function {
	code
	description
	inUse
	name
	readme
	requirements
	system
}
fragment bitmapperFunctionFields on BitmapperFunction {
	argumentMessageType {
		name
	}
}
fragment processorFunctionFields on ProcessorFunction {
	argumentMessageType {
		name
	}
	returnMessageType {
		name
	}
}
`,
		Variables: &__ReadFunctionInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadKmsKey(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadKmsKeyResponse, error) {
	req := &graphql.Request{
		OpName: "ReadKmsKey",
		Query: `
query ReadKmsKey ($name: String!, $tenant: String!) {
	GetKmsKey(name: $name, tenant: $tenant) {
		... kmsKeyFields
	}
}
fragment kmsKeyFields on KmsKey {
	arn
	description
	inUse
	name
}
`,
		Variables: &__ReadKmsKeyInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadKmsKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadManagedAppIso(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadManagedAppIsoResponse, error) {
	req := &graphql.Request{
		OpName: "ReadManagedAppIso",
		Query: `
query ReadManagedAppIso ($name: String!, $tenant: String!) {
	GetApp(name: $name, tenant: $tenant) {
		__typename
		... on ManagedApp {
			iso
		}
	}
}
`,
		Variables: &__ReadManagedAppIsoInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadManagedAppIsoResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadManagedAppUserdata(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadManagedAppUserdataResponse, error) {
	req := &graphql.Request{
		OpName: "ReadManagedAppUserdata",
		Query: `
query ReadManagedAppUserdata ($name: String!, $tenant: String!) {
	GetApp(name: $name, tenant: $tenant) {
		__typename
		... on ManagedApp {
			userdata
		}
	}
}
`,
		Variables: &__ReadManagedAppUserdataInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadManagedAppUserdataResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadManagedNodeType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadManagedNodeTypeResponse, error) {
	req := &graphql.Request{
		OpName: "ReadManagedNodeType",
		Query: `
query ReadManagedNodeType ($name: String!, $tenant: String!) {
	GetManagedNodeType(name: $name, tenant: $tenant) {
		... managedNodeTypeFields
	}
}
fragment managedNodeTypeFields on ManagedNodeType {
	configTemplate
	description
	imageUri
	inUse
	mountRequirements {
		description
		source
		target
	}
	name
	portRequirements {
		containerPort
		description
		protocol
	}
	readme
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
	system
}
`,
		Variables: &__ReadManagedNodeTypeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadManagedNodeTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadMessageType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "ReadMessageType",
		Query: `
query ReadMessageType ($name: String!, $tenant: String!) {
	GetMessageType(name: $name, tenant: $tenant) {
		... messageTypeFields
	}
}
fragment messageTypeFields on MessageType {
	auditor
	bitmapperTemplate
	description
	inUse
	name
	processorTemplate
	readme
	requirements
	sampleMessage
	system
}
`,
		Variables: &__ReadMessageTypeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
) (*ReadNodeResponse, error) {
	req := &graphql.Request{
		OpName: "ReadNode",
		Query: `
query ReadNode ($name: String!, $tenant: String!) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... nodeFields
		... on AlertEmitterNode {
			... alertEmitterNodeFields
		}
		... on AppChangeReceiverNode {
			... appChangeReceiverNodeFields
		}
		... on AppChangeRouterNode {
			... appChangeRouterNodeFields
		}
		... on AuditEmitterNode {
			... auditEmitterNodeFields
		}
		... on BitmapRouterNode {
			... bitmapRouterNodeFields
		}
		... on ChangeEmitterNode {
			... changeEmitterNodeFields
		}
		... on CrossTenantReceivingNode {
			... crossTenantReceivingNodeFields
		}
		... on CrossTenantSendingNode {
			... crossTenantSendingNodeFields
		}
		... on DeadLetterEmitterNode {
			... deadLetterEmitterNodeFields
		}
		... on ExternalNode {
			... externalNodeFields
		}
		... on FilesDotComWebhookNode {
			... filesDotComWebhookNodeFields
		}
		... on LoadBalancerNode {
			... loadBalancerNodeFields
		}
		... on LogEmitterNode {
			... logEmitterNodeFields
		}
		... on ManagedNode {
			... managedNodeFields
		}
		... on ProcessorNode {
			... processorNodeFields
		}
		... on TimerNode {
			... timerNodeFields
		}
		... on WebhookNode {
			... webhookNodeFields
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment alertEmitterNodeFields on AlertEmitterNode {
	sendMessageType {
		name
	}
}
fragment appChangeReceiverNodeFields on AppChangeReceiverNode {
	app {
		__typename
		name
	}
	receiveMessageType {
		name
	}
}
fragment appChangeRouterNodeFields on AppChangeRouterNode {
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
fragment auditEmitterNodeFields on AuditEmitterNode {
	sendMessageType {
		name
	}
}
fragment bitmapRouterNodeFields on BitmapRouterNode {
	inlineBitmapper
	loggingLevel
	managedBitmapper {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
}
fragment changeEmitterNodeFields on ChangeEmitterNode {
	sendMessageType {
		name
	}
}
fragment crossTenantReceivingNodeFields on CrossTenantReceivingNode {
	app {
		name
	}
	sendMessageType {
		name
	}
}
fragment crossTenantSendingNodeFields on CrossTenantSendingNode {
	app {
		name
	}
	inlineProcessor
	loggingLevel
	managedProcessor {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
	sequentialProcessing
}
fragment deadLetterEmitterNodeFields on DeadLetterEmitterNode {
	sendMessageType {
		name
	}
}
fragment externalNodeFields on ExternalNode {
	app {
		__typename
		... on CrossAccountApp {
			name
		}
		... on ExternalApp {
			name
		}
	}
	config
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
fragment filesDotComWebhookNodeFields on FilesDotComWebhookNode {
	endpoint
	sendMessageType {
		name
	}
}
fragment loadBalancerNodeFields on LoadBalancerNode {
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
fragment logEmitterNodeFields on LogEmitterNode {
	sendMessageType {
		name
	}
}
fragment managedNodeFields on ManagedNode {
	app {
		name
	}
	config
	loggingLevel
	managedNodeType {
		name
	}
	mounts {
		description
		source
		target
	}
	ports {
		containerPort
		description
		hostAddress
		protocol
	}
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
fragment processorNodeFields on ProcessorNode {
	config
	inlineProcessor
	loggingLevel
	managedProcessor {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
	sequentialProcessing
}
fragment timerNodeFields on TimerNode {
	scheduleExpression
	sendMessageType {
		name
	}
}
fragment webhookNodeFields on WebhookNode {
	config
	endpoint
	inlineApiAuthenticator
	loggingLevel
	managedApiAuthenticator {
		name
	}
	requirements
	sendMessageType {
		name
	}
}
`,
		Variables: &__ReadNodeInput{
			Name:   name,
			Tenant: tenant,
		},
	}
	var err error

	var data ReadNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadTenant(
	ctx context.Context,
	client graphql.Client,
	tenant string,
) (*ReadTenantResponse, error) {
	req := &graphql.Request{
		OpName: "ReadTenant",
		Query: `
query ReadTenant ($tenant: String!) {
	GetTenant(tenant: $tenant) {
		... tenantFields
	}
}
fragment tenantFields on Tenant {
	active
	config
	description
	name
	region
	table
}
`,
		Variables: &__ReadTenantInput{
			Tenant: tenant,
		},
	}
	var err error

	var data ReadTenantResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func ReadTenantAwsCredentials(
	ctx context.Context,
	client graphql.Client,
	tenant string,
	duration *int,
) (*ReadTenantAwsCredentialsResponse, error) {
	req := &graphql.Request{
		OpName: "ReadTenantAwsCredentials",
		Query: `
query ReadTenantAwsCredentials ($tenant: String!, $duration: Int) {
	GetTenant(tenant: $tenant) {
		GetAwsCredentials(duration: $duration) {
			accessKeyId
			expiration
			secretAccessKey
			sessionToken
		}
	}
}
`,
		Variables: &__ReadTenantAwsCredentialsInput{
			Tenant:   tenant,
			Duration: duration,
		},
	}
	var err error

	var data ReadTenantAwsCredentialsResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateBitmpaRouterNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	inlineBitmapper *string,
	loggingLevel *LogLevel,
	managedBitmapper *string,
	requirements []string,
	routeTable *string,
) (*UpdateBitmpaRouterNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateBitmpaRouterNode",
		Query: `
query UpdateBitmpaRouterNode ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineBitmapper: String, $loggingLevel: LogLevel, $managedBitmapper: String, $requirements: [String!], $routeTable: AWSJSON) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on BitmapRouterNode {
			Update(config: $config, description: $description, inlineBitmapper: $inlineBitmapper, loggingLevel: $loggingLevel, managedBitmapper: $managedBitmapper, requirements: $requirements, routeTable: $routeTable) {
				... nodeFields
				... bitmapRouterNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment bitmapRouterNodeFields on BitmapRouterNode {
	inlineBitmapper
	loggingLevel
	managedBitmapper {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateBitmpaRouterNodeInput{
			Name:             name,
			Tenant:           tenant,
			Config:           config,
			Description:      description,
			InlineBitmapper:  inlineBitmapper,
			LoggingLevel:     loggingLevel,
			ManagedBitmapper: managedBitmapper,
			Requirements:     requirements,
			RouteTable:       routeTable,
		},
	}
	var err error

	var data UpdateBitmpaRouterNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateCrossTenantApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	description *string,
) (*UpdateCrossTenantAppResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateCrossTenantApp",
		Query: `
query UpdateCrossTenantApp ($name: String!, $tenant: String!, $description: String) {
	GetApp(name: $name, tenant: $tenant) {
		__typename
		... on CrossTenantReceivingApp {
			Update(description: $description) {
				... appFields
				... crossTenantReceivingAppFields
			}
		}
		... on CrossTenantSendingApp {
			Update(description: $description) {
				... appFields
				... crossTenantSendingAppFields
			}
		}
	}
}
fragment appFields on App {
	description
	name
}
fragment crossTenantReceivingAppFields on CrossTenantReceivingApp {
	sendingApp
	sendingTenant
}
fragment crossTenantSendingAppFields on CrossTenantSendingApp {
	receivingApp
	receivingTenant
}
`,
		Variables: &__UpdateCrossTenantAppInput{
			Name:        name,
			Tenant:      tenant,
			Description: description,
		},
	}
	var err error

	var data UpdateCrossTenantAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateCrossTenantReceivingNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	description *string,
) (*UpdateCrossTenantReceivingNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateCrossTenantReceivingNode",
		Query: `
query UpdateCrossTenantReceivingNode ($name: String!, $tenant: String!, $description: String) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on CrossTenantReceivingNode {
			Update(description: $description) {
				... nodeFields
				... crossTenantReceivingNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment crossTenantReceivingNodeFields on CrossTenantReceivingNode {
	app {
		name
	}
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateCrossTenantReceivingNodeInput{
			Name:        name,
			Tenant:      tenant,
			Description: description,
		},
	}
	var err error

	var data UpdateCrossTenantReceivingNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateCrossTenantSendingNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	inlineProcessor *string,
	loggingLevel *LogLevel,
	managedProcessor *string,
	requirements []string,
	sequentialProcessing *bool,
) (*UpdateCrossTenantSendingNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateCrossTenantSendingNode",
		Query: `
query UpdateCrossTenantSendingNode ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineProcessor: String, $loggingLevel: LogLevel, $managedProcessor: String, $requirements: [String!], $sequentialProcessing: Boolean) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on CrossTenantSendingNode {
			Update(config: $config, description: $description, inlineProcessor: $inlineProcessor, loggingLevel: $loggingLevel, managedProcessor: $managedProcessor, requirements: $requirements, sequentialProcessing: $sequentialProcessing) {
				... nodeFields
				... crossTenantSendingNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment crossTenantSendingNodeFields on CrossTenantSendingNode {
	app {
		name
	}
	inlineProcessor
	loggingLevel
	managedProcessor {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
	sequentialProcessing
}
`,
		Variables: &__UpdateCrossTenantSendingNodeInput{
			Name:                 name,
			Tenant:               tenant,
			Config:               config,
			Description:          description,
			InlineProcessor:      inlineProcessor,
			LoggingLevel:         loggingLevel,
			ManagedProcessor:     managedProcessor,
			Requirements:         requirements,
			SequentialProcessing: sequentialProcessing,
		},
	}
	var err error

	var data UpdateCrossTenantSendingNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateExternalNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
) (*UpdateExternalNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateExternalNode",
		Query: `
query UpdateExternalNode ($name: String!, $tenant: String!, $config: AWSJSON, $description: String) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on ExternalNode {
			Update(config: $config, description: $description) {
				... nodeFields
				... externalNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment externalNodeFields on ExternalNode {
	app {
		__typename
		... on CrossAccountApp {
			name
		}
		... on ExternalApp {
			name
		}
	}
	config
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateExternalNodeInput{
			Name:        name,
			Tenant:      tenant,
			Config:      config,
			Description: description,
		},
	}
	var err error

	var data UpdateExternalNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateFilesDotComWebhookNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	apiKey *string,
	description *string,
) (*UpdateFilesDotComWebhookNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateFilesDotComWebhookNode",
		Query: `
query UpdateFilesDotComWebhookNode ($name: String!, $tenant: String!, $apiKey: String, $description: String) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on FilesDotComWebhookNode {
			Update(apiKey: $apiKey, description: $description) {
				... nodeFields
				... filesDotComWebhookNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment filesDotComWebhookNodeFields on FilesDotComWebhookNode {
	endpoint
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateFilesDotComWebhookNodeInput{
			Name:        name,
			Tenant:      tenant,
			ApiKey:      apiKey,
			Description: description,
		},
	}
	var err error

	var data UpdateFilesDotComWebhookNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateFunction(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	code *string,
	description *string,
	readme *string,
	requirements []string,
) (*UpdateFunctionResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateFunction",
		Query: `
query UpdateFunction ($name: String!, $tenant: String!, $code: String, $description: String, $readme: String, $requirements: [String!]) {
	GetFunction(name: $name, tenant: $tenant) {
		__typename
		... on ApiAuthenticatorFunction {
			Update(code: $code, description: $description, readme: $readme, requirements: $requirements) {
				... functionFields
			}
		}
		... on BitmapperFunction {
			Update(code: $code, description: $description, readme: $readme, requirements: $requirements) {
				... functionFields
				... bitmapperFunctionFields
			}
		}
		... on ProcessorFunction {
			Update(code: $code, description: $description, readme: $readme, requirements: $requirements) {
				... functionFields
				... processorFunctionFields
			}
		}
	}
}
fragment functionFields on Function {
	code
	description
	inUse
	name
	readme
	requirements
	system
}
fragment bitmapperFunctionFields on BitmapperFunction {
	argumentMessageType {
		name
	}
}
fragment processorFunctionFields on ProcessorFunction {
	argumentMessageType {
		name
	}
	returnMessageType {
		name
	}
}
`,
		Variables: &__UpdateFunctionInput{
			Name:         name,
			Tenant:       tenant,
			Code:         code,
			Description:  description,
			Readme:       readme,
			Requirements: requirements,
		},
	}
	var err error

	var data UpdateFunctionResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateKmsKey(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	description *string,
) (*UpdateKmsKeyResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateKmsKey",
		Query: `
query UpdateKmsKey ($name: String!, $tenant: String!, $description: String) {
	GetKmsKey(name: $name, tenant: $tenant) {
		Update(description: $description) {
			... kmsKeyFields
		}
	}
}
fragment kmsKeyFields on KmsKey {
	arn
	description
	inUse
	name
}
`,
		Variables: &__UpdateKmsKeyInput{
			Name:        name,
			Tenant:      tenant,
			Description: description,
		},
	}
	var err error

	var data UpdateKmsKeyResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateLoadBalancerNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	description *string,
) (*UpdateLoadBalancerNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateLoadBalancerNode",
		Query: `
query UpdateLoadBalancerNode ($name: String!, $tenant: String!, $description: String) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on LoadBalancerNode {
			Update(description: $description) {
				... nodeFields
				... loadBalancerNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment loadBalancerNodeFields on LoadBalancerNode {
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateLoadBalancerNodeInput{
			Name:        name,
			Tenant:      tenant,
			Description: description,
		},
	}
	var err error

	var data UpdateLoadBalancerNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateManagedNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	loggingLevel *LogLevel,
	mounts []MountInput,
	ports []PortInput,
) (*UpdateManagedNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateManagedNode",
		Query: `
query UpdateManagedNode ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $loggingLevel: LogLevel, $mounts: [MountInput!], $ports: [PortInput!]) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on ManagedNode {
			Update(config: $config, description: $description, loggingLevel: $loggingLevel, mounts: $mounts, ports: $ports) {
				... nodeFields
				... managedNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment managedNodeFields on ManagedNode {
	app {
		name
	}
	config
	loggingLevel
	managedNodeType {
		name
	}
	mounts {
		description
		source
		target
	}
	ports {
		containerPort
		description
		hostAddress
		protocol
	}
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateManagedNodeInput{
			Name:         name,
			Tenant:       tenant,
			Config:       config,
			Description:  description,
			LoggingLevel: loggingLevel,
			Mounts:       mounts,
			Ports:        ports,
		},
	}
	var err error

	var data UpdateManagedNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateManagedNodeType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	description *string,
	imageUri *string,
	readme *string,
) (*UpdateManagedNodeTypeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateManagedNodeType",
		Query: `
query UpdateManagedNodeType ($name: String!, $tenant: String!, $description: String, $imageUri: String, $readme: String) {
	GetManagedNodeType(name: $name, tenant: $tenant) {
		Update(description: $description, imageUri: $imageUri, readme: $readme) {
			... managedNodeTypeFields
		}
	}
}
fragment managedNodeTypeFields on ManagedNodeType {
	configTemplate
	description
	imageUri
	inUse
	mountRequirements {
		description
		source
		target
	}
	name
	portRequirements {
		containerPort
		description
		protocol
	}
	readme
	receiveMessageType {
		name
	}
	sendMessageType {
		name
	}
	system
}
`,
		Variables: &__UpdateManagedNodeTypeInput{
			Name:        name,
			Tenant:      tenant,
			Description: description,
			ImageUri:    imageUri,
			Readme:      readme,
		},
	}
	var err error

	var data UpdateManagedNodeTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateMessageType(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	auditor *string,
	bitmapperTemplate *string,
	description *string,
	processorTemplate *string,
	readme *string,
	requirements []string,
	sampleMessage *string,
) (*UpdateMessageTypeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateMessageType",
		Query: `
query UpdateMessageType ($name: String!, $tenant: String!, $auditor: String, $bitmapperTemplate: String, $description: String, $processorTemplate: String, $readme: String, $requirements: [String!], $sampleMessage: String) {
	GetMessageType(name: $name, tenant: $tenant) {
		Update(auditor: $auditor, bitmapperTemplate: $bitmapperTemplate, description: $description, processorTemplate: $processorTemplate, sampleMessage: $sampleMessage, readme: $readme, requirements: $requirements) {
			... messageTypeFields
		}
	}
}
fragment messageTypeFields on MessageType {
	auditor
	bitmapperTemplate
	description
	inUse
	name
	processorTemplate
	readme
	requirements
	sampleMessage
	system
}
`,
		Variables: &__UpdateMessageTypeInput{
			Name:              name,
			Tenant:            tenant,
			Auditor:           auditor,
			BitmapperTemplate: bitmapperTemplate,
			Description:       description,
			ProcessorTemplate: processorTemplate,
			Readme:            readme,
			Requirements:      requirements,
			SampleMessage:     sampleMessage,
		},
	}
	var err error

	var data UpdateMessageTypeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateProcessorNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	inlineProcessor *string,
	loggingLevel *LogLevel,
	managedProcessor *string,
	requirements []string,
	sequentialProcessing *bool,
) (*UpdateProcessorNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateProcessorNode",
		Query: `
query UpdateProcessorNode ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineProcessor: String, $loggingLevel: LogLevel, $managedProcessor: String, $requirements: [String!], $sequentialProcessing: Boolean) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on ProcessorNode {
			Update(config: $config, description: $description, inlineProcessor: $inlineProcessor, loggingLevel: $loggingLevel, managedProcessor: $managedProcessor, requirements: $requirements, sequentialProcessing: $sequentialProcessing) {
				... nodeFields
				... processorNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment processorNodeFields on ProcessorNode {
	config
	inlineProcessor
	loggingLevel
	managedProcessor {
		name
	}
	receiveMessageType {
		name
	}
	requirements
	sendMessageType {
		name
	}
	sequentialProcessing
}
`,
		Variables: &__UpdateProcessorNodeInput{
			Name:                 name,
			Tenant:               tenant,
			Config:               config,
			Description:          description,
			InlineProcessor:      inlineProcessor,
			LoggingLevel:         loggingLevel,
			ManagedProcessor:     managedProcessor,
			Requirements:         requirements,
			SequentialProcessing: sequentialProcessing,
		},
	}
	var err error

	var data UpdateProcessorNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateRemotetApp(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	tableAccess *bool,
) (*UpdateRemotetAppResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateRemotetApp",
		Query: `
query UpdateRemotetApp ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $tableAccess: Boolean) {
	GetApp(name: $name, tenant: $tenant) {
		__typename
		... on CrossAccountApp {
			Update(config: $config, description: $description, tableAccess: $tableAccess) {
				... appFields
				... crossAccountAppFields
			}
		}
		... on ExternalApp {
			Update(config: $config, description: $description, tableAccess: $tableAccess) {
				... appFields
				... externalAppFields
			}
		}
		... on ManagedApp {
			Update(config: $config, description: $description, tableAccess: $tableAccess) {
				... appFields
				... managedAppFields
			}
		}
	}
}
fragment appFields on App {
	description
	name
}
fragment crossAccountAppFields on CrossAccountApp {
	account
	appsyncEndpoint
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	iamPolicy
	tableAccess
}
fragment externalAppFields on ExternalApp {
	appsyncEndpoint
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	tableAccess
}
fragment managedAppFields on ManagedApp {
	auditRecordsEndpoint
	config
	credentials {
		... cognitoCredentialsFields
	}
	tableAccess
}
fragment cognitoCredentialsFields on CognitoCredentials {
	clientId
	password
	userPoolId
	username
}
`,
		Variables: &__UpdateRemotetAppInput{
			Name:        name,
			Tenant:      tenant,
			Config:      config,
			Description: description,
			TableAccess: tableAccess,
		},
	}
	var err error

	var data UpdateRemotetAppResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateTenant(
	ctx context.Context,
	client graphql.Client,
	tenant string,
	config *string,
	description *string,
) (*UpdateTenantResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateTenant",
		Query: `
query UpdateTenant ($tenant: String!, $config: AWSJSON, $description: String) {
	GetTenant(tenant: $tenant) {
		Update(config: $config, description: $description) {
			... tenantFields
		}
	}
}
fragment tenantFields on Tenant {
	active
	config
	description
	name
	region
	table
}
`,
		Variables: &__UpdateTenantInput{
			Tenant:      tenant,
			Config:      config,
			Description: description,
		},
	}
	var err error

	var data UpdateTenantResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateTimerNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	description *string,
) (*UpdateTimerNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateTimerNode",
		Query: `
query UpdateTimerNode ($name: String!, $tenant: String!, $description: String) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on TimerNode {
			Update(description: $description) {
				... nodeFields
				... timerNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment timerNodeFields on TimerNode {
	scheduleExpression
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateTimerNodeInput{
			Name:        name,
			Tenant:      tenant,
			Description: description,
		},
	}
	var err error

	var data UpdateTimerNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}

func UpdateWebhookNode(
	ctx context.Context,
	client graphql.Client,
	name string,
	tenant string,
	config *string,
	description *string,
	inlineApiAuthenticator *string,
	loggingLevel *LogLevel,
	managedApiAuthenticator *string,
	requirements []string,
) (*UpdateWebhookNodeResponse, error) {
	req := &graphql.Request{
		OpName: "UpdateWebhookNode",
		Query: `
query UpdateWebhookNode ($name: String!, $tenant: String!, $config: AWSJSON, $description: String, $inlineApiAuthenticator: String, $loggingLevel: LogLevel, $managedApiAuthenticator: String, $requirements: [String!]) {
	GetNode(name: $name, tenant: $tenant) {
		__typename
		... on WebhookNode {
			Update(config: $config, description: $description, inlineApiAuthenticator: $inlineApiAuthenticator, loggingLevel: $loggingLevel, managedApiAuthenticator: $managedApiAuthenticator, requirements: $requirements) {
				... nodeFields
				... webhookNodeFields
			}
		}
	}
}
fragment nodeFields on Node {
	description
	name
}
fragment webhookNodeFields on WebhookNode {
	config
	endpoint
	inlineApiAuthenticator
	loggingLevel
	managedApiAuthenticator {
		name
	}
	requirements
	sendMessageType {
		name
	}
}
`,
		Variables: &__UpdateWebhookNodeInput{
			Name:                    name,
			Tenant:                  tenant,
			Config:                  config,
			Description:             description,
			InlineApiAuthenticator:  inlineApiAuthenticator,
			LoggingLevel:            loggingLevel,
			ManagedApiAuthenticator: managedApiAuthenticator,
			Requirements:            requirements,
		},
	}
	var err error

	var data UpdateWebhookNodeResponse
	resp := &graphql.Response{Data: &data}

	err = client.MakeRequest(
		ctx,
		req,
		resp,
	)

	return &data, err
}
